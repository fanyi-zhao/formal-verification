                                                                                                    
 /*                                                                                                 
                                                                                                    
 /home/artifact/Synchronicity/workspace/Synchronicity/tests/new-yields-ensures-1.sink:              
                                                                                                    
 AST:                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
    class Cow {                                                                                     
       int x holds(this, tid)                                                                       
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue > this.x ? R : E                                                                
       : E                                                                                          
        yields_as newValue >= this.x;                                                               
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      public void f() {                                                                             
        synchronized (this) {                                                                       
          int v;                                                                                    
          v := this.x;                                                                              
          if (v < 10) {                                                                             
            this.x := 10;                                                                           
          } else {                                                                                  
                                                                                                    
          }                                                                                         
        }                                                                                           
        yield;                                                                                      
        synchronized (this) {                                                                       
          int this_x;                                                                               
          this_x := this.x;                                                                         
          assert this_x >= 10;                                                                      
        }                                                                                           
        // return;                                                                                  
      }                                                                                             
                                                                                                    
    }                                                                                               
    class Cow2 {                                                                                    
       int x holds(this, tid)                                                                       
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue > this.x ? R : E                                                                
       : E                                                                                          
        yields_as newValue > this.x;                                                                
                                                                                                    
                                                                                                    
    }                                                                                               
    class Cow3 {                                                                                    
       int x holds(this, tid)                                                                       
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue > this.x ? R : E                                                                
       : E                                                                                          
        yields_as newValue == this.x + 1;                                                           
                                                                                                    
                                                                                                    
    }                                                                                               
    class Cow4 {                                                                                    
       int x holds(this, tid)                                                                       
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == this.x + 1 ? R : E                                                           
       : E                                                                                          
        yields_as newValue == this.x + 1;                                                           
                                                                                                    
                                                                                                    
    }                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
 Explicit:                                                                                          
                                                                                                    
                                                                                                    
                                                                                                    
    class Cow {                                                                                     
       int x holds(this, tid)                                                                       
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue > this.x ? R : E                                                                
       : E                                                                                          
        yields_as newValue >= this.x;                                                               
                                                                                                    
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      public void f() {                                                                             
        {                                                                                           
          acquire(this);                                                                            
          {                                                                                         
            int v;                                                                                  
            v := this.x;                                                                            
            if (v < 10) {                                                                           
              this.x := 10;                                                                         
            } else {                                                                                
                                                                                                    
            }                                                                                       
          }                                                                                         
          release(this);                                                                            
        }                                                                                           
        yield;                                                                                      
        {                                                                                           
          acquire(this);                                                                            
          {                                                                                         
            int this_x;                                                                             
            this_x := this.x;                                                                       
            assert this_x >= 10;                                                                    
          }                                                                                         
          release(this);                                                                            
        }                                                                                           
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
    }                                                                                               
    class Cow2 {                                                                                    
       int x holds(this, tid)                                                                       
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue > this.x ? R : E                                                                
       : E                                                                                          
        yields_as newValue > this.x;                                                                
                                                                                                    
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
    }                                                                                               
    class Cow3 {                                                                                    
       int x holds(this, tid)                                                                       
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue > this.x ? R : E                                                                
       : E                                                                                          
        yields_as newValue == this.x + 1;                                                           
                                                                                                    
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
    }                                                                                               
    class Cow4 {                                                                                    
       int x holds(this, tid)                                                                       
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == this.x + 1 ? R : E                                                           
       : E                                                                                          
        yields_as newValue == this.x + 1;                                                           
                                                                                                    
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
    }                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
 Inlined:                                                                                           
                                                                                                    
                                                                                                    
                                                                                                    
    class Cow {                                                                                     
       int x holds(this, tid)                                                                       
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue > this.x ? R : E                                                                
       : E                                                                                          
        yields_as newValue >= this.x;                                                               
                                                                                                    
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      public void f() {                                                                             
        {                                                                                           
          acquire(this);                                                                            
          {                                                                                         
            int v;                                                                                  
            v := this.x;                                                                            
            if (v < 10) {                                                                           
              this.x := 10;                                                                         
            } else {                                                                                
                                                                                                    
            }                                                                                       
          }                                                                                         
          release(this);                                                                            
        }                                                                                           
        yield;                                                                                      
        {                                                                                           
          acquire(this);                                                                            
          {                                                                                         
            int this_x;                                                                             
            this_x := this.x;                                                                       
            assert this_x >= 10;                                                                    
          }                                                                                         
          release(this);                                                                            
        }                                                                                           
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
    }                                                                                               
    class Cow2 {                                                                                    
       int x holds(this, tid)                                                                       
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue > this.x ? R : E                                                                
       : E                                                                                          
        yields_as newValue > this.x;                                                                
                                                                                                    
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
    }                                                                                               
    class Cow3 {                                                                                    
       int x holds(this, tid)                                                                       
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue > this.x ? R : E                                                                
       : E                                                                                          
        yields_as newValue == this.x + 1;                                                           
                                                                                                    
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
    }                                                                                               
    class Cow4 {                                                                                    
       int x holds(this, tid)                                                                       
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == this.x + 1 ? R : E                                                           
       : E                                                                                          
        yields_as newValue == this.x + 1;                                                           
                                                                                                    
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
    }                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
 Prepared:                                                                                          
                                                                                                    
                                                                                                    
                                                                                                    
    class Cow {                                                                                     
       int x holds(this, tid)                                                                       
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue > this.x ? R : E                                                                
       : E                                                                                          
        yields_as newValue >= this.x;                                                               
                                                                                                    
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      public void f() {                                                                             
        {                                                                                           
          acquire(this);                                                                            
          {                                                                                         
            int v;                                                                                  
            v := this.x;                                                                            
            if (v < 10) {                                                                           
              this.x := 10;                                                                         
            } else {                                                                                
                                                                                                    
            }                                                                                       
          }                                                                                         
          release(this);                                                                            
        }                                                                                           
        yield;                                                                                      
        {                                                                                           
          acquire(this);                                                                            
          {                                                                                         
            int this_x;                                                                             
            this_x := this.x;                                                                       
            assert this_x >= 10;                                                                    
          }                                                                                         
          release(this);                                                                            
        }                                                                                           
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
    }                                                                                               
    class Cow2 {                                                                                    
       int x holds(this, tid)                                                                       
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue > this.x ? R : E                                                                
       : E                                                                                          
        yields_as newValue > this.x;                                                                
                                                                                                    
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
    }                                                                                               
    class Cow3 {                                                                                    
       int x holds(this, tid)                                                                       
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue > this.x ? R : E                                                                
       : E                                                                                          
        yields_as newValue == this.x + 1;                                                           
                                                                                                    
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
    }                                                                                               
    class Cow4 {                                                                                    
       int x holds(this, tid)                                                                       
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == this.x + 1 ? R : E                                                           
       : E                                                                                          
        yields_as newValue == this.x + 1;                                                           
                                                                                                    
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
    }                                                                                               
                                                                                                    
                                                                                                    
 */                                                                                                 
                                                                                                    
//// Background                                                                                     
                                                                                                    
                                                                                                    
 /*                                                                                                 
 * Tid                                                                                              
 */                                                                                                 
 type Tid = int;  // make int so you can iterate over Tids                                          
 const unique Tid.null: Tid;                                                                        
 axiom Tid.null == -1;                                                                              
                                                                                                    
 function {:inline} ValidTid(tid : Tid): bool {                                                     
  tid != Tid.null && tid >= 0                                                                       
 }                                                                                                  
                                                                                                    
 type{:datatype} State;                                                                             
 function{:constructor} NULL(): State;                                                              
 function{:constructor} FRESH(): State;                                                             
 function{:constructor} LOCAL(t: Tid): State;                                                       
 function{:constructor} SHARED(): State;                                                            
                                                                                                    
 function {:inline} isNull(state: State) : bool {                                                   
  state == NULL()                                                                                   
 }                                                                                                  
                                                                                                    
 function {:inline} isFresh(state: State) : bool {                                                  
  state == FRESH()                                                                                  
 }                                                                                                  
                                                                                                    
 function {:inline} isShared(state: State) : bool {                                                 
  state == SHARED()                                                                                 
 }                                                                                                  
                                                                                                    
 function {:inline} isLocal(state: State, t: Tid) : bool {                                          
  state == LOCAL(t)                                                                                 
 }                                                                                                  
                                                                                                    
 function {:inline} isLocalAssignable(state: State, t: Tid) : bool {                                
  state == LOCAL(t) || state == SHARED() || state == NULL()                                         
 }                                                                                                  
                                                                                                    
 function {:inline} isSharedAssignable(state: State) : bool {                                       
  state == SHARED() || state == NULL()                                                              
 }                                                                                                  
                                                                                                    
 function {:inline} isAccessible(state: State, t: Tid) : bool {                                     
  state == LOCAL(t) || state == SHARED()                                                            
 }                                                                                                  
                                                                                                    
 function {:inline} isAllocated(state: State) : bool {                                              
  !isFresh(state) && !isNull(state)                                                                 
 }                                                                                                  
                                                                                                    
                                                                                                    
 function MOD(x:int, y:int): int;                                                                   
                                                                                                    
                                                                                                    
 /*                                                                                                 
 * For triggers                                                                                     
 */                                                                                                 
 function {:inline false} _trigger(i: int): bool {  true  }                                         
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 type Phase;                                                                                        
 const unique PreCommit : Phase;                                                                    
 const unique PostCommit : Phase;                                                                   
 const unique PhaseError : Phase;                                                                   
                                                                                                    
 function {:inline} transition(p: Phase, m: Mover): Phase {                                         
  if (m == _B) then                                                                                 
   p                                                                                                
  else if (m == _R) then                                                                            
   if (p == PreCommit) then                                                                         
    PreCommit                                                                                       
   else                                                                                             
    PhaseError                                                                                      
  else if (m == _L) then                                                                            
   if (p == PostCommit) then                                                                        
    PostCommit                                                                                      
   else if (p == PreCommit) then                                                                    
    PostCommit                                                                                      
   else                                                                                             
    PhaseError                                                                                      
  else if (m == _N) then                                                                            
   if (p == PreCommit) then                                                                         
    PostCommit                                                                                      
   else                                                                                             
    PhaseError                                                                                      
  else                                                                                              
   PhaseError // m == E or m == I                                                                   
 }                                                                                                  
                                                                                                    
                                                                                                    
 type Mover;                                                                                        
 const unique _B : Mover;                                                                           
 const unique _R : Mover;                                                                           
 const unique _L : Mover;                                                                           
 const unique _N : Mover;                                                                           
 const unique _E : Mover;                                                                           
                                                                                                    
 axiom (forall m : Mover :: m == _B || m == _R || m == _L || m == _N || m == _E);                   
                                                                                                    
 function {:inline} leq(m1: Mover, m2: Mover) : bool {                                              
  if (m1 == _B) then                                                                                
   true                                                                                             
  else if (m1 == _R) then                                                                           
   m2 == _R || m2 == _N || m2 == _E                                                                 
  else if (m1 == _L) then                                                                           
   m2 == _L || m2 == _N || m2 == _E                                                                 
  else if (m1 == _N) then                                                                           
   m2 == _N || m2 == _E                                                                             
  else if (m1 == _E) then                                                                           
   m2 == _E                                                                                         
  else                                                                                              
   false // should never happen...                                                                  
 }                                                                                                  
                                                                                                    
 function {:inline} lt(m1: Mover, m2: Mover) : bool { m1 != m2 && leq(m1, m2) }                     
                                                                                                    
 function {:inline} isError(m : Mover) : bool {                                                     
  m == _E                                                                                           
 }                                                                                                  
                                                                                                    
 function {:inline} eqOrError(m : Mover, n : Mover) : bool {                                        
  m == n || m == _E                                                                                 
 }                                                                                                  
                                                                                                    
 type{:datatype} MoverPath;                                                                         
 function{:constructor} moverPath(m:Mover, p:int):MoverPath;                                        
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
//// axioms                                                                                         
                                                                                                    
                                                                                                    
//// classes                                                                                        
                                                                                                    
                                                                                                    
/*** Class Decl Cow ***/                                                                            
                                                                                                    
type Cow;                                                                                           
const unique Cow.null: Cow;                                                                         
var Cow._state: [Cow]State;                                                                         
                                                                                                    
                                                                                                    
/////                                                                                               
                                                                                                    
var Cow.x: [Cow]int;                                                                                
                                                                                                    
function {:inline} ReadEval.Cow.x(tid: Tid,this : Cow,Cow._state: [Cow]State,Cow.x: [Cow]int,Cow._lock: [Cow]Tid,Cow2._state: [Cow2]State,Cow2.x: [Cow2]int,Cow2._lock: [Cow2]Tid,Cow3._state: [Cow3]State,Cow3.x: [Cow3]int,Cow3._lock: [Cow3]Tid,Cow4._state: [Cow4]State,Cow4.x: [Cow4]int,Cow4._lock: [Cow4]Tid) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := 0;                                                                                
 if ((isAccessible(Cow._state[this], tid) && Cow._lock[this] == tid)) then                          
  if (isRead) then                                                                                  
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   if ((newValue>Cow.x[this])) then                                                                 
    moverPath(_R, 5)                                                                                
   else                                                                                             
    moverPath(_E, 1)                                                                                
 else                                                                                               
  moverPath(_E, 0)                                                                                  
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.Cow.x(tid: Tid,this : Cow,newValue: int,Cow._state: [Cow]State,Cow.x: [Cow]int,Cow._lock: [Cow]Tid,Cow2._state: [Cow2]State,Cow2.x: [Cow2]int,Cow2._lock: [Cow2]Tid,Cow3._state: [Cow3]State,Cow3.x: [Cow3]int,Cow3._lock: [Cow3]Tid,Cow4._state: [Cow4]State,Cow4.x: [Cow4]int,Cow4._lock: [Cow4]Tid) returns (MoverPath) {
 (var isRead := false;                                                                              
 if ((isAccessible(Cow._state[this], tid) && Cow._lock[this] == tid)) then                          
  if (isRead) then                                                                                  
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   if ((newValue>Cow.x[this])) then                                                                 
    moverPath(_R, 5)                                                                                
   else                                                                                             
    moverPath(_E, 1)                                                                                
 else                                                                                               
  moverPath(_E, 0)                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
var Cow._lock: [Cow]Tid;                                                                            
                                                                                                    
function {:inline} ReadEval.Cow._lock(tid: Tid,this : Cow,Cow._state: [Cow]State,Cow.x: [Cow]int,Cow._lock: [Cow]Tid,Cow2._state: [Cow2]State,Cow2.x: [Cow2]int,Cow2._lock: [Cow2]Tid,Cow3._state: [Cow3]State,Cow3.x: [Cow3]int,Cow3._lock: [Cow3]Tid,Cow4._state: [Cow4]State,Cow4.x: [Cow4]int,Cow4._lock: [Cow4]Tid) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := Tid.null;                                                                         
 if (isLocal(Cow._state[this], tid)) then                                                           
  if (isRead) then                                                                                  
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   if (((newValue==tid)||(newValue==Tid.null))) then                                                
    moverPath(_B, 5)                                                                                
   else                                                                                             
    moverPath(_E, 1)                                                                                
 else                                                                                               
  if (isRead) then                                                                                  
   if ((Cow._lock[this]==tid)) then                                                                 
    moverPath(_R, 6)                                                                                
   else                                                                                             
    moverPath(_E, 2)                                                                                
  else                                                                                              
   if (((Cow._lock[this]==Tid.null)&&(newValue==tid))) then                                         
    moverPath(_R, 4)                                                                                
   else                                                                                             
    if (((Cow._lock[this]==tid)&&(newValue==Tid.null))) then                                        
     moverPath(_L, 8)                                                                               
    else                                                                                            
     moverPath(_E, 0)                                                                               
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.Cow._lock(tid: Tid,this : Cow,newValue: Tid,Cow._state: [Cow]State,Cow.x: [Cow]int,Cow._lock: [Cow]Tid,Cow2._state: [Cow2]State,Cow2.x: [Cow2]int,Cow2._lock: [Cow2]Tid,Cow3._state: [Cow3]State,Cow3.x: [Cow3]int,Cow3._lock: [Cow3]Tid,Cow4._state: [Cow4]State,Cow4.x: [Cow4]int,Cow4._lock: [Cow4]Tid) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(Cow._state[this], tid)) then                                                           
  if (isRead) then                                                                                  
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   if (((newValue==tid)||(newValue==Tid.null))) then                                                
    moverPath(_B, 5)                                                                                
   else                                                                                             
    moverPath(_E, 1)                                                                                
 else                                                                                               
  if (isRead) then                                                                                  
   if ((Cow._lock[this]==tid)) then                                                                 
    moverPath(_R, 6)                                                                                
   else                                                                                             
    moverPath(_E, 2)                                                                                
  else                                                                                              
   if (((Cow._lock[this]==Tid.null)&&(newValue==tid))) then                                         
    moverPath(_R, 4)                                                                                
   else                                                                                             
    if (((Cow._lock[this]==tid)&&(newValue==Tid.null))) then                                        
     moverPath(_L, 8)                                                                               
    else                                                                                            
     moverPath(_E, 0)                                                                               
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
                                                                                                    
procedure  Cow.f(tid:Tid, this : Cow)                                                               
modifies Cow._state;                                                                                
modifies Cow.x;                                                                                     
modifies Cow._lock;                                                                                 
modifies Cow2._state;                                                                               
modifies Cow2.x;                                                                                    
modifies Cow2._lock;                                                                                
modifies Cow3._state;                                                                               
modifies Cow3.x;                                                                                    
modifies Cow3._lock;                                                                                
modifies Cow4._state;                                                                               
modifies Cow4.x;                                                                                    
modifies Cow4._lock;                                                                                
                                                                                                    
requires ValidTid(tid);                                                                                    // (9.2): Bad tid
requires isShared(Cow._state[this]);                                                                       // (9.2): this is not global
                                                                                                    
requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
                                                                                                    
ensures StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
{                                                                                                   
 var Cow._lock2755103: [Cow]Tid;                                                                    
 var tid2755103_post: Tid;                                                                          
 var Cow2._state2755122: [Cow2]State;                                                               
 var tid2755117: Tid;                                                                               
 var mover2755091: Mover;                                                                           
 var Cow2.x2755117: [Cow2]int;                                                                      
 var Cow.x2755103_post: [Cow]int;                                                                   
 var $pc2755091: Phase;                                                                             
 var Cow._lock2755111: [Cow]Tid;                                                                    
 var Cow4.x2755103: [Cow4]int;                                                                      
 var Cow2._state2755103: [Cow2]State;                                                               
 var Cow2._lock2755095: [Cow2]Tid;                                                                  
 var Cow4.x2755122: [Cow4]int;                                                                      
 var Cow.x2755103: [Cow]int;                                                                        
 var Cow2._state2755111: [Cow2]State;                                                               
 var path2755095: int;                                                                              
 var this_x: int;                                                                                   
 var v2755095: int;                                                                                 
 var Cow3._state2755103_post: [Cow3]State;                                                          
 var Cow4._lock2755122: [Cow4]Tid;                                                                  
 var this_x2755117: int;                                                                            
 var v2755091: int;                                                                                 
 var this2755103_post: Cow;                                                                         
 var Cow2._lock2755103: [Cow2]Tid;                                                                  
 var Cow4._lock2755111: [Cow4]Tid;                                                                  
 var Cow2._lock2755111: [Cow2]Tid;                                                                  
 var Cow3._lock2755103: [Cow3]Tid;                                                                  
 var Cow3._lock2755111: [Cow3]Tid;                                                                  
 var Cow2._lock2755091: [Cow2]Tid;                                                                  
 var Cow2._state2755091: [Cow2]State;                                                               
 var this2755117: Cow;                                                                              
 var Cow2.x2755103: [Cow2]int;                                                                      
 var tid2755103: Tid;                                                                               
 var this_x2755111: int;                                                                            
 var Cow3._state2755117: [Cow3]State;                                                               
 var Cow2.x2755095: [Cow2]int;                                                                      
 var Cow4._lock2755091: [Cow4]Tid;                                                                  
 var Cow2._state2755103_post: [Cow2]State;                                                          
 var tid2755095: Tid;                                                                               
 var Cow4._state2755091: [Cow4]State;                                                               
 var Cow._lock2755095: [Cow]Tid;                                                                    
 var $recorded.state2755122: int;                                                                   
 var Cow3.x2755111: [Cow3]int;                                                                      
 var Cow2.x2755103_post: [Cow2]int;                                                                 
 var path2755091: int;                                                                              
 var Cow4._state2755103: [Cow4]State;                                                               
 var $pc2755111: Phase;                                                                             
 var Cow3.x2755103: [Cow3]int;                                                                      
 var Cow._state2755117: [Cow]State;                                                                 
 var Cow3.x2755122: [Cow3]int;                                                                      
 var $pc2755117: Phase;                                                                             
 var mover2755111: Mover;                                                                           
 var Cow3._state2755122: [Cow3]State;                                                               
 var Cow._lock2755117: [Cow]Tid;                                                                    
 var Cow2._lock2755103_post: [Cow2]Tid;                                                             
 var Cow4.x2755111: [Cow4]int;                                                                      
 var Cow._lock2755103_post: [Cow]Tid;                                                               
 var Cow._state2755095: [Cow]State;                                                                 
 var Cow3.x2755103_post: [Cow3]int;                                                                 
 var Cow3.x2755095: [Cow3]int;                                                                      
 var Cow4.x2755103_post: [Cow4]int;                                                                 
 var moverPath2755111: MoverPath;                                                                   
 var this2755091: Cow;                                                                              
 var path2755111: int;                                                                              
 var Cow4._state2755103_post: [Cow4]State;                                                          
 var tid2755111: Tid;                                                                               
 var Cow2.x2755091: [Cow2]int;                                                                      
 var tid2755122: Tid;                                                                               
 var $pc2755103_post: Phase;                                                                        
 var Cow4._lock2755117: [Cow4]Tid;                                                                  
 var $pc2755122: Phase;                                                                             
 var Cow._state2755122: [Cow]State;                                                                 
 var Cow3._state2755103: [Cow3]State;                                                               
 var $pc2755095: Phase;                                                                             
 var Cow4.x2755117: [Cow4]int;                                                                      
 var Cow._state2755103_post: [Cow]State;                                                            
 var this2755122: Cow;                                                                              
 var Cow3.x2755091: [Cow3]int;                                                                      
 var Cow4._state2755095: [Cow4]State;                                                               
 var Cow2.x2755111: [Cow2]int;                                                                      
 var Cow.x2755095: [Cow]int;                                                                        
 var $recorded.state2755117: int;                                                                   
 var $recorded.state2755091: int;                                                                   
 var Cow4._lock2755103: [Cow4]Tid;                                                                  
 var tid2755091: Tid;                                                                               
 var v: int;                                                                                        
 var Cow2._state2755117: [Cow2]State;                                                               
 var Cow4._lock2755095: [Cow4]Tid;                                                                  
 var $pc2755103: Phase;                                                                             
 var $recorded.state2755095: int;                                                                   
 var Cow4._state2755122: [Cow4]State;                                                               
 var Cow2._lock2755122: [Cow2]Tid;                                                                  
 var Cow._state2755103: [Cow]State;                                                                 
 var this2755095: Cow;                                                                              
 var Cow4._state2755111: [Cow4]State;                                                               
 var this2755103: Cow;                                                                              
 var Cow2.x2755122: [Cow2]int;                                                                      
 var Cow2._lock2755117: [Cow2]Tid;                                                                  
 var Cow3._lock2755091: [Cow3]Tid;                                                                  
 var moverPath2755095: MoverPath;                                                                   
 var Cow4._lock2755103_post: [Cow4]Tid;                                                             
 var Cow.x2755122: [Cow]int;                                                                        
 var mover2755095: Mover;                                                                           
 var this2755111: Cow;                                                                              
 var Cow3._state2755095: [Cow3]State;                                                               
 var Cow4.x2755091: [Cow4]int;                                                                      
 var Cow4.x2755095: [Cow4]int;                                                                      
 var Cow.x2755111: [Cow]int;                                                                        
 var Cow3._lock2755103_post: [Cow3]Tid;                                                             
 var moverPath2755091: MoverPath;                                                                   
 var Cow._state2755111: [Cow]State;                                                                 
 var Cow._lock2755091: [Cow]Tid;                                                                    
 var Cow._state2755091: [Cow]State;                                                                 
 var Cow3._lock2755095: [Cow3]Tid;                                                                  
 var Cow3.x2755117: [Cow3]int;                                                                      
 var Cow3._lock2755122: [Cow3]Tid;                                                                  
 var Cow4._state2755117: [Cow4]State;                                                               
 var Cow3._state2755111: [Cow3]State;                                                               
 var Cow.x2755091: [Cow]int;                                                                        
 var $recorded.state2755103: int;                                                                   
 var Cow._lock2755122: [Cow]Tid;                                                                    
 var Cow2._state2755095: [Cow2]State;                                                               
 var $recorded.state2755103_post: int;                                                              
 var Cow3._state2755091: [Cow3]State;                                                               
 var Cow3._lock2755117: [Cow3]Tid;                                                                  
 var Cow.x2755117: [Cow]int;                                                                        
 var $recorded.state2755111: int;                                                                   
                                                                                                    
 var $pc : Phase;                                                                                   
 $pc := PreCommit;                                                                                  
                                                                                                    
                                                                                                    
 if ($pc == PreCommit) {                                                                            
  assume this != Cow.null;                                                                          
 } else {                                                                                           
  assert this != Cow.null;                                                                                 // (10.22): Cannot have potential null deference in left-mover part.
 }                                                                                                  
 assume Cow._lock[this] == Tid.null;                                                                
 $pc := transition($pc, _R);                                                                        
 assert $pc != PhaseError;                                                                                 // (10.22): Reduction failure
 Cow._lock[this] := tid;                                                                            
                                                                                                    
 // 11.11: int v;                                                                                   
                                                                                                    
                                                                                                    
 // 11.11: v := this.x;                                                                             
                                                                                                    
                                                                                                    
 moverPath2755091 := ReadEval.Cow.x(tid: Tid,this: Cow,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 mover2755091 := m#moverPath(moverPath2755091);                                                     
 path2755091 := p#moverPath(moverPath2755091);                                                      
 assume Cow._state2755091 == Cow._state && Cow.x2755091 == Cow.x && Cow._lock2755091 == Cow._lock && Cow2._state2755091 == Cow2._state && Cow2.x2755091 == Cow2.x && Cow2._lock2755091 == Cow2._lock && Cow3._state2755091 == Cow3._state && Cow3.x2755091 == Cow3.x && Cow3._lock2755091 == Cow3._lock && Cow4._state2755091 == Cow4._state && Cow4.x2755091 == Cow4.x && Cow4._lock2755091 == Cow4._lock && v2755091 == v && this2755091 == this && tid2755091 == tid && $pc2755091 == $pc;
 assume $recorded.state2755091 == 1;                                                                
 if ($pc == PreCommit) {                                                                            
  assume this != Cow.null;                                                                          
 } else {                                                                                           
  assert this != Cow.null;                                                                                 // (11.11): Cannot have potential null deference in left-mover part.
 }                                                                                                  
                                                                                                    
 $pc := transition($pc, mover2755091);                                                              
 assert $pc != PhaseError;                                                                                 // (11.11): Reduction failure
 v := Cow.x[this];                                                                                  
 if ((v<10)) {                                                                                      
                                                                                                    
                                                                                                    
  // 13.13: this.x := 10;                                                                           
                                                                                                    
                                                                                                    
  moverPath2755095 := WriteEval.Cow.x(tid: Tid,this: Cow,10: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
  mover2755095 := m#moverPath(moverPath2755095);                                                    
  path2755095 := p#moverPath(moverPath2755095);                                                     
  assume Cow._state2755095 == Cow._state && Cow.x2755095 == Cow.x && Cow._lock2755095 == Cow._lock && Cow2._state2755095 == Cow2._state && Cow2.x2755095 == Cow2.x && Cow2._lock2755095 == Cow2._lock && Cow3._state2755095 == Cow3._state && Cow3.x2755095 == Cow3.x && Cow3._lock2755095 == Cow3._lock && Cow4._state2755095 == Cow4._state && Cow4.x2755095 == Cow4.x && Cow4._lock2755095 == Cow4._lock && v2755095 == v && this2755095 == this && tid2755095 == tid && $pc2755095 == $pc;
  assume $recorded.state2755095 == 1;                                                               
  if ($pc == PreCommit) {                                                                           
   assume this != Cow.null;                                                                         
  } else {                                                                                          
   assert this != Cow.null;                                                                                // (13.13): Cannot have potential null deference in left-mover part.
  }                                                                                                 
  $pc := transition($pc, mover2755095);                                                             
  assert $pc != PhaseError;                                                                                // (13.13): Reduction failure
  Cow.x[this] := 10;                                                                                
 } else {                                                                                           
 }                                                                                                  
 if ($pc == PreCommit) {                                                                            
  assume this != Cow.null;                                                                          
 } else {                                                                                           
  assert this != Cow.null;                                                                                 // (15.9): Cannot have potential null deference in left-mover part.
 }                                                                                                  
 assert Cow._lock[this] == tid;                                                                            // (15.9): lock not held
 $pc := transition($pc, _L);                                                                        
 assert $pc != PhaseError;                                                                                 // (15.9): Reduction failure
 Cow._lock[this] := Tid.null;                                                                       
                                                                                                    
 // 16.9: yield;                                                                                    
                                                                                                    
 assume Cow._state2755103 == Cow._state && Cow.x2755103 == Cow.x && Cow._lock2755103 == Cow._lock && Cow2._state2755103 == Cow2._state && Cow2.x2755103 == Cow2.x && Cow2._lock2755103 == Cow2._lock && Cow3._state2755103 == Cow3._state && Cow3.x2755103 == Cow3.x && Cow3._lock2755103 == Cow3._lock && Cow4._state2755103 == Cow4._state && Cow4.x2755103 == Cow4.x && Cow4._lock2755103 == Cow4._lock && this2755103 == this && tid2755103 == tid;
 assume $recorded.state2755103 == 1;                                                                
 call Yield(tid);                                                                                   
 $pc := PreCommit;                                                                                  
 assume Cow._state2755103_post == Cow._state && Cow.x2755103_post == Cow.x && Cow._lock2755103_post == Cow._lock && Cow2._state2755103_post == Cow2._state && Cow2.x2755103_post == Cow2.x && Cow2._lock2755103_post == Cow2._lock && Cow3._state2755103_post == Cow3._state && Cow3.x2755103_post == Cow3.x && Cow3._lock2755103_post == Cow3._lock && Cow4._state2755103_post == Cow4._state && Cow4.x2755103_post == Cow4.x && Cow4._lock2755103_post == Cow4._lock && this2755103_post == this && tid2755103_post == tid;
 assume $recorded.state2755103_post == 1;                                                           
 if ($pc == PreCommit) {                                                                            
  assume this != Cow.null;                                                                          
 } else {                                                                                           
  assert this != Cow.null;                                                                                 // (17.22): Cannot have potential null deference in left-mover part.
 }                                                                                                  
 assume Cow._lock[this] == Tid.null;                                                                
 $pc := transition($pc, _R);                                                                        
 assert $pc != PhaseError;                                                                                 // (17.22): Reduction failure
 Cow._lock[this] := tid;                                                                            
                                                                                                    
 // 17.30: int this_x;                                                                              
                                                                                                    
                                                                                                    
 // 17.30: this_x := this.x;                                                                        
                                                                                                    
                                                                                                    
 moverPath2755111 := ReadEval.Cow.x(tid: Tid,this: Cow,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 mover2755111 := m#moverPath(moverPath2755111);                                                     
 path2755111 := p#moverPath(moverPath2755111);                                                      
 assume Cow._state2755111 == Cow._state && Cow.x2755111 == Cow.x && Cow._lock2755111 == Cow._lock && Cow2._state2755111 == Cow2._state && Cow2.x2755111 == Cow2.x && Cow2._lock2755111 == Cow2._lock && Cow3._state2755111 == Cow3._state && Cow3.x2755111 == Cow3.x && Cow3._lock2755111 == Cow3._lock && Cow4._state2755111 == Cow4._state && Cow4.x2755111 == Cow4.x && Cow4._lock2755111 == Cow4._lock && this_x2755111 == this_x && this2755111 == this && tid2755111 == tid && $pc2755111 == $pc;
 assume $recorded.state2755111 == 1;                                                                
 if ($pc == PreCommit) {                                                                            
  assume this != Cow.null;                                                                          
 } else {                                                                                           
  assert this != Cow.null;                                                                                 // (17.30): Cannot have potential null deference in left-mover part.
 }                                                                                                  
                                                                                                    
 $pc := transition($pc, mover2755111);                                                              
 assert $pc != PhaseError;                                                                                 // (17.30): Reduction failure
 this_x := Cow.x[this];                                                                             
                                                                                                    
 // 17.52: assert this_x >= 10;                                                                     
                                                                                                    
 assume Cow._state2755117 == Cow._state && Cow.x2755117 == Cow.x && Cow._lock2755117 == Cow._lock && Cow2._state2755117 == Cow2._state && Cow2.x2755117 == Cow2.x && Cow2._lock2755117 == Cow2._lock && Cow3._state2755117 == Cow3._state && Cow3.x2755117 == Cow3.x && Cow3._lock2755117 == Cow3._lock && Cow4._state2755117 == Cow4._state && Cow4.x2755117 == Cow4.x && Cow4._lock2755117 == Cow4._lock && this_x2755117 == this_x && this2755117 == this && tid2755117 == tid;
 assume $recorded.state2755117 == 1;                                                                
 assert (this_x>=10);                                                                                      // (17.52): This assertion may not hold.
 if ($pc == PreCommit) {                                                                            
  assume this != Cow.null;                                                                          
 } else {                                                                                           
  assert this != Cow.null;                                                                                 // (17.73): Cannot have potential null deference in left-mover part.
 }                                                                                                  
 assert Cow._lock[this] == tid;                                                                            // (17.73): lock not held
 $pc := transition($pc, _L);                                                                        
 assert $pc != PhaseError;                                                                                 // (17.73): Reduction failure
 Cow._lock[this] := Tid.null;                                                                       
                                                                                                    
 // 9.18: // return;                                                                                
                                                                                                    
 assume Cow._state2755122 == Cow._state && Cow.x2755122 == Cow.x && Cow._lock2755122 == Cow._lock && Cow2._state2755122 == Cow2._state && Cow2.x2755122 == Cow2.x && Cow2._lock2755122 == Cow2._lock && Cow3._state2755122 == Cow3._state && Cow3.x2755122 == Cow3.x && Cow3._lock2755122 == Cow3._lock && Cow4._state2755122 == Cow4._state && Cow4.x2755122 == Cow4.x && Cow4._lock2755122 == Cow4._lock && this2755122 == this && tid2755122 == tid;
 assume $recorded.state2755122 == 1;                                                                
 return;                                                                                            
}                                                                                                   
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
/*** Class Decl Cow2 ***/                                                                           
                                                                                                    
type Cow2;                                                                                          
const unique Cow2.null: Cow2;                                                                       
var Cow2._state: [Cow2]State;                                                                       
                                                                                                    
                                                                                                    
/////                                                                                               
                                                                                                    
var Cow2.x: [Cow2]int;                                                                              
                                                                                                    
function {:inline} ReadEval.Cow2.x(tid: Tid,this : Cow2,Cow._state: [Cow]State,Cow.x: [Cow]int,Cow._lock: [Cow]Tid,Cow2._state: [Cow2]State,Cow2.x: [Cow2]int,Cow2._lock: [Cow2]Tid,Cow3._state: [Cow3]State,Cow3.x: [Cow3]int,Cow3._lock: [Cow3]Tid,Cow4._state: [Cow4]State,Cow4.x: [Cow4]int,Cow4._lock: [Cow4]Tid) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := 0;                                                                                
 if ((isAccessible(Cow2._state[this], tid) && Cow2._lock[this] == tid)) then                        
  if (isRead) then                                                                                  
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   if ((newValue>Cow2.x[this])) then                                                                
    moverPath(_R, 5)                                                                                
   else                                                                                             
    moverPath(_E, 1)                                                                                
 else                                                                                               
  moverPath(_E, 0)                                                                                  
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.Cow2.x(tid: Tid,this : Cow2,newValue: int,Cow._state: [Cow]State,Cow.x: [Cow]int,Cow._lock: [Cow]Tid,Cow2._state: [Cow2]State,Cow2.x: [Cow2]int,Cow2._lock: [Cow2]Tid,Cow3._state: [Cow3]State,Cow3.x: [Cow3]int,Cow3._lock: [Cow3]Tid,Cow4._state: [Cow4]State,Cow4.x: [Cow4]int,Cow4._lock: [Cow4]Tid) returns (MoverPath) {
 (var isRead := false;                                                                              
 if ((isAccessible(Cow2._state[this], tid) && Cow2._lock[this] == tid)) then                        
  if (isRead) then                                                                                  
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   if ((newValue>Cow2.x[this])) then                                                                
    moverPath(_R, 5)                                                                                
   else                                                                                             
    moverPath(_E, 1)                                                                                
 else                                                                                               
  moverPath(_E, 0)                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
var Cow2._lock: [Cow2]Tid;                                                                          
                                                                                                    
function {:inline} ReadEval.Cow2._lock(tid: Tid,this : Cow2,Cow._state: [Cow]State,Cow.x: [Cow]int,Cow._lock: [Cow]Tid,Cow2._state: [Cow2]State,Cow2.x: [Cow2]int,Cow2._lock: [Cow2]Tid,Cow3._state: [Cow3]State,Cow3.x: [Cow3]int,Cow3._lock: [Cow3]Tid,Cow4._state: [Cow4]State,Cow4.x: [Cow4]int,Cow4._lock: [Cow4]Tid) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := Tid.null;                                                                         
 if (isLocal(Cow2._state[this], tid)) then                                                          
  if (isRead) then                                                                                  
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   if (((newValue==tid)||(newValue==Tid.null))) then                                                
    moverPath(_B, 5)                                                                                
   else                                                                                             
    moverPath(_E, 1)                                                                                
 else                                                                                               
  if (isRead) then                                                                                  
   if ((Cow2._lock[this]==tid)) then                                                                
    moverPath(_R, 6)                                                                                
   else                                                                                             
    moverPath(_E, 2)                                                                                
  else                                                                                              
   if (((Cow2._lock[this]==Tid.null)&&(newValue==tid))) then                                        
    moverPath(_R, 4)                                                                                
   else                                                                                             
    if (((Cow2._lock[this]==tid)&&(newValue==Tid.null))) then                                       
     moverPath(_L, 8)                                                                               
    else                                                                                            
     moverPath(_E, 0)                                                                               
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.Cow2._lock(tid: Tid,this : Cow2,newValue: Tid,Cow._state: [Cow]State,Cow.x: [Cow]int,Cow._lock: [Cow]Tid,Cow2._state: [Cow2]State,Cow2.x: [Cow2]int,Cow2._lock: [Cow2]Tid,Cow3._state: [Cow3]State,Cow3.x: [Cow3]int,Cow3._lock: [Cow3]Tid,Cow4._state: [Cow4]State,Cow4.x: [Cow4]int,Cow4._lock: [Cow4]Tid) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(Cow2._state[this], tid)) then                                                          
  if (isRead) then                                                                                  
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   if (((newValue==tid)||(newValue==Tid.null))) then                                                
    moverPath(_B, 5)                                                                                
   else                                                                                             
    moverPath(_E, 1)                                                                                
 else                                                                                               
  if (isRead) then                                                                                  
   if ((Cow2._lock[this]==tid)) then                                                                
    moverPath(_R, 6)                                                                                
   else                                                                                             
    moverPath(_E, 2)                                                                                
  else                                                                                              
   if (((Cow2._lock[this]==Tid.null)&&(newValue==tid))) then                                        
    moverPath(_R, 4)                                                                                
   else                                                                                             
    if (((Cow2._lock[this]==tid)&&(newValue==Tid.null))) then                                       
     moverPath(_L, 8)                                                                               
    else                                                                                            
     moverPath(_E, 0)                                                                               
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
/*** Class Decl Cow3 ***/                                                                           
                                                                                                    
type Cow3;                                                                                          
const unique Cow3.null: Cow3;                                                                       
var Cow3._state: [Cow3]State;                                                                       
                                                                                                    
                                                                                                    
/////                                                                                               
                                                                                                    
var Cow3.x: [Cow3]int;                                                                              
                                                                                                    
function {:inline} ReadEval.Cow3.x(tid: Tid,this : Cow3,Cow._state: [Cow]State,Cow.x: [Cow]int,Cow._lock: [Cow]Tid,Cow2._state: [Cow2]State,Cow2.x: [Cow2]int,Cow2._lock: [Cow2]Tid,Cow3._state: [Cow3]State,Cow3.x: [Cow3]int,Cow3._lock: [Cow3]Tid,Cow4._state: [Cow4]State,Cow4.x: [Cow4]int,Cow4._lock: [Cow4]Tid) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := 0;                                                                                
 if ((isAccessible(Cow3._state[this], tid) && Cow3._lock[this] == tid)) then                        
  if (isRead) then                                                                                  
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   if ((newValue>Cow3.x[this])) then                                                                
    moverPath(_R, 5)                                                                                
   else                                                                                             
    moverPath(_E, 1)                                                                                
 else                                                                                               
  moverPath(_E, 0)                                                                                  
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.Cow3.x(tid: Tid,this : Cow3,newValue: int,Cow._state: [Cow]State,Cow.x: [Cow]int,Cow._lock: [Cow]Tid,Cow2._state: [Cow2]State,Cow2.x: [Cow2]int,Cow2._lock: [Cow2]Tid,Cow3._state: [Cow3]State,Cow3.x: [Cow3]int,Cow3._lock: [Cow3]Tid,Cow4._state: [Cow4]State,Cow4.x: [Cow4]int,Cow4._lock: [Cow4]Tid) returns (MoverPath) {
 (var isRead := false;                                                                              
 if ((isAccessible(Cow3._state[this], tid) && Cow3._lock[this] == tid)) then                        
  if (isRead) then                                                                                  
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   if ((newValue>Cow3.x[this])) then                                                                
    moverPath(_R, 5)                                                                                
   else                                                                                             
    moverPath(_E, 1)                                                                                
 else                                                                                               
  moverPath(_E, 0)                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
var Cow3._lock: [Cow3]Tid;                                                                          
                                                                                                    
function {:inline} ReadEval.Cow3._lock(tid: Tid,this : Cow3,Cow._state: [Cow]State,Cow.x: [Cow]int,Cow._lock: [Cow]Tid,Cow2._state: [Cow2]State,Cow2.x: [Cow2]int,Cow2._lock: [Cow2]Tid,Cow3._state: [Cow3]State,Cow3.x: [Cow3]int,Cow3._lock: [Cow3]Tid,Cow4._state: [Cow4]State,Cow4.x: [Cow4]int,Cow4._lock: [Cow4]Tid) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := Tid.null;                                                                         
 if (isLocal(Cow3._state[this], tid)) then                                                          
  if (isRead) then                                                                                  
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   if (((newValue==tid)||(newValue==Tid.null))) then                                                
    moverPath(_B, 5)                                                                                
   else                                                                                             
    moverPath(_E, 1)                                                                                
 else                                                                                               
  if (isRead) then                                                                                  
   if ((Cow3._lock[this]==tid)) then                                                                
    moverPath(_R, 6)                                                                                
   else                                                                                             
    moverPath(_E, 2)                                                                                
  else                                                                                              
   if (((Cow3._lock[this]==Tid.null)&&(newValue==tid))) then                                        
    moverPath(_R, 4)                                                                                
   else                                                                                             
    if (((Cow3._lock[this]==tid)&&(newValue==Tid.null))) then                                       
     moverPath(_L, 8)                                                                               
    else                                                                                            
     moverPath(_E, 0)                                                                               
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.Cow3._lock(tid: Tid,this : Cow3,newValue: Tid,Cow._state: [Cow]State,Cow.x: [Cow]int,Cow._lock: [Cow]Tid,Cow2._state: [Cow2]State,Cow2.x: [Cow2]int,Cow2._lock: [Cow2]Tid,Cow3._state: [Cow3]State,Cow3.x: [Cow3]int,Cow3._lock: [Cow3]Tid,Cow4._state: [Cow4]State,Cow4.x: [Cow4]int,Cow4._lock: [Cow4]Tid) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(Cow3._state[this], tid)) then                                                          
  if (isRead) then                                                                                  
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   if (((newValue==tid)||(newValue==Tid.null))) then                                                
    moverPath(_B, 5)                                                                                
   else                                                                                             
    moverPath(_E, 1)                                                                                
 else                                                                                               
  if (isRead) then                                                                                  
   if ((Cow3._lock[this]==tid)) then                                                                
    moverPath(_R, 6)                                                                                
   else                                                                                             
    moverPath(_E, 2)                                                                                
  else                                                                                              
   if (((Cow3._lock[this]==Tid.null)&&(newValue==tid))) then                                        
    moverPath(_R, 4)                                                                                
   else                                                                                             
    if (((Cow3._lock[this]==tid)&&(newValue==Tid.null))) then                                       
     moverPath(_L, 8)                                                                               
    else                                                                                            
     moverPath(_E, 0)                                                                               
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
/*** Class Decl Cow4 ***/                                                                           
                                                                                                    
type Cow4;                                                                                          
const unique Cow4.null: Cow4;                                                                       
var Cow4._state: [Cow4]State;                                                                       
                                                                                                    
                                                                                                    
/////                                                                                               
                                                                                                    
var Cow4.x: [Cow4]int;                                                                              
                                                                                                    
function {:inline} ReadEval.Cow4.x(tid: Tid,this : Cow4,Cow._state: [Cow]State,Cow.x: [Cow]int,Cow._lock: [Cow]Tid,Cow2._state: [Cow2]State,Cow2.x: [Cow2]int,Cow2._lock: [Cow2]Tid,Cow3._state: [Cow3]State,Cow3.x: [Cow3]int,Cow3._lock: [Cow3]Tid,Cow4._state: [Cow4]State,Cow4.x: [Cow4]int,Cow4._lock: [Cow4]Tid) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := 0;                                                                                
 if ((isAccessible(Cow4._state[this], tid) && Cow4._lock[this] == tid)) then                        
  if (isRead) then                                                                                  
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   if ((newValue==(Cow4.x[this]+1))) then                                                           
    moverPath(_R, 5)                                                                                
   else                                                                                             
    moverPath(_E, 1)                                                                                
 else                                                                                               
  moverPath(_E, 0)                                                                                  
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.Cow4.x(tid: Tid,this : Cow4,newValue: int,Cow._state: [Cow]State,Cow.x: [Cow]int,Cow._lock: [Cow]Tid,Cow2._state: [Cow2]State,Cow2.x: [Cow2]int,Cow2._lock: [Cow2]Tid,Cow3._state: [Cow3]State,Cow3.x: [Cow3]int,Cow3._lock: [Cow3]Tid,Cow4._state: [Cow4]State,Cow4.x: [Cow4]int,Cow4._lock: [Cow4]Tid) returns (MoverPath) {
 (var isRead := false;                                                                              
 if ((isAccessible(Cow4._state[this], tid) && Cow4._lock[this] == tid)) then                        
  if (isRead) then                                                                                  
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   if ((newValue==(Cow4.x[this]+1))) then                                                           
    moverPath(_R, 5)                                                                                
   else                                                                                             
    moverPath(_E, 1)                                                                                
 else                                                                                               
  moverPath(_E, 0)                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
var Cow4._lock: [Cow4]Tid;                                                                          
                                                                                                    
function {:inline} ReadEval.Cow4._lock(tid: Tid,this : Cow4,Cow._state: [Cow]State,Cow.x: [Cow]int,Cow._lock: [Cow]Tid,Cow2._state: [Cow2]State,Cow2.x: [Cow2]int,Cow2._lock: [Cow2]Tid,Cow3._state: [Cow3]State,Cow3.x: [Cow3]int,Cow3._lock: [Cow3]Tid,Cow4._state: [Cow4]State,Cow4.x: [Cow4]int,Cow4._lock: [Cow4]Tid) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := Tid.null;                                                                         
 if (isLocal(Cow4._state[this], tid)) then                                                          
  if (isRead) then                                                                                  
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   if (((newValue==tid)||(newValue==Tid.null))) then                                                
    moverPath(_B, 5)                                                                                
   else                                                                                             
    moverPath(_E, 1)                                                                                
 else                                                                                               
  if (isRead) then                                                                                  
   if ((Cow4._lock[this]==tid)) then                                                                
    moverPath(_R, 6)                                                                                
   else                                                                                             
    moverPath(_E, 2)                                                                                
  else                                                                                              
   if (((Cow4._lock[this]==Tid.null)&&(newValue==tid))) then                                        
    moverPath(_R, 4)                                                                                
   else                                                                                             
    if (((Cow4._lock[this]==tid)&&(newValue==Tid.null))) then                                       
     moverPath(_L, 8)                                                                               
    else                                                                                            
     moverPath(_E, 0)                                                                               
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.Cow4._lock(tid: Tid,this : Cow4,newValue: Tid,Cow._state: [Cow]State,Cow.x: [Cow]int,Cow._lock: [Cow]Tid,Cow2._state: [Cow2]State,Cow2.x: [Cow2]int,Cow2._lock: [Cow2]Tid,Cow3._state: [Cow3]State,Cow3.x: [Cow3]int,Cow3._lock: [Cow3]Tid,Cow4._state: [Cow4]State,Cow4.x: [Cow4]int,Cow4._lock: [Cow4]Tid) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(Cow4._state[this], tid)) then                                                          
  if (isRead) then                                                                                  
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   if (((newValue==tid)||(newValue==Tid.null))) then                                                
    moverPath(_B, 5)                                                                                
   else                                                                                             
    moverPath(_E, 1)                                                                                
 else                                                                                               
  if (isRead) then                                                                                  
   if ((Cow4._lock[this]==tid)) then                                                                
    moverPath(_R, 6)                                                                                
   else                                                                                             
    moverPath(_E, 2)                                                                                
  else                                                                                              
   if (((Cow4._lock[this]==Tid.null)&&(newValue==tid))) then                                        
    moverPath(_R, 4)                                                                                
   else                                                                                             
    if (((Cow4._lock[this]==tid)&&(newValue==Tid.null))) then                                       
     moverPath(_L, 8)                                                                               
    else                                                                                            
     moverPath(_E, 0)                                                                               
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
//// Globals                                                                                        
                                                                                                    
                                                                                                    
//// State Invariant                                                                                
                                                                                                    
 function {:inline} StateInvariant(Cow._state: [Cow]State,Cow.x: [Cow]int,Cow._lock: [Cow]Tid,Cow2._state: [Cow2]State,Cow2.x: [Cow2]int,Cow2._lock: [Cow2]Tid,Cow3._state: [Cow3]State,Cow3.x: [Cow3]int,Cow3._lock: [Cow3]Tid,Cow4._state: [Cow4]State,Cow4.x: [Cow4]int,Cow4._lock: [Cow4]Tid) returns (bool) {
  true &&                                                                                           
  (forall _i: Cow  :: _i == Cow.null <==> isNull(Cow._state[_i])) &&                                
  (forall _i: Cow2  :: _i == Cow2.null <==> isNull(Cow2._state[_i])) &&                             
  (forall _i: Cow3  :: _i == Cow3.null <==> isNull(Cow3._state[_i])) &&                             
  (forall _i: Cow4  :: _i == Cow4.null <==> isNull(Cow4._state[_i])) &&                             
  _trigger(0) &&                                                                                    
  _trigger(1) &&                                                                                    
  _trigger(2) &&                                                                                    
  _trigger(3)                                                                                       
 }                                                                                                  
//// Spec Checks                                                                                    
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.Cow.x(t: Tid, u: Tid, v: int, w: int, x: Cow)                
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[x], u);                                                           
 modifies Cow.x;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Cow.x(t: Tid,x: Cow,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Cow.x[x] := v;                                                                                     
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Cow.x(u: Tid,x: Cow,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (3.2): Cow.x failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.Cow.x(t: Tid, u: Tid, v: int, w: int, x: Cow)                 
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[x], u);                                                           
 modifies Cow.x;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Cow.x(t: Tid,x: Cow,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Cow.x[x] := v;                                                                                     
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.Cow.x(u: Tid,x: Cow,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (3.2): Cow.x failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.Cow.x(t: Tid, u: Tid, v: int, w: int, x: Cow)                 
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[x], u);                                                           
 modifies Cow.x;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume w == Cow.x[x];                                                                              
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _writeByT := WriteEval.Cow.x(t: Tid,x: Cow,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 Cow.x[x] := havocValue;                                                                            
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;   // H[p.f = _]                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Cow.x(u: Tid,x: Cow,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (3.2): Cow.x failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.Cow.x(t: Tid, u: Tid, v: int, w: int, x: Cow)                  
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[x], u);                                                           
 modifies Cow.x;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : int;                                                                              
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume w == Cow.x[x];                                                                              
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByU := ReadEval.Cow.x(u: Tid,x: Cow,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H                                                             
 _writeByT := WriteEval.Cow.x(t: Tid,x: Cow,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (3.2): Cow.x failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.Cow.x(t: Tid, u: Tid, v: int, w: int, x: Cow)                      
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[x], u);                                                           
 modifies Cow.x;                                                                                    
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Cow.x(t: Tid,x: Cow,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;  // H                                                            
 _writeByU := WriteEval.Cow.x(u: Tid,x: Cow,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (3.2): Cow.x failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.Cow.x(t: Tid, u: Tid, v: int, w: int, x: Cow)                       
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[x], u);                                                           
 modifies Cow.x;                                                                                    
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
 assume w == Cow.x[x];                                                                              
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Cow.x(t: Tid,x: Cow,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 Cow.x[x] := havocValue;                                                                            
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H[p.f := _]                                                   
 _writeByU := WriteEval.Cow.x(u: Tid,x: Cow,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (3.2): Cow.x failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.Cow2.x(t: Tid, u: Tid, v: int, w: int, x: Cow2)              
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow2._state[x], t);                                                          
 requires isAccessible(Cow2._state[x], u);                                                          
 modifies Cow2.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var x_pre: Cow2;                                                                                   
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var x_post: Cow2;                                                                                  
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Cow2.x(t: Tid,x: Cow2,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Cow2.x[x] := v;                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Cow2.x(u: Tid,x: Cow2,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (22.2): Cow2.x failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.Cow2.x(t: Tid, u: Tid, v: int, w: int, x: Cow2)               
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow2._state[x], t);                                                          
 requires isAccessible(Cow2._state[x], u);                                                          
 modifies Cow2.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var x_pre: Cow2;                                                                                   
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var x_post: Cow2;                                                                                  
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Cow2.x(t: Tid,x: Cow2,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Cow2.x[x] := v;                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.Cow2.x(u: Tid,x: Cow2,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (22.2): Cow2.x failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.Cow2.x(t: Tid, u: Tid, v: int, w: int, x: Cow2)               
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow2._state[x], t);                                                          
 requires isAccessible(Cow2._state[x], u);                                                          
 modifies Cow2.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var x_pre: Cow2;                                                                                   
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var x_post: Cow2;                                                                                  
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume w == Cow2.x[x];                                                                             
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _writeByT := WriteEval.Cow2.x(t: Tid,x: Cow2,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 Cow2.x[x] := havocValue;                                                                           
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;   // H[p.f = _]                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Cow2.x(u: Tid,x: Cow2,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (22.2): Cow2.x failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.Cow2.x(t: Tid, u: Tid, v: int, w: int, x: Cow2)                
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow2._state[x], t);                                                          
 requires isAccessible(Cow2._state[x], u);                                                          
 modifies Cow2.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : int;                                                                              
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var x_pre: Cow2;                                                                                   
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var x_post: Cow2;                                                                                  
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume w == Cow2.x[x];                                                                             
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByU := ReadEval.Cow2.x(u: Tid,x: Cow2,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H                                                             
 _writeByT := WriteEval.Cow2.x(t: Tid,x: Cow2,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (22.2): Cow2.x failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.Cow2.x(t: Tid, u: Tid, v: int, w: int, x: Cow2)                    
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow2._state[x], t);                                                          
 requires isAccessible(Cow2._state[x], u);                                                          
 modifies Cow2.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var x_pre: Cow2;                                                                                   
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var x_post: Cow2;                                                                                  
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Cow2.x(t: Tid,x: Cow2,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;  // H                                                            
 _writeByU := WriteEval.Cow2.x(u: Tid,x: Cow2,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (22.2): Cow2.x failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.Cow2.x(t: Tid, u: Tid, v: int, w: int, x: Cow2)                     
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow2._state[x], t);                                                          
 requires isAccessible(Cow2._state[x], u);                                                          
 modifies Cow2.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var x_pre: Cow2;                                                                                   
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var x_post: Cow2;                                                                                  
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
 assume w == Cow2.x[x];                                                                             
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Cow2.x(t: Tid,x: Cow2,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 Cow2.x[x] := havocValue;                                                                           
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H[p.f := _]                                                   
 _writeByU := WriteEval.Cow2.x(u: Tid,x: Cow2,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (22.2): Cow2.x failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.Cow3.x(t: Tid, u: Tid, v: int, w: int, x: Cow3)              
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow3._state[x], t);                                                          
 requires isAccessible(Cow3._state[x], u);                                                          
 modifies Cow3.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow3;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var x_post: Cow3;                                                                                  
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Cow3.x(t: Tid,x: Cow3,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Cow3.x[x] := v;                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Cow3.x(u: Tid,x: Cow3,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (30.2): Cow3.x failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.Cow3.x(t: Tid, u: Tid, v: int, w: int, x: Cow3)               
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow3._state[x], t);                                                          
 requires isAccessible(Cow3._state[x], u);                                                          
 modifies Cow3.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow3;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var x_post: Cow3;                                                                                  
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Cow3.x(t: Tid,x: Cow3,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Cow3.x[x] := v;                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.Cow3.x(u: Tid,x: Cow3,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (30.2): Cow3.x failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.Cow3.x(t: Tid, u: Tid, v: int, w: int, x: Cow3)               
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow3._state[x], t);                                                          
 requires isAccessible(Cow3._state[x], u);                                                          
 modifies Cow3.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow3;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var x_post: Cow3;                                                                                  
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume w == Cow3.x[x];                                                                             
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _writeByT := WriteEval.Cow3.x(t: Tid,x: Cow3,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 Cow3.x[x] := havocValue;                                                                           
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;   // H[p.f = _]                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Cow3.x(u: Tid,x: Cow3,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (30.2): Cow3.x failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.Cow3.x(t: Tid, u: Tid, v: int, w: int, x: Cow3)                
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow3._state[x], t);                                                          
 requires isAccessible(Cow3._state[x], u);                                                          
 modifies Cow3.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : int;                                                                              
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow3;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var x_post: Cow3;                                                                                  
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume w == Cow3.x[x];                                                                             
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByU := ReadEval.Cow3.x(u: Tid,x: Cow3,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H                                                             
 _writeByT := WriteEval.Cow3.x(t: Tid,x: Cow3,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (30.2): Cow3.x failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.Cow3.x(t: Tid, u: Tid, v: int, w: int, x: Cow3)                    
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow3._state[x], t);                                                          
 requires isAccessible(Cow3._state[x], u);                                                          
 modifies Cow3.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow3;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var x_post: Cow3;                                                                                  
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Cow3.x(t: Tid,x: Cow3,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;  // H                                                            
 _writeByU := WriteEval.Cow3.x(u: Tid,x: Cow3,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (30.2): Cow3.x failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.Cow3.x(t: Tid, u: Tid, v: int, w: int, x: Cow3)                     
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow3._state[x], t);                                                          
 requires isAccessible(Cow3._state[x], u);                                                          
 modifies Cow3.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow3;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var x_post: Cow3;                                                                                  
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
 assume w == Cow3.x[x];                                                                             
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Cow3.x(t: Tid,x: Cow3,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 Cow3.x[x] := havocValue;                                                                           
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H[p.f := _]                                                   
 _writeByU := WriteEval.Cow3.x(u: Tid,x: Cow3,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (30.2): Cow3.x failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.Cow4.x(t: Tid, u: Tid, v: int, w: int, x: Cow4)              
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow4._state[x], t);                                                          
 requires isAccessible(Cow4._state[x], u);                                                          
 modifies Cow4.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow4;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var x_post: Cow4;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Cow4.x(t: Tid,x: Cow4,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Cow4.x[x] := v;                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Cow4.x(u: Tid,x: Cow4,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (38.2): Cow4.x failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.Cow4.x(t: Tid, u: Tid, v: int, w: int, x: Cow4)               
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow4._state[x], t);                                                          
 requires isAccessible(Cow4._state[x], u);                                                          
 modifies Cow4.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow4;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var x_post: Cow4;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Cow4.x(t: Tid,x: Cow4,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Cow4.x[x] := v;                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.Cow4.x(u: Tid,x: Cow4,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (38.2): Cow4.x failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.Cow4.x(t: Tid, u: Tid, v: int, w: int, x: Cow4)               
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow4._state[x], t);                                                          
 requires isAccessible(Cow4._state[x], u);                                                          
 modifies Cow4.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow4;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var x_post: Cow4;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume w == Cow4.x[x];                                                                             
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _writeByT := WriteEval.Cow4.x(t: Tid,x: Cow4,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 Cow4.x[x] := havocValue;                                                                           
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;   // H[p.f = _]                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Cow4.x(u: Tid,x: Cow4,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (38.2): Cow4.x failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.Cow4.x(t: Tid, u: Tid, v: int, w: int, x: Cow4)                
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow4._state[x], t);                                                          
 requires isAccessible(Cow4._state[x], u);                                                          
 modifies Cow4.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : int;                                                                              
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow4;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var x_post: Cow4;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume w == Cow4.x[x];                                                                             
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByU := ReadEval.Cow4.x(u: Tid,x: Cow4,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H                                                             
 _writeByT := WriteEval.Cow4.x(t: Tid,x: Cow4,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (38.2): Cow4.x failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.Cow4.x(t: Tid, u: Tid, v: int, w: int, x: Cow4)                    
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow4._state[x], t);                                                          
 requires isAccessible(Cow4._state[x], u);                                                          
 modifies Cow4.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow4;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var x_post: Cow4;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Cow4.x(t: Tid,x: Cow4,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;  // H                                                            
 _writeByU := WriteEval.Cow4.x(u: Tid,x: Cow4,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (38.2): Cow4.x failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.Cow4.x(t: Tid, u: Tid, v: int, w: int, x: Cow4)                     
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow4._state[x], t);                                                          
 requires isAccessible(Cow4._state[x], u);                                                          
 modifies Cow4.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow4;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var x_post: Cow4;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
 assume w == Cow4.x[x];                                                                             
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Cow4.x(t: Tid,x: Cow4,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 Cow4.x[x] := havocValue;                                                                           
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H[p.f := _]                                                   
 _writeByU := WriteEval.Cow4.x(u: Tid,x: Cow4,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (38.2): Cow4.x failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Cow.x.Cow.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow, y: Cow)      
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Cow.x;                                                                                    
 modifies Cow.x;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var y_post: Cow;                                                                                   
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow.x(u: Tid,y: Cow,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow.x(t: Tid,x: Cow,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow.x[x] := v;                                                                                     
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Cow.x(u: Tid,y: Cow,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (3.2): Cow.x is not Write-Write Stable with respect to Cow.x (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (3.2): Cow.x is not Write-Write Stable with respect to Cow.x (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (3.2): Cow.x is not Write-Write Stable with respect to Cow.x (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Cow.x.Cow.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow, y: Cow)      
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Cow.x;                                                                                    
 modifies Cow.x;                                                                                    
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Cow3._lock_mid: [Cow3]Tid;                                                                     
 var u_mid: Tid;                                                                                    
 var y_mid: Cow;                                                                                    
 var Cow4._state_mid: [Cow4]State;                                                                  
 var $recorded.state_mid: int;                                                                      
 var Cow.x_mid: [Cow]int;                                                                           
 var x_mid: Cow;                                                                                    
 var w_mid: int;                                                                                    
 var Cow4._lock_mid: [Cow4]Tid;                                                                     
 var Cow3.x_mid: [Cow3]int;                                                                         
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var Cow2.x_mid: [Cow2]int;                                                                         
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var Cow2._state_mid: [Cow2]State;                                                                  
 var Cow3._state_mid: [Cow3]State;                                                                  
 var Cow2._lock_mid: [Cow2]Tid;                                                                     
 var Cow4.x_mid: [Cow4]int;                                                                         
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var y_post: Cow;                                                                                   
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Cow.x(t: Tid,x: Cow,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Cow.x[x];                                                                                  
 Cow.x[x] := v;                                                                                     
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.x_mid == Cow.x && Cow._lock_mid == Cow._lock && Cow2._state_mid == Cow2._state && Cow2.x_mid == Cow2.x && Cow2._lock_mid == Cow2._lock && Cow3._state_mid == Cow3._state && Cow3.x_mid == Cow3.x && Cow3._lock_mid == Cow3._lock && Cow4._state_mid == Cow4._state && Cow4.x_mid == Cow4.x && Cow4._lock_mid == Cow4._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Cow.x(u: Tid,y: Cow,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Cow.x[x] := tmpV;                                                                                  
 Cow.x[y] := w;                                                                                     
 _writeByTPost := WriteEval.Cow.x(t: Tid,x: Cow,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.2): Cow.x is not Write-Write Stable with respect to Cow.x (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Cow.x.Cow.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow, y: Cow)     
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Cow.x;                                                                                    
 modifies Cow.x;                                                                                    
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Cow3._lock_mid: [Cow3]Tid;                                                                     
 var u_mid: Tid;                                                                                    
 var y_mid: Cow;                                                                                    
 var Cow4._state_mid: [Cow4]State;                                                                  
 var $recorded.state_mid: int;                                                                      
 var Cow.x_mid: [Cow]int;                                                                           
 var x_mid: Cow;                                                                                    
 var w_mid: int;                                                                                    
 var Cow4._lock_mid: [Cow4]Tid;                                                                     
 var Cow3.x_mid: [Cow3]int;                                                                         
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var Cow2.x_mid: [Cow2]int;                                                                         
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var Cow2._state_mid: [Cow2]State;                                                                  
 var Cow3._state_mid: [Cow3]State;                                                                  
 var Cow2._lock_mid: [Cow2]Tid;                                                                     
 var Cow4.x_mid: [Cow4]int;                                                                         
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var y_post: Cow;                                                                                   
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow.x(u: Tid,y: Cow,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow.x(t: Tid,x: Cow,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Cow.x[x];                                                                                  
 Cow.x[x] := v;                                                                                     
 assume Cow._state_mid == Cow._state && Cow.x_mid == Cow.x && Cow._lock_mid == Cow._lock && Cow2._state_mid == Cow2._state && Cow2.x_mid == Cow2.x && Cow2._lock_mid == Cow2._lock && Cow3._state_mid == Cow3._state && Cow3.x_mid == Cow3.x && Cow3._lock_mid == Cow3._lock && Cow4._state_mid == Cow4._state && Cow4.x_mid == Cow4.x && Cow4._lock_mid == Cow4._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Cow.x(u: Tid,y: Cow,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Cow.x[x] := tmpV;                                                                                  
 Cow.x[y] := w;                                                                                     
 _writeByTPost := WriteEval.Cow.x(t: Tid,x: Cow,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.2): Cow.x is not Write-Write Stable with respect to Cow.x (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.2): Cow.x is not Write-Write Stable with respect to Cow.x (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Cow.x.Cow.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow, y: Cow)    
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Cow.x;                                                                                    
 modifies Cow.x;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var y_post: Cow;                                                                                   
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Cow.x(t: Tid,x: Cow,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Cow.x(u: Tid,y: Cow,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow.x[y] := w;                                                                                     
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Cow.x(t: Tid,x: Cow,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.2): Cow.x is not Read-Write Stable with respect to Cow.x (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.2): Cow.x is not Read-Write Stable with respect to Cow.x (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.2): Cow.x is not Read-Write Stable with respect to Cow.x (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Cow.x.Cow.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow, y: Cow)    
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Cow.x;                                                                                    
 modifies Cow.x;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var y_post: Cow;                                                                                   
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Cow.x(u: Tid,y: Cow,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Cow.x(t: Tid,x: Cow,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow.x[x] := v;                                                                                     
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Cow.x(u: Tid,y: Cow,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (3.2): Cow.x is not Write-Read Stable with respect to Cow.x (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (3.2): Cow.x is not Write-Read Stable with respect to Cow.x (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (3.2): Cow.x is not Write-Read Stable with respect to Cow.x (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Cow.x.Cow2.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow, y: Cow2)    
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow2._state[y], u);                                                          
 modifies Cow.x;                                                                                    
 modifies Cow2.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var y_pre: Cow2;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var y_post: Cow2;                                                                                  
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow2.x(u: Tid,y: Cow2,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow.x(t: Tid,x: Cow,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow.x[x] := v;                                                                                     
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Cow2.x(u: Tid,y: Cow2,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (22.2): Cow2.x is not Write-Write Stable with respect to Cow.x (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (22.2): Cow2.x is not Write-Write Stable with respect to Cow.x (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (22.2): Cow2.x is not Write-Write Stable with respect to Cow.x (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Cow.x.Cow2.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow, y: Cow2)    
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow2._state[y], u);                                                          
 modifies Cow.x;                                                                                    
 modifies Cow2.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var y_pre: Cow2;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Cow3._lock_mid: [Cow3]Tid;                                                                     
 var u_mid: Tid;                                                                                    
 var Cow4._state_mid: [Cow4]State;                                                                  
 var $recorded.state_mid: int;                                                                      
 var Cow.x_mid: [Cow]int;                                                                           
 var x_mid: Cow;                                                                                    
 var w_mid: int;                                                                                    
 var Cow4._lock_mid: [Cow4]Tid;                                                                     
 var Cow3.x_mid: [Cow3]int;                                                                         
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var Cow2.x_mid: [Cow2]int;                                                                         
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var Cow2._state_mid: [Cow2]State;                                                                  
 var Cow3._state_mid: [Cow3]State;                                                                  
 var y_mid: Cow2;                                                                                   
 var Cow2._lock_mid: [Cow2]Tid;                                                                     
 var Cow4.x_mid: [Cow4]int;                                                                         
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var y_post: Cow2;                                                                                  
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Cow.x(t: Tid,x: Cow,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Cow.x[x];                                                                                  
 Cow.x[x] := v;                                                                                     
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.x_mid == Cow.x && Cow._lock_mid == Cow._lock && Cow2._state_mid == Cow2._state && Cow2.x_mid == Cow2.x && Cow2._lock_mid == Cow2._lock && Cow3._state_mid == Cow3._state && Cow3.x_mid == Cow3.x && Cow3._lock_mid == Cow3._lock && Cow4._state_mid == Cow4._state && Cow4.x_mid == Cow4.x && Cow4._lock_mid == Cow4._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Cow2.x(u: Tid,y: Cow2,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Cow.x[x] := tmpV;                                                                                  
 Cow2.x[y] := w;                                                                                    
 _writeByTPost := WriteEval.Cow.x(t: Tid,x: Cow,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.2): Cow.x is not Write-Write Stable with respect to Cow2.x (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Cow.x.Cow2.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow, y: Cow2)   
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow2._state[y], u);                                                          
 modifies Cow.x;                                                                                    
 modifies Cow2.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var y_pre: Cow2;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Cow3._lock_mid: [Cow3]Tid;                                                                     
 var u_mid: Tid;                                                                                    
 var Cow4._state_mid: [Cow4]State;                                                                  
 var $recorded.state_mid: int;                                                                      
 var Cow.x_mid: [Cow]int;                                                                           
 var x_mid: Cow;                                                                                    
 var w_mid: int;                                                                                    
 var Cow4._lock_mid: [Cow4]Tid;                                                                     
 var Cow3.x_mid: [Cow3]int;                                                                         
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var Cow2.x_mid: [Cow2]int;                                                                         
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var Cow2._state_mid: [Cow2]State;                                                                  
 var Cow3._state_mid: [Cow3]State;                                                                  
 var y_mid: Cow2;                                                                                   
 var Cow2._lock_mid: [Cow2]Tid;                                                                     
 var Cow4.x_mid: [Cow4]int;                                                                         
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var y_post: Cow2;                                                                                  
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow2.x(u: Tid,y: Cow2,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow.x(t: Tid,x: Cow,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Cow.x[x];                                                                                  
 Cow.x[x] := v;                                                                                     
 assume Cow._state_mid == Cow._state && Cow.x_mid == Cow.x && Cow._lock_mid == Cow._lock && Cow2._state_mid == Cow2._state && Cow2.x_mid == Cow2.x && Cow2._lock_mid == Cow2._lock && Cow3._state_mid == Cow3._state && Cow3.x_mid == Cow3.x && Cow3._lock_mid == Cow3._lock && Cow4._state_mid == Cow4._state && Cow4.x_mid == Cow4.x && Cow4._lock_mid == Cow4._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Cow2.x(u: Tid,y: Cow2,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Cow.x[x] := tmpV;                                                                                  
 Cow2.x[y] := w;                                                                                    
 _writeByTPost := WriteEval.Cow.x(t: Tid,x: Cow,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.2): Cow.x is not Write-Write Stable with respect to Cow2.x (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.2): Cow.x is not Write-Write Stable with respect to Cow2.x (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Cow.x.Cow2.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow, y: Cow2)  
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow2._state[y], u);                                                          
 modifies Cow.x;                                                                                    
 modifies Cow2.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var y_pre: Cow2;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var y_post: Cow2;                                                                                  
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Cow.x(t: Tid,x: Cow,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Cow2.x(u: Tid,y: Cow2,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow2.x[y] := w;                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Cow.x(t: Tid,x: Cow,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.2): Cow.x is not Read-Write Stable with respect to Cow2.x (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.2): Cow.x is not Read-Write Stable with respect to Cow2.x (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.2): Cow.x is not Read-Write Stable with respect to Cow2.x (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Cow.x.Cow2.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow, y: Cow2)  
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow2._state[y], u);                                                          
 modifies Cow.x;                                                                                    
 modifies Cow2.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var y_pre: Cow2;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var y_post: Cow2;                                                                                  
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Cow2.x(u: Tid,y: Cow2,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Cow.x(t: Tid,x: Cow,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow.x[x] := v;                                                                                     
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Cow2.x(u: Tid,y: Cow2,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (22.2): Cow2.x is not Write-Read Stable with respect to Cow.x (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (22.2): Cow2.x is not Write-Read Stable with respect to Cow.x (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (22.2): Cow2.x is not Write-Read Stable with respect to Cow.x (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Cow.x.Cow3.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow, y: Cow3)    
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow3._state[y], u);                                                          
 modifies Cow.x;                                                                                    
 modifies Cow3.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var y_pre: Cow3;                                                                                   
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var y_post: Cow3;                                                                                  
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow3.x(u: Tid,y: Cow3,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow.x(t: Tid,x: Cow,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow.x[x] := v;                                                                                     
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Cow3.x(u: Tid,y: Cow3,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (30.2): Cow3.x is not Write-Write Stable with respect to Cow.x (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (30.2): Cow3.x is not Write-Write Stable with respect to Cow.x (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (30.2): Cow3.x is not Write-Write Stable with respect to Cow.x (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Cow.x.Cow3.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow, y: Cow3)    
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow3._state[y], u);                                                          
 modifies Cow.x;                                                                                    
 modifies Cow3.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var y_pre: Cow3;                                                                                   
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Cow3._lock_mid: [Cow3]Tid;                                                                     
 var u_mid: Tid;                                                                                    
 var Cow4._state_mid: [Cow4]State;                                                                  
 var $recorded.state_mid: int;                                                                      
 var Cow.x_mid: [Cow]int;                                                                           
 var x_mid: Cow;                                                                                    
 var w_mid: int;                                                                                    
 var Cow4._lock_mid: [Cow4]Tid;                                                                     
 var Cow3.x_mid: [Cow3]int;                                                                         
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var Cow2.x_mid: [Cow2]int;                                                                         
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var y_mid: Cow3;                                                                                   
 var Cow2._state_mid: [Cow2]State;                                                                  
 var Cow3._state_mid: [Cow3]State;                                                                  
 var Cow2._lock_mid: [Cow2]Tid;                                                                     
 var Cow4.x_mid: [Cow4]int;                                                                         
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var y_post: Cow3;                                                                                  
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Cow.x(t: Tid,x: Cow,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Cow.x[x];                                                                                  
 Cow.x[x] := v;                                                                                     
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.x_mid == Cow.x && Cow._lock_mid == Cow._lock && Cow2._state_mid == Cow2._state && Cow2.x_mid == Cow2.x && Cow2._lock_mid == Cow2._lock && Cow3._state_mid == Cow3._state && Cow3.x_mid == Cow3.x && Cow3._lock_mid == Cow3._lock && Cow4._state_mid == Cow4._state && Cow4.x_mid == Cow4.x && Cow4._lock_mid == Cow4._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Cow3.x(u: Tid,y: Cow3,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Cow.x[x] := tmpV;                                                                                  
 Cow3.x[y] := w;                                                                                    
 _writeByTPost := WriteEval.Cow.x(t: Tid,x: Cow,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.2): Cow.x is not Write-Write Stable with respect to Cow3.x (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Cow.x.Cow3.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow, y: Cow3)   
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow3._state[y], u);                                                          
 modifies Cow.x;                                                                                    
 modifies Cow3.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var y_pre: Cow3;                                                                                   
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Cow3._lock_mid: [Cow3]Tid;                                                                     
 var u_mid: Tid;                                                                                    
 var Cow4._state_mid: [Cow4]State;                                                                  
 var $recorded.state_mid: int;                                                                      
 var Cow.x_mid: [Cow]int;                                                                           
 var x_mid: Cow;                                                                                    
 var w_mid: int;                                                                                    
 var Cow4._lock_mid: [Cow4]Tid;                                                                     
 var Cow3.x_mid: [Cow3]int;                                                                         
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var Cow2.x_mid: [Cow2]int;                                                                         
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var y_mid: Cow3;                                                                                   
 var Cow2._state_mid: [Cow2]State;                                                                  
 var Cow3._state_mid: [Cow3]State;                                                                  
 var Cow2._lock_mid: [Cow2]Tid;                                                                     
 var Cow4.x_mid: [Cow4]int;                                                                         
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var y_post: Cow3;                                                                                  
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow3.x(u: Tid,y: Cow3,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow.x(t: Tid,x: Cow,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Cow.x[x];                                                                                  
 Cow.x[x] := v;                                                                                     
 assume Cow._state_mid == Cow._state && Cow.x_mid == Cow.x && Cow._lock_mid == Cow._lock && Cow2._state_mid == Cow2._state && Cow2.x_mid == Cow2.x && Cow2._lock_mid == Cow2._lock && Cow3._state_mid == Cow3._state && Cow3.x_mid == Cow3.x && Cow3._lock_mid == Cow3._lock && Cow4._state_mid == Cow4._state && Cow4.x_mid == Cow4.x && Cow4._lock_mid == Cow4._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Cow3.x(u: Tid,y: Cow3,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Cow.x[x] := tmpV;                                                                                  
 Cow3.x[y] := w;                                                                                    
 _writeByTPost := WriteEval.Cow.x(t: Tid,x: Cow,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.2): Cow.x is not Write-Write Stable with respect to Cow3.x (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.2): Cow.x is not Write-Write Stable with respect to Cow3.x (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Cow.x.Cow3.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow, y: Cow3)  
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow3._state[y], u);                                                          
 modifies Cow.x;                                                                                    
 modifies Cow3.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var y_pre: Cow3;                                                                                   
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var y_post: Cow3;                                                                                  
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Cow.x(t: Tid,x: Cow,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Cow3.x(u: Tid,y: Cow3,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow3.x[y] := w;                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Cow.x(t: Tid,x: Cow,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.2): Cow.x is not Read-Write Stable with respect to Cow3.x (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.2): Cow.x is not Read-Write Stable with respect to Cow3.x (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.2): Cow.x is not Read-Write Stable with respect to Cow3.x (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Cow.x.Cow3.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow, y: Cow3)  
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow3._state[y], u);                                                          
 modifies Cow.x;                                                                                    
 modifies Cow3.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var y_pre: Cow3;                                                                                   
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var y_post: Cow3;                                                                                  
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Cow3.x(u: Tid,y: Cow3,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Cow.x(t: Tid,x: Cow,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow.x[x] := v;                                                                                     
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Cow3.x(u: Tid,y: Cow3,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (30.2): Cow3.x is not Write-Read Stable with respect to Cow.x (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (30.2): Cow3.x is not Write-Read Stable with respect to Cow.x (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (30.2): Cow3.x is not Write-Read Stable with respect to Cow.x (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Cow.x.Cow4.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow, y: Cow4)    
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow4._state[y], u);                                                          
 modifies Cow.x;                                                                                    
 modifies Cow4.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var y_pre: Cow4;                                                                                   
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var y_post: Cow4;                                                                                  
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow4.x(u: Tid,y: Cow4,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow.x(t: Tid,x: Cow,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow.x[x] := v;                                                                                     
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Cow4.x(u: Tid,y: Cow4,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (38.2): Cow4.x is not Write-Write Stable with respect to Cow.x (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (38.2): Cow4.x is not Write-Write Stable with respect to Cow.x (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (38.2): Cow4.x is not Write-Write Stable with respect to Cow.x (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Cow.x.Cow4.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow, y: Cow4)    
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow4._state[y], u);                                                          
 modifies Cow.x;                                                                                    
 modifies Cow4.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var y_pre: Cow4;                                                                                   
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Cow3._lock_mid: [Cow3]Tid;                                                                     
 var u_mid: Tid;                                                                                    
 var Cow4._state_mid: [Cow4]State;                                                                  
 var $recorded.state_mid: int;                                                                      
 var Cow.x_mid: [Cow]int;                                                                           
 var x_mid: Cow;                                                                                    
 var w_mid: int;                                                                                    
 var Cow4._lock_mid: [Cow4]Tid;                                                                     
 var Cow3.x_mid: [Cow3]int;                                                                         
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var y_mid: Cow4;                                                                                   
 var Cow2.x_mid: [Cow2]int;                                                                         
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var Cow2._state_mid: [Cow2]State;                                                                  
 var Cow3._state_mid: [Cow3]State;                                                                  
 var Cow2._lock_mid: [Cow2]Tid;                                                                     
 var Cow4.x_mid: [Cow4]int;                                                                         
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var y_post: Cow4;                                                                                  
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Cow.x(t: Tid,x: Cow,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Cow.x[x];                                                                                  
 Cow.x[x] := v;                                                                                     
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.x_mid == Cow.x && Cow._lock_mid == Cow._lock && Cow2._state_mid == Cow2._state && Cow2.x_mid == Cow2.x && Cow2._lock_mid == Cow2._lock && Cow3._state_mid == Cow3._state && Cow3.x_mid == Cow3.x && Cow3._lock_mid == Cow3._lock && Cow4._state_mid == Cow4._state && Cow4.x_mid == Cow4.x && Cow4._lock_mid == Cow4._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Cow4.x(u: Tid,y: Cow4,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Cow.x[x] := tmpV;                                                                                  
 Cow4.x[y] := w;                                                                                    
 _writeByTPost := WriteEval.Cow.x(t: Tid,x: Cow,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.2): Cow.x is not Write-Write Stable with respect to Cow4.x (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Cow.x.Cow4.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow, y: Cow4)   
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow4._state[y], u);                                                          
 modifies Cow.x;                                                                                    
 modifies Cow4.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var y_pre: Cow4;                                                                                   
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Cow3._lock_mid: [Cow3]Tid;                                                                     
 var u_mid: Tid;                                                                                    
 var Cow4._state_mid: [Cow4]State;                                                                  
 var $recorded.state_mid: int;                                                                      
 var Cow.x_mid: [Cow]int;                                                                           
 var x_mid: Cow;                                                                                    
 var w_mid: int;                                                                                    
 var Cow4._lock_mid: [Cow4]Tid;                                                                     
 var Cow3.x_mid: [Cow3]int;                                                                         
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var y_mid: Cow4;                                                                                   
 var Cow2.x_mid: [Cow2]int;                                                                         
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var Cow2._state_mid: [Cow2]State;                                                                  
 var Cow3._state_mid: [Cow3]State;                                                                  
 var Cow2._lock_mid: [Cow2]Tid;                                                                     
 var Cow4.x_mid: [Cow4]int;                                                                         
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var y_post: Cow4;                                                                                  
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow4.x(u: Tid,y: Cow4,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow.x(t: Tid,x: Cow,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Cow.x[x];                                                                                  
 Cow.x[x] := v;                                                                                     
 assume Cow._state_mid == Cow._state && Cow.x_mid == Cow.x && Cow._lock_mid == Cow._lock && Cow2._state_mid == Cow2._state && Cow2.x_mid == Cow2.x && Cow2._lock_mid == Cow2._lock && Cow3._state_mid == Cow3._state && Cow3.x_mid == Cow3.x && Cow3._lock_mid == Cow3._lock && Cow4._state_mid == Cow4._state && Cow4.x_mid == Cow4.x && Cow4._lock_mid == Cow4._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Cow4.x(u: Tid,y: Cow4,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Cow.x[x] := tmpV;                                                                                  
 Cow4.x[y] := w;                                                                                    
 _writeByTPost := WriteEval.Cow.x(t: Tid,x: Cow,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.2): Cow.x is not Write-Write Stable with respect to Cow4.x (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.2): Cow.x is not Write-Write Stable with respect to Cow4.x (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Cow.x.Cow4.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow, y: Cow4)  
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow4._state[y], u);                                                          
 modifies Cow.x;                                                                                    
 modifies Cow4.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var y_pre: Cow4;                                                                                   
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var y_post: Cow4;                                                                                  
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Cow.x(t: Tid,x: Cow,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Cow4.x(u: Tid,y: Cow4,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow4.x[y] := w;                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Cow.x(t: Tid,x: Cow,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.2): Cow.x is not Read-Write Stable with respect to Cow4.x (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.2): Cow.x is not Read-Write Stable with respect to Cow4.x (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.2): Cow.x is not Read-Write Stable with respect to Cow4.x (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Cow.x.Cow4.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow, y: Cow4)  
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow4._state[y], u);                                                          
 modifies Cow.x;                                                                                    
 modifies Cow4.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var y_pre: Cow4;                                                                                   
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var y_post: Cow4;                                                                                  
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Cow4.x(u: Tid,y: Cow4,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Cow.x(t: Tid,x: Cow,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow.x[x] := v;                                                                                     
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Cow4.x(u: Tid,y: Cow4,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (38.2): Cow4.x is not Write-Read Stable with respect to Cow.x (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (38.2): Cow4.x is not Write-Read Stable with respect to Cow.x (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (38.2): Cow4.x is not Write-Read Stable with respect to Cow.x (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Cow2.x.Cow.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow2, y: Cow)    
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow2._state[x], t);                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Cow2.x;                                                                                   
 modifies Cow.x;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var x_pre: Cow2;                                                                                   
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var y_post: Cow;                                                                                   
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var x_post: Cow2;                                                                                  
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow.x(u: Tid,y: Cow,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow2.x(t: Tid,x: Cow2,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow2.x[x] := v;                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Cow.x(u: Tid,y: Cow,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (3.2): Cow.x is not Write-Write Stable with respect to Cow2.x (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (3.2): Cow.x is not Write-Write Stable with respect to Cow2.x (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (3.2): Cow.x is not Write-Write Stable with respect to Cow2.x (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Cow2.x.Cow.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow2, y: Cow)    
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow2._state[x], t);                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Cow2.x;                                                                                   
 modifies Cow.x;                                                                                    
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var x_pre: Cow2;                                                                                   
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Cow3._lock_mid: [Cow3]Tid;                                                                     
 var u_mid: Tid;                                                                                    
 var y_mid: Cow;                                                                                    
 var Cow4._state_mid: [Cow4]State;                                                                  
 var $recorded.state_mid: int;                                                                      
 var Cow.x_mid: [Cow]int;                                                                           
 var w_mid: int;                                                                                    
 var Cow4._lock_mid: [Cow4]Tid;                                                                     
 var Cow3.x_mid: [Cow3]int;                                                                         
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var Cow2.x_mid: [Cow2]int;                                                                         
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_mid: Cow2;                                                                                   
 var Cow2._state_mid: [Cow2]State;                                                                  
 var Cow3._state_mid: [Cow3]State;                                                                  
 var Cow2._lock_mid: [Cow2]Tid;                                                                     
 var Cow4.x_mid: [Cow4]int;                                                                         
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var y_post: Cow;                                                                                   
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var x_post: Cow2;                                                                                  
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Cow2.x(t: Tid,x: Cow2,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Cow2.x[x];                                                                                 
 Cow2.x[x] := v;                                                                                    
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.x_mid == Cow.x && Cow._lock_mid == Cow._lock && Cow2._state_mid == Cow2._state && Cow2.x_mid == Cow2.x && Cow2._lock_mid == Cow2._lock && Cow3._state_mid == Cow3._state && Cow3.x_mid == Cow3.x && Cow3._lock_mid == Cow3._lock && Cow4._state_mid == Cow4._state && Cow4.x_mid == Cow4.x && Cow4._lock_mid == Cow4._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Cow.x(u: Tid,y: Cow,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Cow2.x[x] := tmpV;                                                                                 
 Cow.x[y] := w;                                                                                     
 _writeByTPost := WriteEval.Cow2.x(t: Tid,x: Cow2,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (22.2): Cow2.x is not Write-Write Stable with respect to Cow.x (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Cow2.x.Cow.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow2, y: Cow)   
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow2._state[x], t);                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Cow2.x;                                                                                   
 modifies Cow.x;                                                                                    
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var x_pre: Cow2;                                                                                   
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Cow3._lock_mid: [Cow3]Tid;                                                                     
 var u_mid: Tid;                                                                                    
 var y_mid: Cow;                                                                                    
 var Cow4._state_mid: [Cow4]State;                                                                  
 var $recorded.state_mid: int;                                                                      
 var Cow.x_mid: [Cow]int;                                                                           
 var w_mid: int;                                                                                    
 var Cow4._lock_mid: [Cow4]Tid;                                                                     
 var Cow3.x_mid: [Cow3]int;                                                                         
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var Cow2.x_mid: [Cow2]int;                                                                         
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_mid: Cow2;                                                                                   
 var Cow2._state_mid: [Cow2]State;                                                                  
 var Cow3._state_mid: [Cow3]State;                                                                  
 var Cow2._lock_mid: [Cow2]Tid;                                                                     
 var Cow4.x_mid: [Cow4]int;                                                                         
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var y_post: Cow;                                                                                   
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var x_post: Cow2;                                                                                  
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow.x(u: Tid,y: Cow,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow2.x(t: Tid,x: Cow2,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Cow2.x[x];                                                                                 
 Cow2.x[x] := v;                                                                                    
 assume Cow._state_mid == Cow._state && Cow.x_mid == Cow.x && Cow._lock_mid == Cow._lock && Cow2._state_mid == Cow2._state && Cow2.x_mid == Cow2.x && Cow2._lock_mid == Cow2._lock && Cow3._state_mid == Cow3._state && Cow3.x_mid == Cow3.x && Cow3._lock_mid == Cow3._lock && Cow4._state_mid == Cow4._state && Cow4.x_mid == Cow4.x && Cow4._lock_mid == Cow4._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Cow.x(u: Tid,y: Cow,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Cow2.x[x] := tmpV;                                                                                 
 Cow.x[y] := w;                                                                                     
 _writeByTPost := WriteEval.Cow2.x(t: Tid,x: Cow2,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (22.2): Cow2.x is not Write-Write Stable with respect to Cow.x (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (22.2): Cow2.x is not Write-Write Stable with respect to Cow.x (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Cow2.x.Cow.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow2, y: Cow)  
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow2._state[x], t);                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Cow2.x;                                                                                   
 modifies Cow.x;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var x_pre: Cow2;                                                                                   
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var y_post: Cow;                                                                                   
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var x_post: Cow2;                                                                                  
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Cow2.x(t: Tid,x: Cow2,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Cow.x(u: Tid,y: Cow,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow.x[y] := w;                                                                                     
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Cow2.x(t: Tid,x: Cow2,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (22.2): Cow2.x is not Read-Write Stable with respect to Cow.x (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (22.2): Cow2.x is not Read-Write Stable with respect to Cow.x (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (22.2): Cow2.x is not Read-Write Stable with respect to Cow.x (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Cow2.x.Cow.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow2, y: Cow)  
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow2._state[x], t);                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Cow2.x;                                                                                   
 modifies Cow.x;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var x_pre: Cow2;                                                                                   
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var y_post: Cow;                                                                                   
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var x_post: Cow2;                                                                                  
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Cow.x(u: Tid,y: Cow,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Cow2.x(t: Tid,x: Cow2,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow2.x[x] := v;                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Cow.x(u: Tid,y: Cow,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (3.2): Cow.x is not Write-Read Stable with respect to Cow2.x (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (3.2): Cow.x is not Write-Read Stable with respect to Cow2.x (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (3.2): Cow.x is not Write-Read Stable with respect to Cow2.x (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Cow2.x.Cow2.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow2, y: Cow2)  
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow2._state[x], t);                                                          
 requires isAccessible(Cow2._state[y], u);                                                          
 modifies Cow2.x;                                                                                   
 modifies Cow2.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var x_pre: Cow2;                                                                                   
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var y_pre: Cow2;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var x_post: Cow2;                                                                                  
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var y_post: Cow2;                                                                                  
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow2.x(u: Tid,y: Cow2,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow2.x(t: Tid,x: Cow2,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow2.x[x] := v;                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Cow2.x(u: Tid,y: Cow2,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (22.2): Cow2.x is not Write-Write Stable with respect to Cow2.x (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (22.2): Cow2.x is not Write-Write Stable with respect to Cow2.x (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (22.2): Cow2.x is not Write-Write Stable with respect to Cow2.x (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Cow2.x.Cow2.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow2, y: Cow2)  
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow2._state[x], t);                                                          
 requires isAccessible(Cow2._state[y], u);                                                          
 modifies Cow2.x;                                                                                   
 modifies Cow2.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var x_pre: Cow2;                                                                                   
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var y_pre: Cow2;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Cow3._lock_mid: [Cow3]Tid;                                                                     
 var u_mid: Tid;                                                                                    
 var Cow4._state_mid: [Cow4]State;                                                                  
 var $recorded.state_mid: int;                                                                      
 var Cow.x_mid: [Cow]int;                                                                           
 var w_mid: int;                                                                                    
 var Cow4._lock_mid: [Cow4]Tid;                                                                     
 var Cow3.x_mid: [Cow3]int;                                                                         
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var Cow2.x_mid: [Cow2]int;                                                                         
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_mid: Cow2;                                                                                   
 var Cow2._state_mid: [Cow2]State;                                                                  
 var Cow3._state_mid: [Cow3]State;                                                                  
 var y_mid: Cow2;                                                                                   
 var Cow2._lock_mid: [Cow2]Tid;                                                                     
 var Cow4.x_mid: [Cow4]int;                                                                         
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var x_post: Cow2;                                                                                  
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var y_post: Cow2;                                                                                  
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Cow2.x(t: Tid,x: Cow2,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Cow2.x[x];                                                                                 
 Cow2.x[x] := v;                                                                                    
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.x_mid == Cow.x && Cow._lock_mid == Cow._lock && Cow2._state_mid == Cow2._state && Cow2.x_mid == Cow2.x && Cow2._lock_mid == Cow2._lock && Cow3._state_mid == Cow3._state && Cow3.x_mid == Cow3.x && Cow3._lock_mid == Cow3._lock && Cow4._state_mid == Cow4._state && Cow4.x_mid == Cow4.x && Cow4._lock_mid == Cow4._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Cow2.x(u: Tid,y: Cow2,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Cow2.x[x] := tmpV;                                                                                 
 Cow2.x[y] := w;                                                                                    
 _writeByTPost := WriteEval.Cow2.x(t: Tid,x: Cow2,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (22.2): Cow2.x is not Write-Write Stable with respect to Cow2.x (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Cow2.x.Cow2.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow2, y: Cow2) 
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow2._state[x], t);                                                          
 requires isAccessible(Cow2._state[y], u);                                                          
 modifies Cow2.x;                                                                                   
 modifies Cow2.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var x_pre: Cow2;                                                                                   
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var y_pre: Cow2;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Cow3._lock_mid: [Cow3]Tid;                                                                     
 var u_mid: Tid;                                                                                    
 var Cow4._state_mid: [Cow4]State;                                                                  
 var $recorded.state_mid: int;                                                                      
 var Cow.x_mid: [Cow]int;                                                                           
 var w_mid: int;                                                                                    
 var Cow4._lock_mid: [Cow4]Tid;                                                                     
 var Cow3.x_mid: [Cow3]int;                                                                         
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var Cow2.x_mid: [Cow2]int;                                                                         
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_mid: Cow2;                                                                                   
 var Cow2._state_mid: [Cow2]State;                                                                  
 var Cow3._state_mid: [Cow3]State;                                                                  
 var y_mid: Cow2;                                                                                   
 var Cow2._lock_mid: [Cow2]Tid;                                                                     
 var Cow4.x_mid: [Cow4]int;                                                                         
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var x_post: Cow2;                                                                                  
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var y_post: Cow2;                                                                                  
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow2.x(u: Tid,y: Cow2,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow2.x(t: Tid,x: Cow2,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Cow2.x[x];                                                                                 
 Cow2.x[x] := v;                                                                                    
 assume Cow._state_mid == Cow._state && Cow.x_mid == Cow.x && Cow._lock_mid == Cow._lock && Cow2._state_mid == Cow2._state && Cow2.x_mid == Cow2.x && Cow2._lock_mid == Cow2._lock && Cow3._state_mid == Cow3._state && Cow3.x_mid == Cow3.x && Cow3._lock_mid == Cow3._lock && Cow4._state_mid == Cow4._state && Cow4.x_mid == Cow4.x && Cow4._lock_mid == Cow4._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Cow2.x(u: Tid,y: Cow2,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Cow2.x[x] := tmpV;                                                                                 
 Cow2.x[y] := w;                                                                                    
 _writeByTPost := WriteEval.Cow2.x(t: Tid,x: Cow2,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (22.2): Cow2.x is not Write-Write Stable with respect to Cow2.x (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (22.2): Cow2.x is not Write-Write Stable with respect to Cow2.x (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Cow2.x.Cow2.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow2, y: Cow2)
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow2._state[x], t);                                                          
 requires isAccessible(Cow2._state[y], u);                                                          
 modifies Cow2.x;                                                                                   
 modifies Cow2.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var x_pre: Cow2;                                                                                   
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var y_pre: Cow2;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var x_post: Cow2;                                                                                  
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var y_post: Cow2;                                                                                  
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Cow2.x(t: Tid,x: Cow2,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Cow2.x(u: Tid,y: Cow2,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow2.x[y] := w;                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Cow2.x(t: Tid,x: Cow2,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (22.2): Cow2.x is not Read-Write Stable with respect to Cow2.x (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (22.2): Cow2.x is not Read-Write Stable with respect to Cow2.x (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (22.2): Cow2.x is not Read-Write Stable with respect to Cow2.x (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Cow2.x.Cow2.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow2, y: Cow2)
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow2._state[x], t);                                                          
 requires isAccessible(Cow2._state[y], u);                                                          
 modifies Cow2.x;                                                                                   
 modifies Cow2.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var x_pre: Cow2;                                                                                   
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var y_pre: Cow2;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var x_post: Cow2;                                                                                  
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var y_post: Cow2;                                                                                  
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Cow2.x(u: Tid,y: Cow2,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Cow2.x(t: Tid,x: Cow2,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow2.x[x] := v;                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Cow2.x(u: Tid,y: Cow2,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (22.2): Cow2.x is not Write-Read Stable with respect to Cow2.x (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (22.2): Cow2.x is not Write-Read Stable with respect to Cow2.x (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (22.2): Cow2.x is not Write-Read Stable with respect to Cow2.x (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Cow2.x.Cow3.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow2, y: Cow3)  
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow2._state[x], t);                                                          
 requires isAccessible(Cow3._state[y], u);                                                          
 modifies Cow2.x;                                                                                   
 modifies Cow3.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var x_pre: Cow2;                                                                                   
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var y_pre: Cow3;                                                                                   
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var x_post: Cow2;                                                                                  
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var y_post: Cow3;                                                                                  
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow3.x(u: Tid,y: Cow3,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow2.x(t: Tid,x: Cow2,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow2.x[x] := v;                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Cow3.x(u: Tid,y: Cow3,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (30.2): Cow3.x is not Write-Write Stable with respect to Cow2.x (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (30.2): Cow3.x is not Write-Write Stable with respect to Cow2.x (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (30.2): Cow3.x is not Write-Write Stable with respect to Cow2.x (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Cow2.x.Cow3.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow2, y: Cow3)  
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow2._state[x], t);                                                          
 requires isAccessible(Cow3._state[y], u);                                                          
 modifies Cow2.x;                                                                                   
 modifies Cow3.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var x_pre: Cow2;                                                                                   
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var y_pre: Cow3;                                                                                   
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Cow3._lock_mid: [Cow3]Tid;                                                                     
 var u_mid: Tid;                                                                                    
 var Cow4._state_mid: [Cow4]State;                                                                  
 var $recorded.state_mid: int;                                                                      
 var Cow.x_mid: [Cow]int;                                                                           
 var w_mid: int;                                                                                    
 var Cow4._lock_mid: [Cow4]Tid;                                                                     
 var Cow3.x_mid: [Cow3]int;                                                                         
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var Cow2.x_mid: [Cow2]int;                                                                         
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var y_mid: Cow3;                                                                                   
 var x_mid: Cow2;                                                                                   
 var Cow2._state_mid: [Cow2]State;                                                                  
 var Cow3._state_mid: [Cow3]State;                                                                  
 var Cow2._lock_mid: [Cow2]Tid;                                                                     
 var Cow4.x_mid: [Cow4]int;                                                                         
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var x_post: Cow2;                                                                                  
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var y_post: Cow3;                                                                                  
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Cow2.x(t: Tid,x: Cow2,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Cow2.x[x];                                                                                 
 Cow2.x[x] := v;                                                                                    
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.x_mid == Cow.x && Cow._lock_mid == Cow._lock && Cow2._state_mid == Cow2._state && Cow2.x_mid == Cow2.x && Cow2._lock_mid == Cow2._lock && Cow3._state_mid == Cow3._state && Cow3.x_mid == Cow3.x && Cow3._lock_mid == Cow3._lock && Cow4._state_mid == Cow4._state && Cow4.x_mid == Cow4.x && Cow4._lock_mid == Cow4._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Cow3.x(u: Tid,y: Cow3,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Cow2.x[x] := tmpV;                                                                                 
 Cow3.x[y] := w;                                                                                    
 _writeByTPost := WriteEval.Cow2.x(t: Tid,x: Cow2,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (22.2): Cow2.x is not Write-Write Stable with respect to Cow3.x (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Cow2.x.Cow3.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow2, y: Cow3) 
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow2._state[x], t);                                                          
 requires isAccessible(Cow3._state[y], u);                                                          
 modifies Cow2.x;                                                                                   
 modifies Cow3.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var x_pre: Cow2;                                                                                   
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var y_pre: Cow3;                                                                                   
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Cow3._lock_mid: [Cow3]Tid;                                                                     
 var u_mid: Tid;                                                                                    
 var Cow4._state_mid: [Cow4]State;                                                                  
 var $recorded.state_mid: int;                                                                      
 var Cow.x_mid: [Cow]int;                                                                           
 var w_mid: int;                                                                                    
 var Cow4._lock_mid: [Cow4]Tid;                                                                     
 var Cow3.x_mid: [Cow3]int;                                                                         
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var Cow2.x_mid: [Cow2]int;                                                                         
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var y_mid: Cow3;                                                                                   
 var x_mid: Cow2;                                                                                   
 var Cow2._state_mid: [Cow2]State;                                                                  
 var Cow3._state_mid: [Cow3]State;                                                                  
 var Cow2._lock_mid: [Cow2]Tid;                                                                     
 var Cow4.x_mid: [Cow4]int;                                                                         
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var x_post: Cow2;                                                                                  
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var y_post: Cow3;                                                                                  
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow3.x(u: Tid,y: Cow3,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow2.x(t: Tid,x: Cow2,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Cow2.x[x];                                                                                 
 Cow2.x[x] := v;                                                                                    
 assume Cow._state_mid == Cow._state && Cow.x_mid == Cow.x && Cow._lock_mid == Cow._lock && Cow2._state_mid == Cow2._state && Cow2.x_mid == Cow2.x && Cow2._lock_mid == Cow2._lock && Cow3._state_mid == Cow3._state && Cow3.x_mid == Cow3.x && Cow3._lock_mid == Cow3._lock && Cow4._state_mid == Cow4._state && Cow4.x_mid == Cow4.x && Cow4._lock_mid == Cow4._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Cow3.x(u: Tid,y: Cow3,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Cow2.x[x] := tmpV;                                                                                 
 Cow3.x[y] := w;                                                                                    
 _writeByTPost := WriteEval.Cow2.x(t: Tid,x: Cow2,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (22.2): Cow2.x is not Write-Write Stable with respect to Cow3.x (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (22.2): Cow2.x is not Write-Write Stable with respect to Cow3.x (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Cow2.x.Cow3.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow2, y: Cow3)
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow2._state[x], t);                                                          
 requires isAccessible(Cow3._state[y], u);                                                          
 modifies Cow2.x;                                                                                   
 modifies Cow3.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var x_pre: Cow2;                                                                                   
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var y_pre: Cow3;                                                                                   
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var x_post: Cow2;                                                                                  
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var y_post: Cow3;                                                                                  
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Cow2.x(t: Tid,x: Cow2,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Cow3.x(u: Tid,y: Cow3,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow3.x[y] := w;                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Cow2.x(t: Tid,x: Cow2,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (22.2): Cow2.x is not Read-Write Stable with respect to Cow3.x (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (22.2): Cow2.x is not Read-Write Stable with respect to Cow3.x (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (22.2): Cow2.x is not Read-Write Stable with respect to Cow3.x (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Cow2.x.Cow3.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow2, y: Cow3)
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow2._state[x], t);                                                          
 requires isAccessible(Cow3._state[y], u);                                                          
 modifies Cow2.x;                                                                                   
 modifies Cow3.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var x_pre: Cow2;                                                                                   
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var y_pre: Cow3;                                                                                   
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var x_post: Cow2;                                                                                  
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var y_post: Cow3;                                                                                  
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Cow3.x(u: Tid,y: Cow3,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Cow2.x(t: Tid,x: Cow2,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow2.x[x] := v;                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Cow3.x(u: Tid,y: Cow3,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (30.2): Cow3.x is not Write-Read Stable with respect to Cow2.x (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (30.2): Cow3.x is not Write-Read Stable with respect to Cow2.x (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (30.2): Cow3.x is not Write-Read Stable with respect to Cow2.x (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Cow2.x.Cow4.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow2, y: Cow4)  
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow2._state[x], t);                                                          
 requires isAccessible(Cow4._state[y], u);                                                          
 modifies Cow2.x;                                                                                   
 modifies Cow4.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var x_pre: Cow2;                                                                                   
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var y_pre: Cow4;                                                                                   
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var y_post: Cow4;                                                                                  
 var x_post: Cow2;                                                                                  
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow4.x(u: Tid,y: Cow4,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow2.x(t: Tid,x: Cow2,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow2.x[x] := v;                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Cow4.x(u: Tid,y: Cow4,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (38.2): Cow4.x is not Write-Write Stable with respect to Cow2.x (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (38.2): Cow4.x is not Write-Write Stable with respect to Cow2.x (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (38.2): Cow4.x is not Write-Write Stable with respect to Cow2.x (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Cow2.x.Cow4.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow2, y: Cow4)  
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow2._state[x], t);                                                          
 requires isAccessible(Cow4._state[y], u);                                                          
 modifies Cow2.x;                                                                                   
 modifies Cow4.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var x_pre: Cow2;                                                                                   
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var y_pre: Cow4;                                                                                   
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Cow3._lock_mid: [Cow3]Tid;                                                                     
 var u_mid: Tid;                                                                                    
 var Cow4._state_mid: [Cow4]State;                                                                  
 var $recorded.state_mid: int;                                                                      
 var Cow.x_mid: [Cow]int;                                                                           
 var w_mid: int;                                                                                    
 var Cow4._lock_mid: [Cow4]Tid;                                                                     
 var Cow3.x_mid: [Cow3]int;                                                                         
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var y_mid: Cow4;                                                                                   
 var Cow2.x_mid: [Cow2]int;                                                                         
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_mid: Cow2;                                                                                   
 var Cow2._state_mid: [Cow2]State;                                                                  
 var Cow3._state_mid: [Cow3]State;                                                                  
 var Cow2._lock_mid: [Cow2]Tid;                                                                     
 var Cow4.x_mid: [Cow4]int;                                                                         
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var y_post: Cow4;                                                                                  
 var x_post: Cow2;                                                                                  
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Cow2.x(t: Tid,x: Cow2,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Cow2.x[x];                                                                                 
 Cow2.x[x] := v;                                                                                    
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.x_mid == Cow.x && Cow._lock_mid == Cow._lock && Cow2._state_mid == Cow2._state && Cow2.x_mid == Cow2.x && Cow2._lock_mid == Cow2._lock && Cow3._state_mid == Cow3._state && Cow3.x_mid == Cow3.x && Cow3._lock_mid == Cow3._lock && Cow4._state_mid == Cow4._state && Cow4.x_mid == Cow4.x && Cow4._lock_mid == Cow4._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Cow4.x(u: Tid,y: Cow4,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Cow2.x[x] := tmpV;                                                                                 
 Cow4.x[y] := w;                                                                                    
 _writeByTPost := WriteEval.Cow2.x(t: Tid,x: Cow2,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (22.2): Cow2.x is not Write-Write Stable with respect to Cow4.x (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Cow2.x.Cow4.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow2, y: Cow4) 
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow2._state[x], t);                                                          
 requires isAccessible(Cow4._state[y], u);                                                          
 modifies Cow2.x;                                                                                   
 modifies Cow4.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var x_pre: Cow2;                                                                                   
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var y_pre: Cow4;                                                                                   
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Cow3._lock_mid: [Cow3]Tid;                                                                     
 var u_mid: Tid;                                                                                    
 var Cow4._state_mid: [Cow4]State;                                                                  
 var $recorded.state_mid: int;                                                                      
 var Cow.x_mid: [Cow]int;                                                                           
 var w_mid: int;                                                                                    
 var Cow4._lock_mid: [Cow4]Tid;                                                                     
 var Cow3.x_mid: [Cow3]int;                                                                         
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var y_mid: Cow4;                                                                                   
 var Cow2.x_mid: [Cow2]int;                                                                         
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_mid: Cow2;                                                                                   
 var Cow2._state_mid: [Cow2]State;                                                                  
 var Cow3._state_mid: [Cow3]State;                                                                  
 var Cow2._lock_mid: [Cow2]Tid;                                                                     
 var Cow4.x_mid: [Cow4]int;                                                                         
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var y_post: Cow4;                                                                                  
 var x_post: Cow2;                                                                                  
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow4.x(u: Tid,y: Cow4,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow2.x(t: Tid,x: Cow2,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Cow2.x[x];                                                                                 
 Cow2.x[x] := v;                                                                                    
 assume Cow._state_mid == Cow._state && Cow.x_mid == Cow.x && Cow._lock_mid == Cow._lock && Cow2._state_mid == Cow2._state && Cow2.x_mid == Cow2.x && Cow2._lock_mid == Cow2._lock && Cow3._state_mid == Cow3._state && Cow3.x_mid == Cow3.x && Cow3._lock_mid == Cow3._lock && Cow4._state_mid == Cow4._state && Cow4.x_mid == Cow4.x && Cow4._lock_mid == Cow4._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Cow4.x(u: Tid,y: Cow4,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Cow2.x[x] := tmpV;                                                                                 
 Cow4.x[y] := w;                                                                                    
 _writeByTPost := WriteEval.Cow2.x(t: Tid,x: Cow2,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (22.2): Cow2.x is not Write-Write Stable with respect to Cow4.x (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (22.2): Cow2.x is not Write-Write Stable with respect to Cow4.x (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Cow2.x.Cow4.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow2, y: Cow4)
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow2._state[x], t);                                                          
 requires isAccessible(Cow4._state[y], u);                                                          
 modifies Cow2.x;                                                                                   
 modifies Cow4.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var x_pre: Cow2;                                                                                   
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var y_pre: Cow4;                                                                                   
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var y_post: Cow4;                                                                                  
 var x_post: Cow2;                                                                                  
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Cow2.x(t: Tid,x: Cow2,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Cow4.x(u: Tid,y: Cow4,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow4.x[y] := w;                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Cow2.x(t: Tid,x: Cow2,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (22.2): Cow2.x is not Read-Write Stable with respect to Cow4.x (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (22.2): Cow2.x is not Read-Write Stable with respect to Cow4.x (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (22.2): Cow2.x is not Read-Write Stable with respect to Cow4.x (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Cow2.x.Cow4.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow2, y: Cow4)
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow2._state[x], t);                                                          
 requires isAccessible(Cow4._state[y], u);                                                          
 modifies Cow2.x;                                                                                   
 modifies Cow4.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var x_pre: Cow2;                                                                                   
 var v_pre: int;                                                                                    
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var y_pre: Cow4;                                                                                   
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var y_post: Cow4;                                                                                  
 var x_post: Cow2;                                                                                  
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Cow4.x(u: Tid,y: Cow4,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Cow2.x(t: Tid,x: Cow2,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow2.x[x] := v;                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Cow4.x(u: Tid,y: Cow4,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (38.2): Cow4.x is not Write-Read Stable with respect to Cow2.x (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (38.2): Cow4.x is not Write-Read Stable with respect to Cow2.x (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (38.2): Cow4.x is not Write-Read Stable with respect to Cow2.x (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Cow3.x.Cow.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow3, y: Cow)    
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow3._state[x], t);                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Cow3.x;                                                                                   
 modifies Cow.x;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow3;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var y_post: Cow;                                                                                   
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var x_post: Cow3;                                                                                  
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow.x(u: Tid,y: Cow,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow3.x(t: Tid,x: Cow3,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow3.x[x] := v;                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Cow.x(u: Tid,y: Cow,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (3.2): Cow.x is not Write-Write Stable with respect to Cow3.x (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (3.2): Cow.x is not Write-Write Stable with respect to Cow3.x (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (3.2): Cow.x is not Write-Write Stable with respect to Cow3.x (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Cow3.x.Cow.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow3, y: Cow)    
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow3._state[x], t);                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Cow3.x;                                                                                   
 modifies Cow.x;                                                                                    
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow3;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Cow3._lock_mid: [Cow3]Tid;                                                                     
 var x_mid: Cow3;                                                                                   
 var u_mid: Tid;                                                                                    
 var y_mid: Cow;                                                                                    
 var Cow4._state_mid: [Cow4]State;                                                                  
 var $recorded.state_mid: int;                                                                      
 var Cow.x_mid: [Cow]int;                                                                           
 var w_mid: int;                                                                                    
 var Cow4._lock_mid: [Cow4]Tid;                                                                     
 var Cow3.x_mid: [Cow3]int;                                                                         
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var Cow2.x_mid: [Cow2]int;                                                                         
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var Cow2._state_mid: [Cow2]State;                                                                  
 var Cow3._state_mid: [Cow3]State;                                                                  
 var Cow2._lock_mid: [Cow2]Tid;                                                                     
 var Cow4.x_mid: [Cow4]int;                                                                         
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var y_post: Cow;                                                                                   
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var x_post: Cow3;                                                                                  
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Cow3.x(t: Tid,x: Cow3,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Cow3.x[x];                                                                                 
 Cow3.x[x] := v;                                                                                    
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.x_mid == Cow.x && Cow._lock_mid == Cow._lock && Cow2._state_mid == Cow2._state && Cow2.x_mid == Cow2.x && Cow2._lock_mid == Cow2._lock && Cow3._state_mid == Cow3._state && Cow3.x_mid == Cow3.x && Cow3._lock_mid == Cow3._lock && Cow4._state_mid == Cow4._state && Cow4.x_mid == Cow4.x && Cow4._lock_mid == Cow4._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Cow.x(u: Tid,y: Cow,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Cow3.x[x] := tmpV;                                                                                 
 Cow.x[y] := w;                                                                                     
 _writeByTPost := WriteEval.Cow3.x(t: Tid,x: Cow3,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (30.2): Cow3.x is not Write-Write Stable with respect to Cow.x (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Cow3.x.Cow.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow3, y: Cow)   
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow3._state[x], t);                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Cow3.x;                                                                                   
 modifies Cow.x;                                                                                    
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow3;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Cow3._lock_mid: [Cow3]Tid;                                                                     
 var x_mid: Cow3;                                                                                   
 var u_mid: Tid;                                                                                    
 var y_mid: Cow;                                                                                    
 var Cow4._state_mid: [Cow4]State;                                                                  
 var $recorded.state_mid: int;                                                                      
 var Cow.x_mid: [Cow]int;                                                                           
 var w_mid: int;                                                                                    
 var Cow4._lock_mid: [Cow4]Tid;                                                                     
 var Cow3.x_mid: [Cow3]int;                                                                         
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var Cow2.x_mid: [Cow2]int;                                                                         
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var Cow2._state_mid: [Cow2]State;                                                                  
 var Cow3._state_mid: [Cow3]State;                                                                  
 var Cow2._lock_mid: [Cow2]Tid;                                                                     
 var Cow4.x_mid: [Cow4]int;                                                                         
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var y_post: Cow;                                                                                   
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var x_post: Cow3;                                                                                  
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow.x(u: Tid,y: Cow,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow3.x(t: Tid,x: Cow3,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Cow3.x[x];                                                                                 
 Cow3.x[x] := v;                                                                                    
 assume Cow._state_mid == Cow._state && Cow.x_mid == Cow.x && Cow._lock_mid == Cow._lock && Cow2._state_mid == Cow2._state && Cow2.x_mid == Cow2.x && Cow2._lock_mid == Cow2._lock && Cow3._state_mid == Cow3._state && Cow3.x_mid == Cow3.x && Cow3._lock_mid == Cow3._lock && Cow4._state_mid == Cow4._state && Cow4.x_mid == Cow4.x && Cow4._lock_mid == Cow4._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Cow.x(u: Tid,y: Cow,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Cow3.x[x] := tmpV;                                                                                 
 Cow.x[y] := w;                                                                                     
 _writeByTPost := WriteEval.Cow3.x(t: Tid,x: Cow3,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (30.2): Cow3.x is not Write-Write Stable with respect to Cow.x (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (30.2): Cow3.x is not Write-Write Stable with respect to Cow.x (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Cow3.x.Cow.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow3, y: Cow)  
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow3._state[x], t);                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Cow3.x;                                                                                   
 modifies Cow.x;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow3;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var y_post: Cow;                                                                                   
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var x_post: Cow3;                                                                                  
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Cow3.x(t: Tid,x: Cow3,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Cow.x(u: Tid,y: Cow,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow.x[y] := w;                                                                                     
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Cow3.x(t: Tid,x: Cow3,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (30.2): Cow3.x is not Read-Write Stable with respect to Cow.x (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (30.2): Cow3.x is not Read-Write Stable with respect to Cow.x (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (30.2): Cow3.x is not Read-Write Stable with respect to Cow.x (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Cow3.x.Cow.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow3, y: Cow)  
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow3._state[x], t);                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Cow3.x;                                                                                   
 modifies Cow.x;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow3;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var y_post: Cow;                                                                                   
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var x_post: Cow3;                                                                                  
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Cow.x(u: Tid,y: Cow,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Cow3.x(t: Tid,x: Cow3,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow3.x[x] := v;                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Cow.x(u: Tid,y: Cow,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (3.2): Cow.x is not Write-Read Stable with respect to Cow3.x (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (3.2): Cow.x is not Write-Read Stable with respect to Cow3.x (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (3.2): Cow.x is not Write-Read Stable with respect to Cow3.x (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Cow3.x.Cow2.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow3, y: Cow2)  
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow3._state[x], t);                                                          
 requires isAccessible(Cow2._state[y], u);                                                          
 modifies Cow3.x;                                                                                   
 modifies Cow2.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow3;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var y_pre: Cow2;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var y_post: Cow2;                                                                                  
 var x_post: Cow3;                                                                                  
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow2.x(u: Tid,y: Cow2,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow3.x(t: Tid,x: Cow3,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow3.x[x] := v;                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Cow2.x(u: Tid,y: Cow2,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (22.2): Cow2.x is not Write-Write Stable with respect to Cow3.x (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (22.2): Cow2.x is not Write-Write Stable with respect to Cow3.x (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (22.2): Cow2.x is not Write-Write Stable with respect to Cow3.x (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Cow3.x.Cow2.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow3, y: Cow2)  
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow3._state[x], t);                                                          
 requires isAccessible(Cow2._state[y], u);                                                          
 modifies Cow3.x;                                                                                   
 modifies Cow2.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow3;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var y_pre: Cow2;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Cow3._lock_mid: [Cow3]Tid;                                                                     
 var x_mid: Cow3;                                                                                   
 var u_mid: Tid;                                                                                    
 var Cow4._state_mid: [Cow4]State;                                                                  
 var $recorded.state_mid: int;                                                                      
 var Cow.x_mid: [Cow]int;                                                                           
 var w_mid: int;                                                                                    
 var Cow4._lock_mid: [Cow4]Tid;                                                                     
 var Cow3.x_mid: [Cow3]int;                                                                         
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var Cow2.x_mid: [Cow2]int;                                                                         
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var Cow2._state_mid: [Cow2]State;                                                                  
 var Cow3._state_mid: [Cow3]State;                                                                  
 var y_mid: Cow2;                                                                                   
 var Cow2._lock_mid: [Cow2]Tid;                                                                     
 var Cow4.x_mid: [Cow4]int;                                                                         
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var y_post: Cow2;                                                                                  
 var x_post: Cow3;                                                                                  
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Cow3.x(t: Tid,x: Cow3,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Cow3.x[x];                                                                                 
 Cow3.x[x] := v;                                                                                    
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.x_mid == Cow.x && Cow._lock_mid == Cow._lock && Cow2._state_mid == Cow2._state && Cow2.x_mid == Cow2.x && Cow2._lock_mid == Cow2._lock && Cow3._state_mid == Cow3._state && Cow3.x_mid == Cow3.x && Cow3._lock_mid == Cow3._lock && Cow4._state_mid == Cow4._state && Cow4.x_mid == Cow4.x && Cow4._lock_mid == Cow4._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Cow2.x(u: Tid,y: Cow2,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Cow3.x[x] := tmpV;                                                                                 
 Cow2.x[y] := w;                                                                                    
 _writeByTPost := WriteEval.Cow3.x(t: Tid,x: Cow3,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (30.2): Cow3.x is not Write-Write Stable with respect to Cow2.x (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Cow3.x.Cow2.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow3, y: Cow2) 
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow3._state[x], t);                                                          
 requires isAccessible(Cow2._state[y], u);                                                          
 modifies Cow3.x;                                                                                   
 modifies Cow2.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow3;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var y_pre: Cow2;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Cow3._lock_mid: [Cow3]Tid;                                                                     
 var x_mid: Cow3;                                                                                   
 var u_mid: Tid;                                                                                    
 var Cow4._state_mid: [Cow4]State;                                                                  
 var $recorded.state_mid: int;                                                                      
 var Cow.x_mid: [Cow]int;                                                                           
 var w_mid: int;                                                                                    
 var Cow4._lock_mid: [Cow4]Tid;                                                                     
 var Cow3.x_mid: [Cow3]int;                                                                         
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var Cow2.x_mid: [Cow2]int;                                                                         
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var Cow2._state_mid: [Cow2]State;                                                                  
 var Cow3._state_mid: [Cow3]State;                                                                  
 var y_mid: Cow2;                                                                                   
 var Cow2._lock_mid: [Cow2]Tid;                                                                     
 var Cow4.x_mid: [Cow4]int;                                                                         
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var y_post: Cow2;                                                                                  
 var x_post: Cow3;                                                                                  
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow2.x(u: Tid,y: Cow2,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow3.x(t: Tid,x: Cow3,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Cow3.x[x];                                                                                 
 Cow3.x[x] := v;                                                                                    
 assume Cow._state_mid == Cow._state && Cow.x_mid == Cow.x && Cow._lock_mid == Cow._lock && Cow2._state_mid == Cow2._state && Cow2.x_mid == Cow2.x && Cow2._lock_mid == Cow2._lock && Cow3._state_mid == Cow3._state && Cow3.x_mid == Cow3.x && Cow3._lock_mid == Cow3._lock && Cow4._state_mid == Cow4._state && Cow4.x_mid == Cow4.x && Cow4._lock_mid == Cow4._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Cow2.x(u: Tid,y: Cow2,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Cow3.x[x] := tmpV;                                                                                 
 Cow2.x[y] := w;                                                                                    
 _writeByTPost := WriteEval.Cow3.x(t: Tid,x: Cow3,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (30.2): Cow3.x is not Write-Write Stable with respect to Cow2.x (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (30.2): Cow3.x is not Write-Write Stable with respect to Cow2.x (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Cow3.x.Cow2.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow3, y: Cow2)
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow3._state[x], t);                                                          
 requires isAccessible(Cow2._state[y], u);                                                          
 modifies Cow3.x;                                                                                   
 modifies Cow2.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow3;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var y_pre: Cow2;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var y_post: Cow2;                                                                                  
 var x_post: Cow3;                                                                                  
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Cow3.x(t: Tid,x: Cow3,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Cow2.x(u: Tid,y: Cow2,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow2.x[y] := w;                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Cow3.x(t: Tid,x: Cow3,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (30.2): Cow3.x is not Read-Write Stable with respect to Cow2.x (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (30.2): Cow3.x is not Read-Write Stable with respect to Cow2.x (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (30.2): Cow3.x is not Read-Write Stable with respect to Cow2.x (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Cow3.x.Cow2.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow3, y: Cow2)
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow3._state[x], t);                                                          
 requires isAccessible(Cow2._state[y], u);                                                          
 modifies Cow3.x;                                                                                   
 modifies Cow2.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow3;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var y_pre: Cow2;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var y_post: Cow2;                                                                                  
 var x_post: Cow3;                                                                                  
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Cow2.x(u: Tid,y: Cow2,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Cow3.x(t: Tid,x: Cow3,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow3.x[x] := v;                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Cow2.x(u: Tid,y: Cow2,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (22.2): Cow2.x is not Write-Read Stable with respect to Cow3.x (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (22.2): Cow2.x is not Write-Read Stable with respect to Cow3.x (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (22.2): Cow2.x is not Write-Read Stable with respect to Cow3.x (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Cow3.x.Cow3.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow3, y: Cow3)  
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow3._state[x], t);                                                          
 requires isAccessible(Cow3._state[y], u);                                                          
 modifies Cow3.x;                                                                                   
 modifies Cow3.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow3;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var y_pre: Cow3;                                                                                   
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var y_post: Cow3;                                                                                  
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var x_post: Cow3;                                                                                  
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow3.x(u: Tid,y: Cow3,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow3.x(t: Tid,x: Cow3,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow3.x[x] := v;                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Cow3.x(u: Tid,y: Cow3,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (30.2): Cow3.x is not Write-Write Stable with respect to Cow3.x (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (30.2): Cow3.x is not Write-Write Stable with respect to Cow3.x (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (30.2): Cow3.x is not Write-Write Stable with respect to Cow3.x (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Cow3.x.Cow3.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow3, y: Cow3)  
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow3._state[x], t);                                                          
 requires isAccessible(Cow3._state[y], u);                                                          
 modifies Cow3.x;                                                                                   
 modifies Cow3.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow3;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var y_pre: Cow3;                                                                                   
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Cow3._lock_mid: [Cow3]Tid;                                                                     
 var x_mid: Cow3;                                                                                   
 var u_mid: Tid;                                                                                    
 var Cow4._state_mid: [Cow4]State;                                                                  
 var $recorded.state_mid: int;                                                                      
 var Cow.x_mid: [Cow]int;                                                                           
 var w_mid: int;                                                                                    
 var Cow4._lock_mid: [Cow4]Tid;                                                                     
 var Cow3.x_mid: [Cow3]int;                                                                         
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var Cow2.x_mid: [Cow2]int;                                                                         
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var y_mid: Cow3;                                                                                   
 var Cow2._state_mid: [Cow2]State;                                                                  
 var Cow3._state_mid: [Cow3]State;                                                                  
 var Cow2._lock_mid: [Cow2]Tid;                                                                     
 var Cow4.x_mid: [Cow4]int;                                                                         
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var y_post: Cow3;                                                                                  
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var x_post: Cow3;                                                                                  
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Cow3.x(t: Tid,x: Cow3,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Cow3.x[x];                                                                                 
 Cow3.x[x] := v;                                                                                    
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.x_mid == Cow.x && Cow._lock_mid == Cow._lock && Cow2._state_mid == Cow2._state && Cow2.x_mid == Cow2.x && Cow2._lock_mid == Cow2._lock && Cow3._state_mid == Cow3._state && Cow3.x_mid == Cow3.x && Cow3._lock_mid == Cow3._lock && Cow4._state_mid == Cow4._state && Cow4.x_mid == Cow4.x && Cow4._lock_mid == Cow4._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Cow3.x(u: Tid,y: Cow3,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Cow3.x[x] := tmpV;                                                                                 
 Cow3.x[y] := w;                                                                                    
 _writeByTPost := WriteEval.Cow3.x(t: Tid,x: Cow3,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (30.2): Cow3.x is not Write-Write Stable with respect to Cow3.x (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Cow3.x.Cow3.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow3, y: Cow3) 
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow3._state[x], t);                                                          
 requires isAccessible(Cow3._state[y], u);                                                          
 modifies Cow3.x;                                                                                   
 modifies Cow3.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow3;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var y_pre: Cow3;                                                                                   
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Cow3._lock_mid: [Cow3]Tid;                                                                     
 var x_mid: Cow3;                                                                                   
 var u_mid: Tid;                                                                                    
 var Cow4._state_mid: [Cow4]State;                                                                  
 var $recorded.state_mid: int;                                                                      
 var Cow.x_mid: [Cow]int;                                                                           
 var w_mid: int;                                                                                    
 var Cow4._lock_mid: [Cow4]Tid;                                                                     
 var Cow3.x_mid: [Cow3]int;                                                                         
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var Cow2.x_mid: [Cow2]int;                                                                         
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var y_mid: Cow3;                                                                                   
 var Cow2._state_mid: [Cow2]State;                                                                  
 var Cow3._state_mid: [Cow3]State;                                                                  
 var Cow2._lock_mid: [Cow2]Tid;                                                                     
 var Cow4.x_mid: [Cow4]int;                                                                         
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var y_post: Cow3;                                                                                  
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var x_post: Cow3;                                                                                  
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow3.x(u: Tid,y: Cow3,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow3.x(t: Tid,x: Cow3,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Cow3.x[x];                                                                                 
 Cow3.x[x] := v;                                                                                    
 assume Cow._state_mid == Cow._state && Cow.x_mid == Cow.x && Cow._lock_mid == Cow._lock && Cow2._state_mid == Cow2._state && Cow2.x_mid == Cow2.x && Cow2._lock_mid == Cow2._lock && Cow3._state_mid == Cow3._state && Cow3.x_mid == Cow3.x && Cow3._lock_mid == Cow3._lock && Cow4._state_mid == Cow4._state && Cow4.x_mid == Cow4.x && Cow4._lock_mid == Cow4._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Cow3.x(u: Tid,y: Cow3,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Cow3.x[x] := tmpV;                                                                                 
 Cow3.x[y] := w;                                                                                    
 _writeByTPost := WriteEval.Cow3.x(t: Tid,x: Cow3,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (30.2): Cow3.x is not Write-Write Stable with respect to Cow3.x (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (30.2): Cow3.x is not Write-Write Stable with respect to Cow3.x (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Cow3.x.Cow3.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow3, y: Cow3)
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow3._state[x], t);                                                          
 requires isAccessible(Cow3._state[y], u);                                                          
 modifies Cow3.x;                                                                                   
 modifies Cow3.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow3;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var y_pre: Cow3;                                                                                   
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var y_post: Cow3;                                                                                  
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var x_post: Cow3;                                                                                  
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Cow3.x(t: Tid,x: Cow3,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Cow3.x(u: Tid,y: Cow3,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow3.x[y] := w;                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Cow3.x(t: Tid,x: Cow3,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (30.2): Cow3.x is not Read-Write Stable with respect to Cow3.x (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (30.2): Cow3.x is not Read-Write Stable with respect to Cow3.x (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (30.2): Cow3.x is not Read-Write Stable with respect to Cow3.x (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Cow3.x.Cow3.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow3, y: Cow3)
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow3._state[x], t);                                                          
 requires isAccessible(Cow3._state[y], u);                                                          
 modifies Cow3.x;                                                                                   
 modifies Cow3.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow3;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var y_pre: Cow3;                                                                                   
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var y_post: Cow3;                                                                                  
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var x_post: Cow3;                                                                                  
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Cow3.x(u: Tid,y: Cow3,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Cow3.x(t: Tid,x: Cow3,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow3.x[x] := v;                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Cow3.x(u: Tid,y: Cow3,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (30.2): Cow3.x is not Write-Read Stable with respect to Cow3.x (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (30.2): Cow3.x is not Write-Read Stable with respect to Cow3.x (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (30.2): Cow3.x is not Write-Read Stable with respect to Cow3.x (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Cow3.x.Cow4.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow3, y: Cow4)  
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow3._state[x], t);                                                          
 requires isAccessible(Cow4._state[y], u);                                                          
 modifies Cow3.x;                                                                                   
 modifies Cow4.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow3;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var y_pre: Cow4;                                                                                   
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var y_post: Cow4;                                                                                  
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var x_post: Cow3;                                                                                  
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow4.x(u: Tid,y: Cow4,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow3.x(t: Tid,x: Cow3,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow3.x[x] := v;                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Cow4.x(u: Tid,y: Cow4,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (38.2): Cow4.x is not Write-Write Stable with respect to Cow3.x (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (38.2): Cow4.x is not Write-Write Stable with respect to Cow3.x (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (38.2): Cow4.x is not Write-Write Stable with respect to Cow3.x (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Cow3.x.Cow4.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow3, y: Cow4)  
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow3._state[x], t);                                                          
 requires isAccessible(Cow4._state[y], u);                                                          
 modifies Cow3.x;                                                                                   
 modifies Cow4.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow3;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var y_pre: Cow4;                                                                                   
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Cow3._lock_mid: [Cow3]Tid;                                                                     
 var x_mid: Cow3;                                                                                   
 var u_mid: Tid;                                                                                    
 var Cow4._state_mid: [Cow4]State;                                                                  
 var $recorded.state_mid: int;                                                                      
 var Cow.x_mid: [Cow]int;                                                                           
 var w_mid: int;                                                                                    
 var Cow4._lock_mid: [Cow4]Tid;                                                                     
 var Cow3.x_mid: [Cow3]int;                                                                         
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var y_mid: Cow4;                                                                                   
 var Cow2.x_mid: [Cow2]int;                                                                         
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var Cow2._state_mid: [Cow2]State;                                                                  
 var Cow3._state_mid: [Cow3]State;                                                                  
 var Cow2._lock_mid: [Cow2]Tid;                                                                     
 var Cow4.x_mid: [Cow4]int;                                                                         
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var y_post: Cow4;                                                                                  
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var x_post: Cow3;                                                                                  
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Cow3.x(t: Tid,x: Cow3,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Cow3.x[x];                                                                                 
 Cow3.x[x] := v;                                                                                    
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.x_mid == Cow.x && Cow._lock_mid == Cow._lock && Cow2._state_mid == Cow2._state && Cow2.x_mid == Cow2.x && Cow2._lock_mid == Cow2._lock && Cow3._state_mid == Cow3._state && Cow3.x_mid == Cow3.x && Cow3._lock_mid == Cow3._lock && Cow4._state_mid == Cow4._state && Cow4.x_mid == Cow4.x && Cow4._lock_mid == Cow4._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Cow4.x(u: Tid,y: Cow4,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Cow3.x[x] := tmpV;                                                                                 
 Cow4.x[y] := w;                                                                                    
 _writeByTPost := WriteEval.Cow3.x(t: Tid,x: Cow3,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (30.2): Cow3.x is not Write-Write Stable with respect to Cow4.x (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Cow3.x.Cow4.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow3, y: Cow4) 
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow3._state[x], t);                                                          
 requires isAccessible(Cow4._state[y], u);                                                          
 modifies Cow3.x;                                                                                   
 modifies Cow4.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow3;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var y_pre: Cow4;                                                                                   
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Cow3._lock_mid: [Cow3]Tid;                                                                     
 var x_mid: Cow3;                                                                                   
 var u_mid: Tid;                                                                                    
 var Cow4._state_mid: [Cow4]State;                                                                  
 var $recorded.state_mid: int;                                                                      
 var Cow.x_mid: [Cow]int;                                                                           
 var w_mid: int;                                                                                    
 var Cow4._lock_mid: [Cow4]Tid;                                                                     
 var Cow3.x_mid: [Cow3]int;                                                                         
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var y_mid: Cow4;                                                                                   
 var Cow2.x_mid: [Cow2]int;                                                                         
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var Cow2._state_mid: [Cow2]State;                                                                  
 var Cow3._state_mid: [Cow3]State;                                                                  
 var Cow2._lock_mid: [Cow2]Tid;                                                                     
 var Cow4.x_mid: [Cow4]int;                                                                         
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var y_post: Cow4;                                                                                  
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var x_post: Cow3;                                                                                  
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow4.x(u: Tid,y: Cow4,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow3.x(t: Tid,x: Cow3,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Cow3.x[x];                                                                                 
 Cow3.x[x] := v;                                                                                    
 assume Cow._state_mid == Cow._state && Cow.x_mid == Cow.x && Cow._lock_mid == Cow._lock && Cow2._state_mid == Cow2._state && Cow2.x_mid == Cow2.x && Cow2._lock_mid == Cow2._lock && Cow3._state_mid == Cow3._state && Cow3.x_mid == Cow3.x && Cow3._lock_mid == Cow3._lock && Cow4._state_mid == Cow4._state && Cow4.x_mid == Cow4.x && Cow4._lock_mid == Cow4._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Cow4.x(u: Tid,y: Cow4,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Cow3.x[x] := tmpV;                                                                                 
 Cow4.x[y] := w;                                                                                    
 _writeByTPost := WriteEval.Cow3.x(t: Tid,x: Cow3,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (30.2): Cow3.x is not Write-Write Stable with respect to Cow4.x (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (30.2): Cow3.x is not Write-Write Stable with respect to Cow4.x (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Cow3.x.Cow4.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow3, y: Cow4)
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow3._state[x], t);                                                          
 requires isAccessible(Cow4._state[y], u);                                                          
 modifies Cow3.x;                                                                                   
 modifies Cow4.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow3;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var y_pre: Cow4;                                                                                   
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var y_post: Cow4;                                                                                  
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var x_post: Cow3;                                                                                  
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Cow3.x(t: Tid,x: Cow3,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Cow4.x(u: Tid,y: Cow4,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow4.x[y] := w;                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Cow3.x(t: Tid,x: Cow3,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (30.2): Cow3.x is not Read-Write Stable with respect to Cow4.x (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (30.2): Cow3.x is not Read-Write Stable with respect to Cow4.x (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (30.2): Cow3.x is not Read-Write Stable with respect to Cow4.x (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Cow3.x.Cow4.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow3, y: Cow4)
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow3._state[x], t);                                                          
 requires isAccessible(Cow4._state[y], u);                                                          
 modifies Cow3.x;                                                                                   
 modifies Cow4.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow3;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var y_pre: Cow4;                                                                                   
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var y_post: Cow4;                                                                                  
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var x_post: Cow3;                                                                                  
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Cow4.x(u: Tid,y: Cow4,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Cow3.x(t: Tid,x: Cow3,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow3.x[x] := v;                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Cow4.x(u: Tid,y: Cow4,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (38.2): Cow4.x is not Write-Read Stable with respect to Cow3.x (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (38.2): Cow4.x is not Write-Read Stable with respect to Cow3.x (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (38.2): Cow4.x is not Write-Read Stable with respect to Cow3.x (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Cow4.x.Cow.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow4, y: Cow)    
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow4._state[x], t);                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Cow4.x;                                                                                   
 modifies Cow.x;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow4;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var y_post: Cow;                                                                                   
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var x_post: Cow4;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow.x(u: Tid,y: Cow,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow4.x(t: Tid,x: Cow4,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow4.x[x] := v;                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Cow.x(u: Tid,y: Cow,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (3.2): Cow.x is not Write-Write Stable with respect to Cow4.x (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (3.2): Cow.x is not Write-Write Stable with respect to Cow4.x (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (3.2): Cow.x is not Write-Write Stable with respect to Cow4.x (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Cow4.x.Cow.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow4, y: Cow)    
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow4._state[x], t);                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Cow4.x;                                                                                   
 modifies Cow.x;                                                                                    
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow4;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var x_mid: Cow4;                                                                                   
 var t_mid: Tid;                                                                                    
 var Cow3._lock_mid: [Cow3]Tid;                                                                     
 var u_mid: Tid;                                                                                    
 var y_mid: Cow;                                                                                    
 var Cow4._state_mid: [Cow4]State;                                                                  
 var $recorded.state_mid: int;                                                                      
 var Cow.x_mid: [Cow]int;                                                                           
 var w_mid: int;                                                                                    
 var Cow4._lock_mid: [Cow4]Tid;                                                                     
 var Cow3.x_mid: [Cow3]int;                                                                         
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var Cow2.x_mid: [Cow2]int;                                                                         
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var Cow2._state_mid: [Cow2]State;                                                                  
 var Cow3._state_mid: [Cow3]State;                                                                  
 var Cow2._lock_mid: [Cow2]Tid;                                                                     
 var Cow4.x_mid: [Cow4]int;                                                                         
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var y_post: Cow;                                                                                   
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var x_post: Cow4;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Cow4.x(t: Tid,x: Cow4,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Cow4.x[x];                                                                                 
 Cow4.x[x] := v;                                                                                    
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.x_mid == Cow.x && Cow._lock_mid == Cow._lock && Cow2._state_mid == Cow2._state && Cow2.x_mid == Cow2.x && Cow2._lock_mid == Cow2._lock && Cow3._state_mid == Cow3._state && Cow3.x_mid == Cow3.x && Cow3._lock_mid == Cow3._lock && Cow4._state_mid == Cow4._state && Cow4.x_mid == Cow4.x && Cow4._lock_mid == Cow4._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Cow.x(u: Tid,y: Cow,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Cow4.x[x] := tmpV;                                                                                 
 Cow.x[y] := w;                                                                                     
 _writeByTPost := WriteEval.Cow4.x(t: Tid,x: Cow4,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (38.2): Cow4.x is not Write-Write Stable with respect to Cow.x (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Cow4.x.Cow.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow4, y: Cow)   
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow4._state[x], t);                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Cow4.x;                                                                                   
 modifies Cow.x;                                                                                    
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow4;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var x_mid: Cow4;                                                                                   
 var t_mid: Tid;                                                                                    
 var Cow3._lock_mid: [Cow3]Tid;                                                                     
 var u_mid: Tid;                                                                                    
 var y_mid: Cow;                                                                                    
 var Cow4._state_mid: [Cow4]State;                                                                  
 var $recorded.state_mid: int;                                                                      
 var Cow.x_mid: [Cow]int;                                                                           
 var w_mid: int;                                                                                    
 var Cow4._lock_mid: [Cow4]Tid;                                                                     
 var Cow3.x_mid: [Cow3]int;                                                                         
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var Cow2.x_mid: [Cow2]int;                                                                         
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var Cow2._state_mid: [Cow2]State;                                                                  
 var Cow3._state_mid: [Cow3]State;                                                                  
 var Cow2._lock_mid: [Cow2]Tid;                                                                     
 var Cow4.x_mid: [Cow4]int;                                                                         
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var y_post: Cow;                                                                                   
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var x_post: Cow4;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow.x(u: Tid,y: Cow,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow4.x(t: Tid,x: Cow4,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Cow4.x[x];                                                                                 
 Cow4.x[x] := v;                                                                                    
 assume Cow._state_mid == Cow._state && Cow.x_mid == Cow.x && Cow._lock_mid == Cow._lock && Cow2._state_mid == Cow2._state && Cow2.x_mid == Cow2.x && Cow2._lock_mid == Cow2._lock && Cow3._state_mid == Cow3._state && Cow3.x_mid == Cow3.x && Cow3._lock_mid == Cow3._lock && Cow4._state_mid == Cow4._state && Cow4.x_mid == Cow4.x && Cow4._lock_mid == Cow4._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Cow.x(u: Tid,y: Cow,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Cow4.x[x] := tmpV;                                                                                 
 Cow.x[y] := w;                                                                                     
 _writeByTPost := WriteEval.Cow4.x(t: Tid,x: Cow4,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (38.2): Cow4.x is not Write-Write Stable with respect to Cow.x (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (38.2): Cow4.x is not Write-Write Stable with respect to Cow.x (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Cow4.x.Cow.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow4, y: Cow)  
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow4._state[x], t);                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Cow4.x;                                                                                   
 modifies Cow.x;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow4;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var y_post: Cow;                                                                                   
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var x_post: Cow4;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Cow4.x(t: Tid,x: Cow4,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Cow.x(u: Tid,y: Cow,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow.x[y] := w;                                                                                     
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Cow4.x(t: Tid,x: Cow4,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (38.2): Cow4.x is not Read-Write Stable with respect to Cow.x (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (38.2): Cow4.x is not Read-Write Stable with respect to Cow.x (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (38.2): Cow4.x is not Read-Write Stable with respect to Cow.x (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Cow4.x.Cow.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow4, y: Cow)  
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow4._state[x], t);                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Cow4.x;                                                                                   
 modifies Cow.x;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow4;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var y_post: Cow;                                                                                   
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var x_post: Cow4;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Cow.x(u: Tid,y: Cow,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Cow4.x(t: Tid,x: Cow4,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow4.x[x] := v;                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Cow.x(u: Tid,y: Cow,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (3.2): Cow.x is not Write-Read Stable with respect to Cow4.x (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (3.2): Cow.x is not Write-Read Stable with respect to Cow4.x (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (3.2): Cow.x is not Write-Read Stable with respect to Cow4.x (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Cow4.x.Cow2.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow4, y: Cow2)  
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow4._state[x], t);                                                          
 requires isAccessible(Cow2._state[y], u);                                                          
 modifies Cow4.x;                                                                                   
 modifies Cow2.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow4;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var y_pre: Cow2;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var y_post: Cow2;                                                                                  
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var x_post: Cow4;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow2.x(u: Tid,y: Cow2,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow4.x(t: Tid,x: Cow4,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow4.x[x] := v;                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Cow2.x(u: Tid,y: Cow2,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (22.2): Cow2.x is not Write-Write Stable with respect to Cow4.x (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (22.2): Cow2.x is not Write-Write Stable with respect to Cow4.x (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (22.2): Cow2.x is not Write-Write Stable with respect to Cow4.x (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Cow4.x.Cow2.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow4, y: Cow2)  
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow4._state[x], t);                                                          
 requires isAccessible(Cow2._state[y], u);                                                          
 modifies Cow4.x;                                                                                   
 modifies Cow2.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow4;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var y_pre: Cow2;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var x_mid: Cow4;                                                                                   
 var t_mid: Tid;                                                                                    
 var Cow3._lock_mid: [Cow3]Tid;                                                                     
 var u_mid: Tid;                                                                                    
 var Cow4._state_mid: [Cow4]State;                                                                  
 var $recorded.state_mid: int;                                                                      
 var Cow.x_mid: [Cow]int;                                                                           
 var w_mid: int;                                                                                    
 var Cow4._lock_mid: [Cow4]Tid;                                                                     
 var Cow3.x_mid: [Cow3]int;                                                                         
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var Cow2.x_mid: [Cow2]int;                                                                         
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var Cow2._state_mid: [Cow2]State;                                                                  
 var Cow3._state_mid: [Cow3]State;                                                                  
 var y_mid: Cow2;                                                                                   
 var Cow2._lock_mid: [Cow2]Tid;                                                                     
 var Cow4.x_mid: [Cow4]int;                                                                         
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var y_post: Cow2;                                                                                  
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var x_post: Cow4;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Cow4.x(t: Tid,x: Cow4,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Cow4.x[x];                                                                                 
 Cow4.x[x] := v;                                                                                    
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.x_mid == Cow.x && Cow._lock_mid == Cow._lock && Cow2._state_mid == Cow2._state && Cow2.x_mid == Cow2.x && Cow2._lock_mid == Cow2._lock && Cow3._state_mid == Cow3._state && Cow3.x_mid == Cow3.x && Cow3._lock_mid == Cow3._lock && Cow4._state_mid == Cow4._state && Cow4.x_mid == Cow4.x && Cow4._lock_mid == Cow4._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Cow2.x(u: Tid,y: Cow2,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Cow4.x[x] := tmpV;                                                                                 
 Cow2.x[y] := w;                                                                                    
 _writeByTPost := WriteEval.Cow4.x(t: Tid,x: Cow4,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (38.2): Cow4.x is not Write-Write Stable with respect to Cow2.x (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Cow4.x.Cow2.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow4, y: Cow2) 
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow4._state[x], t);                                                          
 requires isAccessible(Cow2._state[y], u);                                                          
 modifies Cow4.x;                                                                                   
 modifies Cow2.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow4;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var y_pre: Cow2;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var x_mid: Cow4;                                                                                   
 var t_mid: Tid;                                                                                    
 var Cow3._lock_mid: [Cow3]Tid;                                                                     
 var u_mid: Tid;                                                                                    
 var Cow4._state_mid: [Cow4]State;                                                                  
 var $recorded.state_mid: int;                                                                      
 var Cow.x_mid: [Cow]int;                                                                           
 var w_mid: int;                                                                                    
 var Cow4._lock_mid: [Cow4]Tid;                                                                     
 var Cow3.x_mid: [Cow3]int;                                                                         
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var Cow2.x_mid: [Cow2]int;                                                                         
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var Cow2._state_mid: [Cow2]State;                                                                  
 var Cow3._state_mid: [Cow3]State;                                                                  
 var y_mid: Cow2;                                                                                   
 var Cow2._lock_mid: [Cow2]Tid;                                                                     
 var Cow4.x_mid: [Cow4]int;                                                                         
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var y_post: Cow2;                                                                                  
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var x_post: Cow4;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow2.x(u: Tid,y: Cow2,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow4.x(t: Tid,x: Cow4,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Cow4.x[x];                                                                                 
 Cow4.x[x] := v;                                                                                    
 assume Cow._state_mid == Cow._state && Cow.x_mid == Cow.x && Cow._lock_mid == Cow._lock && Cow2._state_mid == Cow2._state && Cow2.x_mid == Cow2.x && Cow2._lock_mid == Cow2._lock && Cow3._state_mid == Cow3._state && Cow3.x_mid == Cow3.x && Cow3._lock_mid == Cow3._lock && Cow4._state_mid == Cow4._state && Cow4.x_mid == Cow4.x && Cow4._lock_mid == Cow4._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Cow2.x(u: Tid,y: Cow2,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Cow4.x[x] := tmpV;                                                                                 
 Cow2.x[y] := w;                                                                                    
 _writeByTPost := WriteEval.Cow4.x(t: Tid,x: Cow4,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (38.2): Cow4.x is not Write-Write Stable with respect to Cow2.x (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (38.2): Cow4.x is not Write-Write Stable with respect to Cow2.x (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Cow4.x.Cow2.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow4, y: Cow2)
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow4._state[x], t);                                                          
 requires isAccessible(Cow2._state[y], u);                                                          
 modifies Cow4.x;                                                                                   
 modifies Cow2.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow4;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var y_pre: Cow2;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var y_post: Cow2;                                                                                  
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var x_post: Cow4;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Cow4.x(t: Tid,x: Cow4,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Cow2.x(u: Tid,y: Cow2,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow2.x[y] := w;                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Cow4.x(t: Tid,x: Cow4,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (38.2): Cow4.x is not Read-Write Stable with respect to Cow2.x (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (38.2): Cow4.x is not Read-Write Stable with respect to Cow2.x (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (38.2): Cow4.x is not Read-Write Stable with respect to Cow2.x (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Cow4.x.Cow2.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow4, y: Cow2)
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow4._state[x], t);                                                          
 requires isAccessible(Cow2._state[y], u);                                                          
 modifies Cow4.x;                                                                                   
 modifies Cow2.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow4;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var y_pre: Cow2;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var y_post: Cow2;                                                                                  
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var x_post: Cow4;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Cow2.x(u: Tid,y: Cow2,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Cow4.x(t: Tid,x: Cow4,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow4.x[x] := v;                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Cow2.x(u: Tid,y: Cow2,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (22.2): Cow2.x is not Write-Read Stable with respect to Cow4.x (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (22.2): Cow2.x is not Write-Read Stable with respect to Cow4.x (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (22.2): Cow2.x is not Write-Read Stable with respect to Cow4.x (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Cow4.x.Cow3.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow4, y: Cow3)  
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow4._state[x], t);                                                          
 requires isAccessible(Cow3._state[y], u);                                                          
 modifies Cow4.x;                                                                                   
 modifies Cow3.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow4;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var y_pre: Cow3;                                                                                   
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var y_post: Cow3;                                                                                  
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var x_post: Cow4;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow3.x(u: Tid,y: Cow3,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow4.x(t: Tid,x: Cow4,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow4.x[x] := v;                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Cow3.x(u: Tid,y: Cow3,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (30.2): Cow3.x is not Write-Write Stable with respect to Cow4.x (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (30.2): Cow3.x is not Write-Write Stable with respect to Cow4.x (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (30.2): Cow3.x is not Write-Write Stable with respect to Cow4.x (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Cow4.x.Cow3.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow4, y: Cow3)  
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow4._state[x], t);                                                          
 requires isAccessible(Cow3._state[y], u);                                                          
 modifies Cow4.x;                                                                                   
 modifies Cow3.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow4;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var y_pre: Cow3;                                                                                   
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var x_mid: Cow4;                                                                                   
 var t_mid: Tid;                                                                                    
 var Cow3._lock_mid: [Cow3]Tid;                                                                     
 var u_mid: Tid;                                                                                    
 var Cow4._state_mid: [Cow4]State;                                                                  
 var $recorded.state_mid: int;                                                                      
 var Cow.x_mid: [Cow]int;                                                                           
 var w_mid: int;                                                                                    
 var Cow4._lock_mid: [Cow4]Tid;                                                                     
 var Cow3.x_mid: [Cow3]int;                                                                         
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var Cow2.x_mid: [Cow2]int;                                                                         
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var y_mid: Cow3;                                                                                   
 var Cow2._state_mid: [Cow2]State;                                                                  
 var Cow3._state_mid: [Cow3]State;                                                                  
 var Cow2._lock_mid: [Cow2]Tid;                                                                     
 var Cow4.x_mid: [Cow4]int;                                                                         
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var y_post: Cow3;                                                                                  
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var x_post: Cow4;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Cow4.x(t: Tid,x: Cow4,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Cow4.x[x];                                                                                 
 Cow4.x[x] := v;                                                                                    
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.x_mid == Cow.x && Cow._lock_mid == Cow._lock && Cow2._state_mid == Cow2._state && Cow2.x_mid == Cow2.x && Cow2._lock_mid == Cow2._lock && Cow3._state_mid == Cow3._state && Cow3.x_mid == Cow3.x && Cow3._lock_mid == Cow3._lock && Cow4._state_mid == Cow4._state && Cow4.x_mid == Cow4.x && Cow4._lock_mid == Cow4._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Cow3.x(u: Tid,y: Cow3,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Cow4.x[x] := tmpV;                                                                                 
 Cow3.x[y] := w;                                                                                    
 _writeByTPost := WriteEval.Cow4.x(t: Tid,x: Cow4,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (38.2): Cow4.x is not Write-Write Stable with respect to Cow3.x (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Cow4.x.Cow3.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow4, y: Cow3) 
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow4._state[x], t);                                                          
 requires isAccessible(Cow3._state[y], u);                                                          
 modifies Cow4.x;                                                                                   
 modifies Cow3.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow4;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var y_pre: Cow3;                                                                                   
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var x_mid: Cow4;                                                                                   
 var t_mid: Tid;                                                                                    
 var Cow3._lock_mid: [Cow3]Tid;                                                                     
 var u_mid: Tid;                                                                                    
 var Cow4._state_mid: [Cow4]State;                                                                  
 var $recorded.state_mid: int;                                                                      
 var Cow.x_mid: [Cow]int;                                                                           
 var w_mid: int;                                                                                    
 var Cow4._lock_mid: [Cow4]Tid;                                                                     
 var Cow3.x_mid: [Cow3]int;                                                                         
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var Cow2.x_mid: [Cow2]int;                                                                         
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var y_mid: Cow3;                                                                                   
 var Cow2._state_mid: [Cow2]State;                                                                  
 var Cow3._state_mid: [Cow3]State;                                                                  
 var Cow2._lock_mid: [Cow2]Tid;                                                                     
 var Cow4.x_mid: [Cow4]int;                                                                         
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var y_post: Cow3;                                                                                  
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var x_post: Cow4;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow3.x(u: Tid,y: Cow3,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow4.x(t: Tid,x: Cow4,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Cow4.x[x];                                                                                 
 Cow4.x[x] := v;                                                                                    
 assume Cow._state_mid == Cow._state && Cow.x_mid == Cow.x && Cow._lock_mid == Cow._lock && Cow2._state_mid == Cow2._state && Cow2.x_mid == Cow2.x && Cow2._lock_mid == Cow2._lock && Cow3._state_mid == Cow3._state && Cow3.x_mid == Cow3.x && Cow3._lock_mid == Cow3._lock && Cow4._state_mid == Cow4._state && Cow4.x_mid == Cow4.x && Cow4._lock_mid == Cow4._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Cow3.x(u: Tid,y: Cow3,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Cow4.x[x] := tmpV;                                                                                 
 Cow3.x[y] := w;                                                                                    
 _writeByTPost := WriteEval.Cow4.x(t: Tid,x: Cow4,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (38.2): Cow4.x is not Write-Write Stable with respect to Cow3.x (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (38.2): Cow4.x is not Write-Write Stable with respect to Cow3.x (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Cow4.x.Cow3.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow4, y: Cow3)
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow4._state[x], t);                                                          
 requires isAccessible(Cow3._state[y], u);                                                          
 modifies Cow4.x;                                                                                   
 modifies Cow3.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow4;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var y_pre: Cow3;                                                                                   
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var y_post: Cow3;                                                                                  
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var x_post: Cow4;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Cow4.x(t: Tid,x: Cow4,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Cow3.x(u: Tid,y: Cow3,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow3.x[y] := w;                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Cow4.x(t: Tid,x: Cow4,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (38.2): Cow4.x is not Read-Write Stable with respect to Cow3.x (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (38.2): Cow4.x is not Read-Write Stable with respect to Cow3.x (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (38.2): Cow4.x is not Read-Write Stable with respect to Cow3.x (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Cow4.x.Cow3.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow4, y: Cow3)
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow4._state[x], t);                                                          
 requires isAccessible(Cow3._state[y], u);                                                          
 modifies Cow4.x;                                                                                   
 modifies Cow3.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow4;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var y_pre: Cow3;                                                                                   
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var y_post: Cow3;                                                                                  
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var x_post: Cow4;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Cow3.x(u: Tid,y: Cow3,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Cow4.x(t: Tid,x: Cow4,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow4.x[x] := v;                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Cow3.x(u: Tid,y: Cow3,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (30.2): Cow3.x is not Write-Read Stable with respect to Cow4.x (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (30.2): Cow3.x is not Write-Read Stable with respect to Cow4.x (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (30.2): Cow3.x is not Write-Read Stable with respect to Cow4.x (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Cow4.x.Cow4.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow4, y: Cow4)  
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow4._state[x], t);                                                          
 requires isAccessible(Cow4._state[y], u);                                                          
 modifies Cow4.x;                                                                                   
 modifies Cow4.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow4;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var y_pre: Cow4;                                                                                   
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var y_post: Cow4;                                                                                  
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var x_post: Cow4;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow4.x(u: Tid,y: Cow4,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow4.x(t: Tid,x: Cow4,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow4.x[x] := v;                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Cow4.x(u: Tid,y: Cow4,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (38.2): Cow4.x is not Write-Write Stable with respect to Cow4.x (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (38.2): Cow4.x is not Write-Write Stable with respect to Cow4.x (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (38.2): Cow4.x is not Write-Write Stable with respect to Cow4.x (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Cow4.x.Cow4.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow4, y: Cow4)  
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow4._state[x], t);                                                          
 requires isAccessible(Cow4._state[y], u);                                                          
 modifies Cow4.x;                                                                                   
 modifies Cow4.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow4;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var y_pre: Cow4;                                                                                   
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var x_mid: Cow4;                                                                                   
 var t_mid: Tid;                                                                                    
 var Cow3._lock_mid: [Cow3]Tid;                                                                     
 var u_mid: Tid;                                                                                    
 var Cow4._state_mid: [Cow4]State;                                                                  
 var $recorded.state_mid: int;                                                                      
 var Cow.x_mid: [Cow]int;                                                                           
 var w_mid: int;                                                                                    
 var Cow4._lock_mid: [Cow4]Tid;                                                                     
 var Cow3.x_mid: [Cow3]int;                                                                         
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var y_mid: Cow4;                                                                                   
 var Cow2.x_mid: [Cow2]int;                                                                         
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var Cow2._state_mid: [Cow2]State;                                                                  
 var Cow3._state_mid: [Cow3]State;                                                                  
 var Cow2._lock_mid: [Cow2]Tid;                                                                     
 var Cow4.x_mid: [Cow4]int;                                                                         
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var y_post: Cow4;                                                                                  
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var x_post: Cow4;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Cow4.x(t: Tid,x: Cow4,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Cow4.x[x];                                                                                 
 Cow4.x[x] := v;                                                                                    
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.x_mid == Cow.x && Cow._lock_mid == Cow._lock && Cow2._state_mid == Cow2._state && Cow2.x_mid == Cow2.x && Cow2._lock_mid == Cow2._lock && Cow3._state_mid == Cow3._state && Cow3.x_mid == Cow3.x && Cow3._lock_mid == Cow3._lock && Cow4._state_mid == Cow4._state && Cow4.x_mid == Cow4.x && Cow4._lock_mid == Cow4._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Cow4.x(u: Tid,y: Cow4,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Cow4.x[x] := tmpV;                                                                                 
 Cow4.x[y] := w;                                                                                    
 _writeByTPost := WriteEval.Cow4.x(t: Tid,x: Cow4,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (38.2): Cow4.x is not Write-Write Stable with respect to Cow4.x (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Cow4.x.Cow4.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow4, y: Cow4) 
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow4._state[x], t);                                                          
 requires isAccessible(Cow4._state[y], u);                                                          
 modifies Cow4.x;                                                                                   
 modifies Cow4.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow4;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var y_pre: Cow4;                                                                                   
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var x_mid: Cow4;                                                                                   
 var t_mid: Tid;                                                                                    
 var Cow3._lock_mid: [Cow3]Tid;                                                                     
 var u_mid: Tid;                                                                                    
 var Cow4._state_mid: [Cow4]State;                                                                  
 var $recorded.state_mid: int;                                                                      
 var Cow.x_mid: [Cow]int;                                                                           
 var w_mid: int;                                                                                    
 var Cow4._lock_mid: [Cow4]Tid;                                                                     
 var Cow3.x_mid: [Cow3]int;                                                                         
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var y_mid: Cow4;                                                                                   
 var Cow2.x_mid: [Cow2]int;                                                                         
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var Cow2._state_mid: [Cow2]State;                                                                  
 var Cow3._state_mid: [Cow3]State;                                                                  
 var Cow2._lock_mid: [Cow2]Tid;                                                                     
 var Cow4.x_mid: [Cow4]int;                                                                         
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var y_post: Cow4;                                                                                  
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var x_post: Cow4;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow4.x(u: Tid,y: Cow4,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow4.x(t: Tid,x: Cow4,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Cow4.x[x];                                                                                 
 Cow4.x[x] := v;                                                                                    
 assume Cow._state_mid == Cow._state && Cow.x_mid == Cow.x && Cow._lock_mid == Cow._lock && Cow2._state_mid == Cow2._state && Cow2.x_mid == Cow2.x && Cow2._lock_mid == Cow2._lock && Cow3._state_mid == Cow3._state && Cow3.x_mid == Cow3.x && Cow3._lock_mid == Cow3._lock && Cow4._state_mid == Cow4._state && Cow4.x_mid == Cow4.x && Cow4._lock_mid == Cow4._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Cow4.x(u: Tid,y: Cow4,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Cow4.x[x] := tmpV;                                                                                 
 Cow4.x[y] := w;                                                                                    
 _writeByTPost := WriteEval.Cow4.x(t: Tid,x: Cow4,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (38.2): Cow4.x is not Write-Write Stable with respect to Cow4.x (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (38.2): Cow4.x is not Write-Write Stable with respect to Cow4.x (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Cow4.x.Cow4.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow4, y: Cow4)
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow4._state[x], t);                                                          
 requires isAccessible(Cow4._state[y], u);                                                          
 modifies Cow4.x;                                                                                   
 modifies Cow4.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow4;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var y_pre: Cow4;                                                                                   
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var y_post: Cow4;                                                                                  
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var x_post: Cow4;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Cow4.x(t: Tid,x: Cow4,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Cow4.x(u: Tid,y: Cow4,w: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow4.x[y] := w;                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Cow4.x(t: Tid,x: Cow4,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (38.2): Cow4.x is not Read-Write Stable with respect to Cow4.x (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (38.2): Cow4.x is not Read-Write Stable with respect to Cow4.x (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (38.2): Cow4.x is not Read-Write Stable with respect to Cow4.x (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Cow4.x.Cow4.x(t: Tid, u: Tid, v: int, w: int, w0: int, x: Cow4, y: Cow4)
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow4._state[x], t);                                                          
 requires isAccessible(Cow4._state[y], u);                                                          
 modifies Cow4.x;                                                                                   
 modifies Cow4.x;                                                                                   
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Cow3._lock_pre: [Cow3]Tid;                                                                     
 var v_pre: int;                                                                                    
 var x_pre: Cow4;                                                                                   
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow3._state_pre: [Cow3]State;                                                                  
 var Cow4._state_pre: [Cow4]State;                                                                  
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Cow2._lock_pre: [Cow2]Tid;                                                                     
 var y_pre: Cow4;                                                                                   
 var Cow2._state_pre: [Cow2]State;                                                                  
 var Cow.x_pre: [Cow]int;                                                                           
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow4.x_pre: [Cow4]int;                                                                         
 var $pc_pre: Phase;                                                                                
 var Cow3.x_pre: [Cow3]int;                                                                         
 var Cow2.x_pre: [Cow2]int;                                                                         
 var t_pre: Tid;                                                                                    
 var Cow4._lock_pre: [Cow4]Tid;                                                                     
                                                                                                    
 var Cow2._lock_post: [Cow2]Tid;                                                                    
 var y_post: Cow4;                                                                                  
 var $recorded.state_post: int;                                                                     
 var Cow3.x_post: [Cow3]int;                                                                        
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow4._lock_post: [Cow4]Tid;                                                                    
 var Cow3._lock_post: [Cow3]Tid;                                                                    
 var $pc_post: Phase;                                                                               
 var Cow4.x_post: [Cow4]int;                                                                        
 var Cow._state_post: [Cow]State;                                                                   
 var Cow2.x_post: [Cow2]int;                                                                        
 var Cow.x_post: [Cow]int;                                                                          
 var Cow2._state_post: [Cow2]State;                                                                 
 var Cow._lock_post: [Cow]Tid;                                                                      
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Cow4._state_post: [Cow4]State;                                                                 
 var Cow3._state_post: [Cow3]State;                                                                 
 var x_post: Cow4;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Cow4.x(u: Tid,y: Cow4,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Cow4.x(t: Tid,x: Cow4,v: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow4.x[x] := v;                                                                                    
 assume Cow._state_post == Cow._state && Cow.x_post == Cow.x && Cow._lock_post == Cow._lock && Cow2._state_post == Cow2._state && Cow2.x_post == Cow2.x && Cow2._lock_post == Cow2._lock && Cow3._state_post == Cow3._state && Cow3.x_post == Cow3.x && Cow3._lock_post == Cow3._lock && Cow4._state_post == Cow4._state && Cow4.x_post == Cow4.x && Cow4._lock_post == Cow4._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Cow4.x(u: Tid,y: Cow4,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (38.2): Cow4.x is not Write-Read Stable with respect to Cow4.x (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (38.2): Cow4.x is not Write-Read Stable with respect to Cow4.x (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (38.2): Cow4.x is not Write-Read Stable with respect to Cow4.x (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
procedure Yield(tid: Tid);                                                                          
requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
requires ValidTid(tid);                                                                             
modifies Cow._state;                                                                                
modifies Cow.x;                                                                                     
modifies Cow._lock;                                                                                 
modifies Cow2._state;                                                                               
modifies Cow2.x;                                                                                    
modifies Cow2._lock;                                                                                
modifies Cow3._state;                                                                               
modifies Cow3.x;                                                                                    
modifies Cow3._lock;                                                                                
modifies Cow4._state;                                                                               
modifies Cow4.x;                                                                                    
modifies Cow4._lock;                                                                                
ensures StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
ensures Y(tid , old(Cow._state), old(Cow.x), old(Cow._lock), old(Cow2._state), old(Cow2.x), old(Cow2._lock), old(Cow3._state), old(Cow3.x), old(Cow3._lock), old(Cow4._state), old(Cow4.x), old(Cow4._lock) , Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
                                                                                                    
// Cow.x:                                                                                           
                                                                                                    
function {:inline} Y_Cow.x(tid : Tid, this: Cow, newValue: int , Cow._state: [Cow]State, Cow.x: [Cow]int, Cow._lock: [Cow]Tid, Cow2._state: [Cow2]State, Cow2.x: [Cow2]int, Cow2._lock: [Cow2]Tid, Cow3._state: [Cow3]State, Cow3.x: [Cow3]int, Cow3._lock: [Cow3]Tid, Cow4._state: [Cow4]State, Cow4.x: [Cow4]int, Cow4._lock: [Cow4]Tid): bool
{                                                                                                   
 ((isAccessible(Cow._state[this], tid) && leq(m#moverPath(ReadEval.Cow.x(tid: Tid,this: Cow,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock)), _R)) ==> (Cow.x[this] == newValue))
 &&((newValue>=Cow.x[this]))                                                                        
                                                                                                    
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_Cow.x(tid : Tid, this: Cow, newValue: int , Cow._state: [Cow]State, Cow.x: [Cow]int, Cow._lock: [Cow]Tid, Cow2._state: [Cow2]State, Cow2.x: [Cow2]int, Cow2._lock: [Cow2]Tid, Cow3._state: [Cow3]State, Cow3.x: [Cow3]int, Cow3._lock: [Cow3]Tid, Cow4._state: [Cow4]State, Cow4.x: [Cow4]int, Cow4._lock: [Cow4]Tid): bool
{                                                                                                   
 true                                                                                               
 &&((newValue>=Cow.x[this]))                                                                        
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_Cow.x.Subsumes.W(tid : Tid, u : Tid, this: Cow, newValue: int , Cow._state: [Cow]State, Cow.x: [Cow]int, Cow._lock: [Cow]Tid, Cow2._state: [Cow2]State, Cow2.x: [Cow2]int, Cow2._lock: [Cow2]Tid, Cow3._state: [Cow3]State, Cow3.x: [Cow3]int, Cow3._lock: [Cow3]Tid, Cow4._state: [Cow4]State, Cow4.x: [Cow4]int, Cow4._lock: [Cow4]Tid)
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Cow4.x_yield: [Cow4]int;                                                                        
var Cow._lock_yield: [Cow]Tid;                                                                      
var Cow3._state_yield: [Cow3]State;                                                                 
var tid_yield: Tid;                                                                                 
var Cow4._state_yield: [Cow4]State;                                                                 
var this_yield: Cow;                                                                                
var Cow4._lock_yield: [Cow4]Tid;                                                                    
var $pc_yield: Phase;                                                                               
var newValue_yield: int;                                                                            
var Cow3.x_yield: [Cow3]int;                                                                        
var Cow2._lock_yield: [Cow2]Tid;                                                                    
var u_yield: Tid;                                                                                   
var Cow._state_yield: [Cow]State;                                                                   
var Cow2.x_yield: [Cow2]int;                                                                        
var Cow2._state_yield: [Cow2]State;                                                                 
var Cow.x_yield: [Cow]int;                                                                          
var Cow3._lock_yield: [Cow3]Tid;                                                                    
var $recorded.state_yield: int;                                                                     
                                                                                                    
 assume isAccessible(Cow._state[this], tid);                                                        
 assume isAccessible(Cow._state[this], u);                                                          
 assume !isError(m#moverPath(WriteEval.Cow.x(u: Tid,this: Cow,newValue: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock)));
                                                                                                    
assume Cow._state_yield == Cow._state && Cow.x_yield == Cow.x && Cow._lock_yield == Cow._lock && Cow2._state_yield == Cow2._state && Cow2.x_yield == Cow2.x && Cow2._lock_yield == Cow2._lock && Cow3._state_yield == Cow3._state && Cow3.x_yield == Cow3.x && Cow3._lock_yield == Cow3._lock && Cow4._state_yield == Cow4._state && Cow4.x_yield == Cow4.x && Cow4._lock_yield == Cow4._lock && u_yield == u && newValue_yield == newValue && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Cow.x(tid, this, newValue , Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
}                                                                                                   
                                                                                                    
procedure Y_Cow.x.Reflexive(tid : Tid, this: Cow , Cow._state: [Cow]State, Cow.x: [Cow]int, Cow._lock: [Cow]Tid, Cow2._state: [Cow2]State, Cow2.x: [Cow2]int, Cow2._lock: [Cow2]Tid, Cow3._state: [Cow3]State, Cow3.x: [Cow3]int, Cow3._lock: [Cow3]Tid, Cow4._state: [Cow4]State, Cow4.x: [Cow4]int, Cow4._lock: [Cow4]Tid)
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Cow4.x_yield: [Cow4]int;                                                                        
var Cow._lock_yield: [Cow]Tid;                                                                      
var Cow3._state_yield: [Cow3]State;                                                                 
var tid_yield: Tid;                                                                                 
var Cow4._state_yield: [Cow4]State;                                                                 
var this_yield: Cow;                                                                                
var Cow4._lock_yield: [Cow4]Tid;                                                                    
var $pc_yield: Phase;                                                                               
var Cow3.x_yield: [Cow3]int;                                                                        
var Cow2._lock_yield: [Cow2]Tid;                                                                    
var Cow._state_yield: [Cow]State;                                                                   
var Cow2.x_yield: [Cow2]int;                                                                        
var Cow2._state_yield: [Cow2]State;                                                                 
var Cow.x_yield: [Cow]int;                                                                          
var Cow3._lock_yield: [Cow3]Tid;                                                                    
var $recorded.state_yield: int;                                                                     
                                                                                                    
 assume isAccessible(Cow._state[this], tid);                                                        
assume Cow._state_yield == Cow._state && Cow.x_yield == Cow.x && Cow._lock_yield == Cow._lock && Cow2._state_yield == Cow2._state && Cow2.x_yield == Cow2.x && Cow2._lock_yield == Cow2._lock && Cow3._state_yield == Cow3._state && Cow3.x_yield == Cow3.x && Cow3._lock_yield == Cow3._lock && Cow4._state_yield == Cow4._state && Cow4.x_yield == Cow4.x && Cow4._lock_yield == Cow4._lock && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Cow.x(tid, this, Cow.x[this] , Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
}                                                                                                   
                                                                                                    
procedure Y_Cow.x.Transitive(tid : Tid, this: Cow, newValue : int , Cow._state: [Cow]State, Cow.x: [Cow]int, Cow._lock: [Cow]Tid, Cow2._state: [Cow2]State, Cow2.x: [Cow2]int, Cow2._lock: [Cow2]Tid, Cow3._state: [Cow3]State, Cow3.x: [Cow3]int, Cow3._lock: [Cow3]Tid, Cow4._state: [Cow4]State, Cow4.x: [Cow4]int, Cow4._lock: [Cow4]Tid , Cow._state_p: [Cow]State, Cow.x_p: [Cow]int, Cow._lock_p: [Cow]Tid, Cow2._state_p: [Cow2]State, Cow2.x_p: [Cow2]int, Cow2._lock_p: [Cow2]Tid, Cow3._state_p: [Cow3]State, Cow3.x_p: [Cow3]int, Cow3._lock_p: [Cow3]Tid, Cow4._state_p: [Cow4]State, Cow4.x_p: [Cow4]int, Cow4._lock_p: [Cow4]Tid)
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires StateInvariant(Cow._state_p, Cow.x_p, Cow._lock_p, Cow2._state_p, Cow2.x_p, Cow2._lock_p, Cow3._state_p, Cow3.x_p, Cow3._lock_p, Cow4._state_p, Cow4.x_p, Cow4._lock_p);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Cow3._lock_pre: [Cow3]Tid;                                                                      
var Cow._lock_pre: [Cow]Tid;                                                                        
var Cow3._state_pre: [Cow3]State;                                                                   
var Cow4._state_pre: [Cow4]State;                                                                   
var $recorded.state_pre: int;                                                                       
var Cow2._lock_pre: [Cow2]Tid;                                                                      
var newValue_pre: int;                                                                              
var Cow2._state_pre: [Cow2]State;                                                                   
var Cow.x_pre: [Cow]int;                                                                            
var Cow._state_pre: [Cow]State;                                                                     
var tid_pre: Tid;                                                                                   
var Cow4.x_pre: [Cow4]int;                                                                          
var $pc_pre: Phase;                                                                                 
var Cow3.x_pre: [Cow3]int;                                                                          
var this_pre: Cow;                                                                                  
var Cow2.x_pre: [Cow2]int;                                                                          
var Cow4._lock_pre: [Cow4]Tid;                                                                      
                                                                                                    
var Cow2._lock_post: [Cow2]Tid;                                                                     
var $recorded.state_post: int;                                                                      
var Cow3.x_post: [Cow3]int;                                                                         
var Cow4._lock_post: [Cow4]Tid;                                                                     
var Cow3._lock_post: [Cow3]Tid;                                                                     
var newValue_post: int;                                                                             
var $pc_post: Phase;                                                                                
var Cow4.x_post: [Cow4]int;                                                                         
var Cow._state_post: [Cow]State;                                                                    
var Cow2.x_post: [Cow2]int;                                                                         
var tid_post: Tid;                                                                                  
var Cow.x_post: [Cow]int;                                                                           
var Cow2._state_post: [Cow2]State;                                                                  
var Cow._lock_post: [Cow]Tid;                                                                       
var this_post: Cow;                                                                                 
var Cow4._state_post: [Cow4]State;                                                                  
var Cow3._state_post: [Cow3]State;                                                                  
                                                                                                    
assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(Cow._state[this], tid);                                                        
 assume Y(tid , Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock , Cow._state_p, Cow.x_p, Cow._lock_p, Cow2._state_p, Cow2.x_p, Cow2._lock_p, Cow3._state_p, Cow3.x_p, Cow3._lock_p, Cow4._state_p, Cow4.x_p, Cow4._lock_p);
 assume Y_Cow.x(tid, this, newValue , Cow._state_p, Cow.x_p, Cow._lock_p, Cow2._state_p, Cow2.x_p, Cow2._lock_p, Cow3._state_p, Cow3.x_p, Cow3._lock_p, Cow4._state_p, Cow4.x_p, Cow4._lock_p);
assume Cow._state_post == Cow._state_p && Cow.x_post == Cow.x_p && Cow._lock_post == Cow._lock_p && Cow2._state_post == Cow2._state_p && Cow2.x_post == Cow2.x_p && Cow2._lock_post == Cow2._lock_p && Cow3._state_post == Cow3._state_p && Cow3.x_post == Cow3.x_p && Cow3._lock_post == Cow3._lock_p && Cow4._state_post == Cow4._state_p && Cow4.x_post == Cow4.x_p && Cow4._lock_post == Cow4._lock_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_Cow.x(tid, this, newValue , Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
}                                                                                                   
// Cow._lock:                                                                                       
                                                                                                    
function {:inline} Y_Cow._lock(tid : Tid, this: Cow, newValue: Tid , Cow._state: [Cow]State, Cow.x: [Cow]int, Cow._lock: [Cow]Tid, Cow2._state: [Cow2]State, Cow2.x: [Cow2]int, Cow2._lock: [Cow2]Tid, Cow3._state: [Cow3]State, Cow3.x: [Cow3]int, Cow3._lock: [Cow3]Tid, Cow4._state: [Cow4]State, Cow4.x: [Cow4]int, Cow4._lock: [Cow4]Tid): bool
{                                                                                                   
 ((isAccessible(Cow._state[this], tid) && leq(m#moverPath(ReadEval.Cow._lock(tid: Tid,this: Cow,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock)), _R)) ==> (Cow._lock[this] == newValue))
 &&(((Cow._lock[this]==tid)==(newValue==tid)))                                                      
                                                                                                    
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_Cow._lock(tid : Tid, this: Cow, newValue: Tid , Cow._state: [Cow]State, Cow.x: [Cow]int, Cow._lock: [Cow]Tid, Cow2._state: [Cow2]State, Cow2.x: [Cow2]int, Cow2._lock: [Cow2]Tid, Cow3._state: [Cow3]State, Cow3.x: [Cow3]int, Cow3._lock: [Cow3]Tid, Cow4._state: [Cow4]State, Cow4.x: [Cow4]int, Cow4._lock: [Cow4]Tid): bool
{                                                                                                   
 true                                                                                               
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_Cow._lock.Subsumes.W(tid : Tid, u : Tid, this: Cow, newValue: Tid , Cow._state: [Cow]State, Cow.x: [Cow]int, Cow._lock: [Cow]Tid, Cow2._state: [Cow2]State, Cow2.x: [Cow2]int, Cow2._lock: [Cow2]Tid, Cow3._state: [Cow3]State, Cow3.x: [Cow3]int, Cow3._lock: [Cow3]Tid, Cow4._state: [Cow4]State, Cow4.x: [Cow4]int, Cow4._lock: [Cow4]Tid)
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Cow4.x_yield: [Cow4]int;                                                                        
var newValue_yield: Tid;                                                                            
var Cow._lock_yield: [Cow]Tid;                                                                      
var Cow3._state_yield: [Cow3]State;                                                                 
var tid_yield: Tid;                                                                                 
var Cow4._state_yield: [Cow4]State;                                                                 
var this_yield: Cow;                                                                                
var Cow4._lock_yield: [Cow4]Tid;                                                                    
var $pc_yield: Phase;                                                                               
var Cow3.x_yield: [Cow3]int;                                                                        
var Cow2._lock_yield: [Cow2]Tid;                                                                    
var u_yield: Tid;                                                                                   
var Cow._state_yield: [Cow]State;                                                                   
var Cow2.x_yield: [Cow2]int;                                                                        
var Cow2._state_yield: [Cow2]State;                                                                 
var Cow.x_yield: [Cow]int;                                                                          
var Cow3._lock_yield: [Cow3]Tid;                                                                    
var $recorded.state_yield: int;                                                                     
                                                                                                    
 assume isAccessible(Cow._state[this], tid);                                                        
 assume isAccessible(Cow._state[this], u);                                                          
 assume !isError(m#moverPath(WriteEval.Cow._lock(u: Tid,this: Cow,newValue: Tid,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock)));
 assume leq(m#moverPath(ReadEval.Cow._lock(tid: Tid,this: Cow,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock)), _N);
assume Cow._state_yield == Cow._state && Cow.x_yield == Cow.x && Cow._lock_yield == Cow._lock && Cow2._state_yield == Cow2._state && Cow2.x_yield == Cow2.x && Cow2._lock_yield == Cow2._lock && Cow3._state_yield == Cow3._state && Cow3.x_yield == Cow3.x && Cow3._lock_yield == Cow3._lock && Cow4._state_yield == Cow4._state && Cow4.x_yield == Cow4.x && Cow4._lock_yield == Cow4._lock && u_yield == u && newValue_yield == newValue && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Cow._lock(tid, this, newValue , Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
}                                                                                                   
                                                                                                    
procedure Y_Cow._lock.Reflexive(tid : Tid, this: Cow , Cow._state: [Cow]State, Cow.x: [Cow]int, Cow._lock: [Cow]Tid, Cow2._state: [Cow2]State, Cow2.x: [Cow2]int, Cow2._lock: [Cow2]Tid, Cow3._state: [Cow3]State, Cow3.x: [Cow3]int, Cow3._lock: [Cow3]Tid, Cow4._state: [Cow4]State, Cow4.x: [Cow4]int, Cow4._lock: [Cow4]Tid)
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Cow4.x_yield: [Cow4]int;                                                                        
var Cow._lock_yield: [Cow]Tid;                                                                      
var Cow3._state_yield: [Cow3]State;                                                                 
var tid_yield: Tid;                                                                                 
var Cow4._state_yield: [Cow4]State;                                                                 
var this_yield: Cow;                                                                                
var Cow4._lock_yield: [Cow4]Tid;                                                                    
var $pc_yield: Phase;                                                                               
var Cow3.x_yield: [Cow3]int;                                                                        
var Cow2._lock_yield: [Cow2]Tid;                                                                    
var Cow._state_yield: [Cow]State;                                                                   
var Cow2.x_yield: [Cow2]int;                                                                        
var Cow2._state_yield: [Cow2]State;                                                                 
var Cow.x_yield: [Cow]int;                                                                          
var Cow3._lock_yield: [Cow3]Tid;                                                                    
var $recorded.state_yield: int;                                                                     
                                                                                                    
 assume isAccessible(Cow._state[this], tid);                                                        
assume Cow._state_yield == Cow._state && Cow.x_yield == Cow.x && Cow._lock_yield == Cow._lock && Cow2._state_yield == Cow2._state && Cow2.x_yield == Cow2.x && Cow2._lock_yield == Cow2._lock && Cow3._state_yield == Cow3._state && Cow3.x_yield == Cow3.x && Cow3._lock_yield == Cow3._lock && Cow4._state_yield == Cow4._state && Cow4.x_yield == Cow4.x && Cow4._lock_yield == Cow4._lock && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Cow._lock(tid, this, Cow._lock[this] , Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
}                                                                                                   
                                                                                                    
procedure Y_Cow._lock.Transitive(tid : Tid, this: Cow, newValue : Tid , Cow._state: [Cow]State, Cow.x: [Cow]int, Cow._lock: [Cow]Tid, Cow2._state: [Cow2]State, Cow2.x: [Cow2]int, Cow2._lock: [Cow2]Tid, Cow3._state: [Cow3]State, Cow3.x: [Cow3]int, Cow3._lock: [Cow3]Tid, Cow4._state: [Cow4]State, Cow4.x: [Cow4]int, Cow4._lock: [Cow4]Tid , Cow._state_p: [Cow]State, Cow.x_p: [Cow]int, Cow._lock_p: [Cow]Tid, Cow2._state_p: [Cow2]State, Cow2.x_p: [Cow2]int, Cow2._lock_p: [Cow2]Tid, Cow3._state_p: [Cow3]State, Cow3.x_p: [Cow3]int, Cow3._lock_p: [Cow3]Tid, Cow4._state_p: [Cow4]State, Cow4.x_p: [Cow4]int, Cow4._lock_p: [Cow4]Tid)
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires StateInvariant(Cow._state_p, Cow.x_p, Cow._lock_p, Cow2._state_p, Cow2.x_p, Cow2._lock_p, Cow3._state_p, Cow3.x_p, Cow3._lock_p, Cow4._state_p, Cow4.x_p, Cow4._lock_p);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Cow3._lock_pre: [Cow3]Tid;                                                                      
var Cow._lock_pre: [Cow]Tid;                                                                        
var Cow3._state_pre: [Cow3]State;                                                                   
var Cow4._state_pre: [Cow4]State;                                                                   
var $recorded.state_pre: int;                                                                       
var Cow2._lock_pre: [Cow2]Tid;                                                                      
var Cow2._state_pre: [Cow2]State;                                                                   
var Cow.x_pre: [Cow]int;                                                                            
var Cow._state_pre: [Cow]State;                                                                     
var tid_pre: Tid;                                                                                   
var Cow4.x_pre: [Cow4]int;                                                                          
var $pc_pre: Phase;                                                                                 
var Cow3.x_pre: [Cow3]int;                                                                          
var this_pre: Cow;                                                                                  
var Cow2.x_pre: [Cow2]int;                                                                          
var newValue_pre: Tid;                                                                              
var Cow4._lock_pre: [Cow4]Tid;                                                                      
                                                                                                    
var Cow2._lock_post: [Cow2]Tid;                                                                     
var $recorded.state_post: int;                                                                      
var Cow3.x_post: [Cow3]int;                                                                         
var Cow4._lock_post: [Cow4]Tid;                                                                     
var Cow3._lock_post: [Cow3]Tid;                                                                     
var $pc_post: Phase;                                                                                
var Cow4.x_post: [Cow4]int;                                                                         
var Cow._state_post: [Cow]State;                                                                    
var Cow2.x_post: [Cow2]int;                                                                         
var tid_post: Tid;                                                                                  
var Cow.x_post: [Cow]int;                                                                           
var Cow2._state_post: [Cow2]State;                                                                  
var Cow._lock_post: [Cow]Tid;                                                                       
var this_post: Cow;                                                                                 
var Cow4._state_post: [Cow4]State;                                                                  
var Cow3._state_post: [Cow3]State;                                                                  
var newValue_post: Tid;                                                                             
                                                                                                    
assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(Cow._state[this], tid);                                                        
 assume Y(tid , Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock , Cow._state_p, Cow.x_p, Cow._lock_p, Cow2._state_p, Cow2.x_p, Cow2._lock_p, Cow3._state_p, Cow3.x_p, Cow3._lock_p, Cow4._state_p, Cow4.x_p, Cow4._lock_p);
 assume Y_Cow._lock(tid, this, newValue , Cow._state_p, Cow.x_p, Cow._lock_p, Cow2._state_p, Cow2.x_p, Cow2._lock_p, Cow3._state_p, Cow3.x_p, Cow3._lock_p, Cow4._state_p, Cow4.x_p, Cow4._lock_p);
assume Cow._state_post == Cow._state_p && Cow.x_post == Cow.x_p && Cow._lock_post == Cow._lock_p && Cow2._state_post == Cow2._state_p && Cow2.x_post == Cow2.x_p && Cow2._lock_post == Cow2._lock_p && Cow3._state_post == Cow3._state_p && Cow3.x_post == Cow3.x_p && Cow3._lock_post == Cow3._lock_p && Cow4._state_post == Cow4._state_p && Cow4.x_post == Cow4.x_p && Cow4._lock_post == Cow4._lock_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_Cow._lock(tid, this, newValue , Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
}                                                                                                   
// Cow2.x:                                                                                          
                                                                                                    
function {:inline} Y_Cow2.x(tid : Tid, this: Cow2, newValue: int , Cow._state: [Cow]State, Cow.x: [Cow]int, Cow._lock: [Cow]Tid, Cow2._state: [Cow2]State, Cow2.x: [Cow2]int, Cow2._lock: [Cow2]Tid, Cow3._state: [Cow3]State, Cow3.x: [Cow3]int, Cow3._lock: [Cow3]Tid, Cow4._state: [Cow4]State, Cow4.x: [Cow4]int, Cow4._lock: [Cow4]Tid): bool
{                                                                                                   
 ((isAccessible(Cow2._state[this], tid) && leq(m#moverPath(ReadEval.Cow2.x(tid: Tid,this: Cow2,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock)), _R)) ==> (Cow2.x[this] == newValue))
 &&((newValue>Cow2.x[this]))                                                                        
                                                                                                    
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_Cow2.x(tid : Tid, this: Cow2, newValue: int , Cow._state: [Cow]State, Cow.x: [Cow]int, Cow._lock: [Cow]Tid, Cow2._state: [Cow2]State, Cow2.x: [Cow2]int, Cow2._lock: [Cow2]Tid, Cow3._state: [Cow3]State, Cow3.x: [Cow3]int, Cow3._lock: [Cow3]Tid, Cow4._state: [Cow4]State, Cow4.x: [Cow4]int, Cow4._lock: [Cow4]Tid): bool
{                                                                                                   
 true                                                                                               
 &&((newValue>Cow2.x[this]))                                                                        
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_Cow2.x.Subsumes.W(tid : Tid, u : Tid, this: Cow2, newValue: int , Cow._state: [Cow]State, Cow.x: [Cow]int, Cow._lock: [Cow]Tid, Cow2._state: [Cow2]State, Cow2.x: [Cow2]int, Cow2._lock: [Cow2]Tid, Cow3._state: [Cow3]State, Cow3.x: [Cow3]int, Cow3._lock: [Cow3]Tid, Cow4._state: [Cow4]State, Cow4.x: [Cow4]int, Cow4._lock: [Cow4]Tid)
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var this_yield: Cow2;                                                                               
var Cow4.x_yield: [Cow4]int;                                                                        
var Cow._lock_yield: [Cow]Tid;                                                                      
var Cow3._state_yield: [Cow3]State;                                                                 
var tid_yield: Tid;                                                                                 
var Cow4._state_yield: [Cow4]State;                                                                 
var Cow4._lock_yield: [Cow4]Tid;                                                                    
var $pc_yield: Phase;                                                                               
var newValue_yield: int;                                                                            
var Cow3.x_yield: [Cow3]int;                                                                        
var Cow2._lock_yield: [Cow2]Tid;                                                                    
var u_yield: Tid;                                                                                   
var Cow._state_yield: [Cow]State;                                                                   
var Cow2.x_yield: [Cow2]int;                                                                        
var Cow2._state_yield: [Cow2]State;                                                                 
var Cow.x_yield: [Cow]int;                                                                          
var Cow3._lock_yield: [Cow3]Tid;                                                                    
var $recorded.state_yield: int;                                                                     
                                                                                                    
 assume isAccessible(Cow2._state[this], tid);                                                       
 assume isAccessible(Cow2._state[this], u);                                                         
 assume !isError(m#moverPath(WriteEval.Cow2.x(u: Tid,this: Cow2,newValue: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock)));
                                                                                                    
assume Cow._state_yield == Cow._state && Cow.x_yield == Cow.x && Cow._lock_yield == Cow._lock && Cow2._state_yield == Cow2._state && Cow2.x_yield == Cow2.x && Cow2._lock_yield == Cow2._lock && Cow3._state_yield == Cow3._state && Cow3.x_yield == Cow3.x && Cow3._lock_yield == Cow3._lock && Cow4._state_yield == Cow4._state && Cow4.x_yield == Cow4.x && Cow4._lock_yield == Cow4._lock && u_yield == u && newValue_yield == newValue && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Cow2.x(tid, this, newValue , Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
}                                                                                                   
                                                                                                    
procedure Y_Cow2.x.Reflexive(tid : Tid, this: Cow2 , Cow._state: [Cow]State, Cow.x: [Cow]int, Cow._lock: [Cow]Tid, Cow2._state: [Cow2]State, Cow2.x: [Cow2]int, Cow2._lock: [Cow2]Tid, Cow3._state: [Cow3]State, Cow3.x: [Cow3]int, Cow3._lock: [Cow3]Tid, Cow4._state: [Cow4]State, Cow4.x: [Cow4]int, Cow4._lock: [Cow4]Tid)
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var this_yield: Cow2;                                                                               
var Cow4.x_yield: [Cow4]int;                                                                        
var Cow._lock_yield: [Cow]Tid;                                                                      
var Cow3._state_yield: [Cow3]State;                                                                 
var tid_yield: Tid;                                                                                 
var Cow4._state_yield: [Cow4]State;                                                                 
var Cow4._lock_yield: [Cow4]Tid;                                                                    
var $pc_yield: Phase;                                                                               
var Cow3.x_yield: [Cow3]int;                                                                        
var Cow2._lock_yield: [Cow2]Tid;                                                                    
var Cow._state_yield: [Cow]State;                                                                   
var Cow2.x_yield: [Cow2]int;                                                                        
var Cow2._state_yield: [Cow2]State;                                                                 
var Cow.x_yield: [Cow]int;                                                                          
var Cow3._lock_yield: [Cow3]Tid;                                                                    
var $recorded.state_yield: int;                                                                     
                                                                                                    
 assume isAccessible(Cow2._state[this], tid);                                                       
assume Cow._state_yield == Cow._state && Cow.x_yield == Cow.x && Cow._lock_yield == Cow._lock && Cow2._state_yield == Cow2._state && Cow2.x_yield == Cow2.x && Cow2._lock_yield == Cow2._lock && Cow3._state_yield == Cow3._state && Cow3.x_yield == Cow3.x && Cow3._lock_yield == Cow3._lock && Cow4._state_yield == Cow4._state && Cow4.x_yield == Cow4.x && Cow4._lock_yield == Cow4._lock && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Cow2.x(tid, this, Cow2.x[this] , Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
}                                                                                                   
                                                                                                    
procedure Y_Cow2.x.Transitive(tid : Tid, this: Cow2, newValue : int , Cow._state: [Cow]State, Cow.x: [Cow]int, Cow._lock: [Cow]Tid, Cow2._state: [Cow2]State, Cow2.x: [Cow2]int, Cow2._lock: [Cow2]Tid, Cow3._state: [Cow3]State, Cow3.x: [Cow3]int, Cow3._lock: [Cow3]Tid, Cow4._state: [Cow4]State, Cow4.x: [Cow4]int, Cow4._lock: [Cow4]Tid , Cow._state_p: [Cow]State, Cow.x_p: [Cow]int, Cow._lock_p: [Cow]Tid, Cow2._state_p: [Cow2]State, Cow2.x_p: [Cow2]int, Cow2._lock_p: [Cow2]Tid, Cow3._state_p: [Cow3]State, Cow3.x_p: [Cow3]int, Cow3._lock_p: [Cow3]Tid, Cow4._state_p: [Cow4]State, Cow4.x_p: [Cow4]int, Cow4._lock_p: [Cow4]Tid)
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires StateInvariant(Cow._state_p, Cow.x_p, Cow._lock_p, Cow2._state_p, Cow2.x_p, Cow2._lock_p, Cow3._state_p, Cow3.x_p, Cow3._lock_p, Cow4._state_p, Cow4.x_p, Cow4._lock_p);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var this_pre: Cow2;                                                                                 
var Cow3._lock_pre: [Cow3]Tid;                                                                      
var Cow._lock_pre: [Cow]Tid;                                                                        
var Cow3._state_pre: [Cow3]State;                                                                   
var Cow4._state_pre: [Cow4]State;                                                                   
var $recorded.state_pre: int;                                                                       
var Cow2._lock_pre: [Cow2]Tid;                                                                      
var newValue_pre: int;                                                                              
var Cow2._state_pre: [Cow2]State;                                                                   
var Cow.x_pre: [Cow]int;                                                                            
var Cow._state_pre: [Cow]State;                                                                     
var tid_pre: Tid;                                                                                   
var Cow4.x_pre: [Cow4]int;                                                                          
var $pc_pre: Phase;                                                                                 
var Cow3.x_pre: [Cow3]int;                                                                          
var Cow2.x_pre: [Cow2]int;                                                                          
var Cow4._lock_pre: [Cow4]Tid;                                                                      
                                                                                                    
var Cow2._lock_post: [Cow2]Tid;                                                                     
var $recorded.state_post: int;                                                                      
var Cow3.x_post: [Cow3]int;                                                                         
var Cow4._lock_post: [Cow4]Tid;                                                                     
var Cow3._lock_post: [Cow3]Tid;                                                                     
var newValue_post: int;                                                                             
var $pc_post: Phase;                                                                                
var Cow4.x_post: [Cow4]int;                                                                         
var Cow._state_post: [Cow]State;                                                                    
var Cow2.x_post: [Cow2]int;                                                                         
var tid_post: Tid;                                                                                  
var Cow.x_post: [Cow]int;                                                                           
var this_post: Cow2;                                                                                
var Cow2._state_post: [Cow2]State;                                                                  
var Cow._lock_post: [Cow]Tid;                                                                       
var Cow4._state_post: [Cow4]State;                                                                  
var Cow3._state_post: [Cow3]State;                                                                  
                                                                                                    
assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(Cow2._state[this], tid);                                                       
 assume Y(tid , Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock , Cow._state_p, Cow.x_p, Cow._lock_p, Cow2._state_p, Cow2.x_p, Cow2._lock_p, Cow3._state_p, Cow3.x_p, Cow3._lock_p, Cow4._state_p, Cow4.x_p, Cow4._lock_p);
 assume Y_Cow2.x(tid, this, newValue , Cow._state_p, Cow.x_p, Cow._lock_p, Cow2._state_p, Cow2.x_p, Cow2._lock_p, Cow3._state_p, Cow3.x_p, Cow3._lock_p, Cow4._state_p, Cow4.x_p, Cow4._lock_p);
assume Cow._state_post == Cow._state_p && Cow.x_post == Cow.x_p && Cow._lock_post == Cow._lock_p && Cow2._state_post == Cow2._state_p && Cow2.x_post == Cow2.x_p && Cow2._lock_post == Cow2._lock_p && Cow3._state_post == Cow3._state_p && Cow3.x_post == Cow3.x_p && Cow3._lock_post == Cow3._lock_p && Cow4._state_post == Cow4._state_p && Cow4.x_post == Cow4.x_p && Cow4._lock_post == Cow4._lock_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_Cow2.x(tid, this, newValue , Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
}                                                                                                   
// Cow2._lock:                                                                                      
                                                                                                    
function {:inline} Y_Cow2._lock(tid : Tid, this: Cow2, newValue: Tid , Cow._state: [Cow]State, Cow.x: [Cow]int, Cow._lock: [Cow]Tid, Cow2._state: [Cow2]State, Cow2.x: [Cow2]int, Cow2._lock: [Cow2]Tid, Cow3._state: [Cow3]State, Cow3.x: [Cow3]int, Cow3._lock: [Cow3]Tid, Cow4._state: [Cow4]State, Cow4.x: [Cow4]int, Cow4._lock: [Cow4]Tid): bool
{                                                                                                   
 ((isAccessible(Cow2._state[this], tid) && leq(m#moverPath(ReadEval.Cow2._lock(tid: Tid,this: Cow2,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock)), _R)) ==> (Cow2._lock[this] == newValue))
 &&(((Cow2._lock[this]==tid)==(newValue==tid)))                                                     
                                                                                                    
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_Cow2._lock(tid : Tid, this: Cow2, newValue: Tid , Cow._state: [Cow]State, Cow.x: [Cow]int, Cow._lock: [Cow]Tid, Cow2._state: [Cow2]State, Cow2.x: [Cow2]int, Cow2._lock: [Cow2]Tid, Cow3._state: [Cow3]State, Cow3.x: [Cow3]int, Cow3._lock: [Cow3]Tid, Cow4._state: [Cow4]State, Cow4.x: [Cow4]int, Cow4._lock: [Cow4]Tid): bool
{                                                                                                   
 true                                                                                               
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_Cow2._lock.Subsumes.W(tid : Tid, u : Tid, this: Cow2, newValue: Tid , Cow._state: [Cow]State, Cow.x: [Cow]int, Cow._lock: [Cow]Tid, Cow2._state: [Cow2]State, Cow2.x: [Cow2]int, Cow2._lock: [Cow2]Tid, Cow3._state: [Cow3]State, Cow3.x: [Cow3]int, Cow3._lock: [Cow3]Tid, Cow4._state: [Cow4]State, Cow4.x: [Cow4]int, Cow4._lock: [Cow4]Tid)
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var this_yield: Cow2;                                                                               
var Cow4.x_yield: [Cow4]int;                                                                        
var newValue_yield: Tid;                                                                            
var Cow._lock_yield: [Cow]Tid;                                                                      
var Cow3._state_yield: [Cow3]State;                                                                 
var tid_yield: Tid;                                                                                 
var Cow4._state_yield: [Cow4]State;                                                                 
var Cow4._lock_yield: [Cow4]Tid;                                                                    
var $pc_yield: Phase;                                                                               
var Cow3.x_yield: [Cow3]int;                                                                        
var Cow2._lock_yield: [Cow2]Tid;                                                                    
var u_yield: Tid;                                                                                   
var Cow._state_yield: [Cow]State;                                                                   
var Cow2.x_yield: [Cow2]int;                                                                        
var Cow2._state_yield: [Cow2]State;                                                                 
var Cow.x_yield: [Cow]int;                                                                          
var Cow3._lock_yield: [Cow3]Tid;                                                                    
var $recorded.state_yield: int;                                                                     
                                                                                                    
 assume isAccessible(Cow2._state[this], tid);                                                       
 assume isAccessible(Cow2._state[this], u);                                                         
 assume !isError(m#moverPath(WriteEval.Cow2._lock(u: Tid,this: Cow2,newValue: Tid,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock)));
 assume leq(m#moverPath(ReadEval.Cow2._lock(tid: Tid,this: Cow2,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock)), _N);
assume Cow._state_yield == Cow._state && Cow.x_yield == Cow.x && Cow._lock_yield == Cow._lock && Cow2._state_yield == Cow2._state && Cow2.x_yield == Cow2.x && Cow2._lock_yield == Cow2._lock && Cow3._state_yield == Cow3._state && Cow3.x_yield == Cow3.x && Cow3._lock_yield == Cow3._lock && Cow4._state_yield == Cow4._state && Cow4.x_yield == Cow4.x && Cow4._lock_yield == Cow4._lock && u_yield == u && newValue_yield == newValue && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Cow2._lock(tid, this, newValue , Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
}                                                                                                   
                                                                                                    
procedure Y_Cow2._lock.Reflexive(tid : Tid, this: Cow2 , Cow._state: [Cow]State, Cow.x: [Cow]int, Cow._lock: [Cow]Tid, Cow2._state: [Cow2]State, Cow2.x: [Cow2]int, Cow2._lock: [Cow2]Tid, Cow3._state: [Cow3]State, Cow3.x: [Cow3]int, Cow3._lock: [Cow3]Tid, Cow4._state: [Cow4]State, Cow4.x: [Cow4]int, Cow4._lock: [Cow4]Tid)
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var this_yield: Cow2;                                                                               
var Cow4.x_yield: [Cow4]int;                                                                        
var Cow._lock_yield: [Cow]Tid;                                                                      
var Cow3._state_yield: [Cow3]State;                                                                 
var tid_yield: Tid;                                                                                 
var Cow4._state_yield: [Cow4]State;                                                                 
var Cow4._lock_yield: [Cow4]Tid;                                                                    
var $pc_yield: Phase;                                                                               
var Cow3.x_yield: [Cow3]int;                                                                        
var Cow2._lock_yield: [Cow2]Tid;                                                                    
var Cow._state_yield: [Cow]State;                                                                   
var Cow2.x_yield: [Cow2]int;                                                                        
var Cow2._state_yield: [Cow2]State;                                                                 
var Cow.x_yield: [Cow]int;                                                                          
var Cow3._lock_yield: [Cow3]Tid;                                                                    
var $recorded.state_yield: int;                                                                     
                                                                                                    
 assume isAccessible(Cow2._state[this], tid);                                                       
assume Cow._state_yield == Cow._state && Cow.x_yield == Cow.x && Cow._lock_yield == Cow._lock && Cow2._state_yield == Cow2._state && Cow2.x_yield == Cow2.x && Cow2._lock_yield == Cow2._lock && Cow3._state_yield == Cow3._state && Cow3.x_yield == Cow3.x && Cow3._lock_yield == Cow3._lock && Cow4._state_yield == Cow4._state && Cow4.x_yield == Cow4.x && Cow4._lock_yield == Cow4._lock && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Cow2._lock(tid, this, Cow2._lock[this] , Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
}                                                                                                   
                                                                                                    
procedure Y_Cow2._lock.Transitive(tid : Tid, this: Cow2, newValue : Tid , Cow._state: [Cow]State, Cow.x: [Cow]int, Cow._lock: [Cow]Tid, Cow2._state: [Cow2]State, Cow2.x: [Cow2]int, Cow2._lock: [Cow2]Tid, Cow3._state: [Cow3]State, Cow3.x: [Cow3]int, Cow3._lock: [Cow3]Tid, Cow4._state: [Cow4]State, Cow4.x: [Cow4]int, Cow4._lock: [Cow4]Tid , Cow._state_p: [Cow]State, Cow.x_p: [Cow]int, Cow._lock_p: [Cow]Tid, Cow2._state_p: [Cow2]State, Cow2.x_p: [Cow2]int, Cow2._lock_p: [Cow2]Tid, Cow3._state_p: [Cow3]State, Cow3.x_p: [Cow3]int, Cow3._lock_p: [Cow3]Tid, Cow4._state_p: [Cow4]State, Cow4.x_p: [Cow4]int, Cow4._lock_p: [Cow4]Tid)
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires StateInvariant(Cow._state_p, Cow.x_p, Cow._lock_p, Cow2._state_p, Cow2.x_p, Cow2._lock_p, Cow3._state_p, Cow3.x_p, Cow3._lock_p, Cow4._state_p, Cow4.x_p, Cow4._lock_p);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var this_pre: Cow2;                                                                                 
var Cow3._lock_pre: [Cow3]Tid;                                                                      
var Cow._lock_pre: [Cow]Tid;                                                                        
var Cow3._state_pre: [Cow3]State;                                                                   
var Cow4._state_pre: [Cow4]State;                                                                   
var $recorded.state_pre: int;                                                                       
var Cow2._lock_pre: [Cow2]Tid;                                                                      
var Cow2._state_pre: [Cow2]State;                                                                   
var Cow.x_pre: [Cow]int;                                                                            
var Cow._state_pre: [Cow]State;                                                                     
var tid_pre: Tid;                                                                                   
var Cow4.x_pre: [Cow4]int;                                                                          
var $pc_pre: Phase;                                                                                 
var Cow3.x_pre: [Cow3]int;                                                                          
var Cow2.x_pre: [Cow2]int;                                                                          
var newValue_pre: Tid;                                                                              
var Cow4._lock_pre: [Cow4]Tid;                                                                      
                                                                                                    
var Cow2._lock_post: [Cow2]Tid;                                                                     
var $recorded.state_post: int;                                                                      
var Cow3.x_post: [Cow3]int;                                                                         
var Cow4._lock_post: [Cow4]Tid;                                                                     
var Cow3._lock_post: [Cow3]Tid;                                                                     
var $pc_post: Phase;                                                                                
var Cow4.x_post: [Cow4]int;                                                                         
var Cow._state_post: [Cow]State;                                                                    
var Cow2.x_post: [Cow2]int;                                                                         
var tid_post: Tid;                                                                                  
var Cow.x_post: [Cow]int;                                                                           
var this_post: Cow2;                                                                                
var Cow2._state_post: [Cow2]State;                                                                  
var Cow._lock_post: [Cow]Tid;                                                                       
var Cow4._state_post: [Cow4]State;                                                                  
var Cow3._state_post: [Cow3]State;                                                                  
var newValue_post: Tid;                                                                             
                                                                                                    
assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(Cow2._state[this], tid);                                                       
 assume Y(tid , Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock , Cow._state_p, Cow.x_p, Cow._lock_p, Cow2._state_p, Cow2.x_p, Cow2._lock_p, Cow3._state_p, Cow3.x_p, Cow3._lock_p, Cow4._state_p, Cow4.x_p, Cow4._lock_p);
 assume Y_Cow2._lock(tid, this, newValue , Cow._state_p, Cow.x_p, Cow._lock_p, Cow2._state_p, Cow2.x_p, Cow2._lock_p, Cow3._state_p, Cow3.x_p, Cow3._lock_p, Cow4._state_p, Cow4.x_p, Cow4._lock_p);
assume Cow._state_post == Cow._state_p && Cow.x_post == Cow.x_p && Cow._lock_post == Cow._lock_p && Cow2._state_post == Cow2._state_p && Cow2.x_post == Cow2.x_p && Cow2._lock_post == Cow2._lock_p && Cow3._state_post == Cow3._state_p && Cow3.x_post == Cow3.x_p && Cow3._lock_post == Cow3._lock_p && Cow4._state_post == Cow4._state_p && Cow4.x_post == Cow4.x_p && Cow4._lock_post == Cow4._lock_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_Cow2._lock(tid, this, newValue , Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
}                                                                                                   
// Cow3.x:                                                                                          
                                                                                                    
function {:inline} Y_Cow3.x(tid : Tid, this: Cow3, newValue: int , Cow._state: [Cow]State, Cow.x: [Cow]int, Cow._lock: [Cow]Tid, Cow2._state: [Cow2]State, Cow2.x: [Cow2]int, Cow2._lock: [Cow2]Tid, Cow3._state: [Cow3]State, Cow3.x: [Cow3]int, Cow3._lock: [Cow3]Tid, Cow4._state: [Cow4]State, Cow4.x: [Cow4]int, Cow4._lock: [Cow4]Tid): bool
{                                                                                                   
 ((isAccessible(Cow3._state[this], tid) && leq(m#moverPath(ReadEval.Cow3.x(tid: Tid,this: Cow3,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock)), _R)) ==> (Cow3.x[this] == newValue))
 &&((newValue==(Cow3.x[this]+1)))                                                                   
                                                                                                    
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_Cow3.x(tid : Tid, this: Cow3, newValue: int , Cow._state: [Cow]State, Cow.x: [Cow]int, Cow._lock: [Cow]Tid, Cow2._state: [Cow2]State, Cow2.x: [Cow2]int, Cow2._lock: [Cow2]Tid, Cow3._state: [Cow3]State, Cow3.x: [Cow3]int, Cow3._lock: [Cow3]Tid, Cow4._state: [Cow4]State, Cow4.x: [Cow4]int, Cow4._lock: [Cow4]Tid): bool
{                                                                                                   
 true                                                                                               
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_Cow3.x.Subsumes.W(tid : Tid, u : Tid, this: Cow3, newValue: int , Cow._state: [Cow]State, Cow.x: [Cow]int, Cow._lock: [Cow]Tid, Cow2._state: [Cow2]State, Cow2.x: [Cow2]int, Cow2._lock: [Cow2]Tid, Cow3._state: [Cow3]State, Cow3.x: [Cow3]int, Cow3._lock: [Cow3]Tid, Cow4._state: [Cow4]State, Cow4.x: [Cow4]int, Cow4._lock: [Cow4]Tid)
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var this_yield: Cow3;                                                                               
var Cow4.x_yield: [Cow4]int;                                                                        
var Cow._lock_yield: [Cow]Tid;                                                                      
var Cow3._state_yield: [Cow3]State;                                                                 
var tid_yield: Tid;                                                                                 
var Cow4._state_yield: [Cow4]State;                                                                 
var Cow4._lock_yield: [Cow4]Tid;                                                                    
var $pc_yield: Phase;                                                                               
var newValue_yield: int;                                                                            
var Cow3.x_yield: [Cow3]int;                                                                        
var Cow2._lock_yield: [Cow2]Tid;                                                                    
var u_yield: Tid;                                                                                   
var Cow._state_yield: [Cow]State;                                                                   
var Cow2.x_yield: [Cow2]int;                                                                        
var Cow2._state_yield: [Cow2]State;                                                                 
var Cow.x_yield: [Cow]int;                                                                          
var Cow3._lock_yield: [Cow3]Tid;                                                                    
var $recorded.state_yield: int;                                                                     
                                                                                                    
 assume isAccessible(Cow3._state[this], tid);                                                       
 assume isAccessible(Cow3._state[this], u);                                                         
 assume !isError(m#moverPath(WriteEval.Cow3.x(u: Tid,this: Cow3,newValue: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock)));
                                                                                                    
assume Cow._state_yield == Cow._state && Cow.x_yield == Cow.x && Cow._lock_yield == Cow._lock && Cow2._state_yield == Cow2._state && Cow2.x_yield == Cow2.x && Cow2._lock_yield == Cow2._lock && Cow3._state_yield == Cow3._state && Cow3.x_yield == Cow3.x && Cow3._lock_yield == Cow3._lock && Cow4._state_yield == Cow4._state && Cow4.x_yield == Cow4.x && Cow4._lock_yield == Cow4._lock && u_yield == u && newValue_yield == newValue && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Cow3.x(tid, this, newValue , Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
}                                                                                                   
                                                                                                    
procedure Y_Cow3.x.Reflexive(tid : Tid, this: Cow3 , Cow._state: [Cow]State, Cow.x: [Cow]int, Cow._lock: [Cow]Tid, Cow2._state: [Cow2]State, Cow2.x: [Cow2]int, Cow2._lock: [Cow2]Tid, Cow3._state: [Cow3]State, Cow3.x: [Cow3]int, Cow3._lock: [Cow3]Tid, Cow4._state: [Cow4]State, Cow4.x: [Cow4]int, Cow4._lock: [Cow4]Tid)
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var this_yield: Cow3;                                                                               
var Cow4.x_yield: [Cow4]int;                                                                        
var Cow._lock_yield: [Cow]Tid;                                                                      
var Cow3._state_yield: [Cow3]State;                                                                 
var tid_yield: Tid;                                                                                 
var Cow4._state_yield: [Cow4]State;                                                                 
var Cow4._lock_yield: [Cow4]Tid;                                                                    
var $pc_yield: Phase;                                                                               
var Cow3.x_yield: [Cow3]int;                                                                        
var Cow2._lock_yield: [Cow2]Tid;                                                                    
var Cow._state_yield: [Cow]State;                                                                   
var Cow2.x_yield: [Cow2]int;                                                                        
var Cow2._state_yield: [Cow2]State;                                                                 
var Cow.x_yield: [Cow]int;                                                                          
var Cow3._lock_yield: [Cow3]Tid;                                                                    
var $recorded.state_yield: int;                                                                     
                                                                                                    
 assume isAccessible(Cow3._state[this], tid);                                                       
assume Cow._state_yield == Cow._state && Cow.x_yield == Cow.x && Cow._lock_yield == Cow._lock && Cow2._state_yield == Cow2._state && Cow2.x_yield == Cow2.x && Cow2._lock_yield == Cow2._lock && Cow3._state_yield == Cow3._state && Cow3.x_yield == Cow3.x && Cow3._lock_yield == Cow3._lock && Cow4._state_yield == Cow4._state && Cow4.x_yield == Cow4.x && Cow4._lock_yield == Cow4._lock && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Cow3.x(tid, this, Cow3.x[this] , Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
}                                                                                                   
                                                                                                    
procedure Y_Cow3.x.Transitive(tid : Tid, this: Cow3, newValue : int , Cow._state: [Cow]State, Cow.x: [Cow]int, Cow._lock: [Cow]Tid, Cow2._state: [Cow2]State, Cow2.x: [Cow2]int, Cow2._lock: [Cow2]Tid, Cow3._state: [Cow3]State, Cow3.x: [Cow3]int, Cow3._lock: [Cow3]Tid, Cow4._state: [Cow4]State, Cow4.x: [Cow4]int, Cow4._lock: [Cow4]Tid , Cow._state_p: [Cow]State, Cow.x_p: [Cow]int, Cow._lock_p: [Cow]Tid, Cow2._state_p: [Cow2]State, Cow2.x_p: [Cow2]int, Cow2._lock_p: [Cow2]Tid, Cow3._state_p: [Cow3]State, Cow3.x_p: [Cow3]int, Cow3._lock_p: [Cow3]Tid, Cow4._state_p: [Cow4]State, Cow4.x_p: [Cow4]int, Cow4._lock_p: [Cow4]Tid)
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires StateInvariant(Cow._state_p, Cow.x_p, Cow._lock_p, Cow2._state_p, Cow2.x_p, Cow2._lock_p, Cow3._state_p, Cow3.x_p, Cow3._lock_p, Cow4._state_p, Cow4.x_p, Cow4._lock_p);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Cow3._lock_pre: [Cow3]Tid;                                                                      
var Cow._lock_pre: [Cow]Tid;                                                                        
var this_pre: Cow3;                                                                                 
var Cow3._state_pre: [Cow3]State;                                                                   
var Cow4._state_pre: [Cow4]State;                                                                   
var $recorded.state_pre: int;                                                                       
var Cow2._lock_pre: [Cow2]Tid;                                                                      
var newValue_pre: int;                                                                              
var Cow2._state_pre: [Cow2]State;                                                                   
var Cow.x_pre: [Cow]int;                                                                            
var Cow._state_pre: [Cow]State;                                                                     
var tid_pre: Tid;                                                                                   
var Cow4.x_pre: [Cow4]int;                                                                          
var $pc_pre: Phase;                                                                                 
var Cow3.x_pre: [Cow3]int;                                                                          
var Cow2.x_pre: [Cow2]int;                                                                          
var Cow4._lock_pre: [Cow4]Tid;                                                                      
                                                                                                    
var Cow2._lock_post: [Cow2]Tid;                                                                     
var this_post: Cow3;                                                                                
var $recorded.state_post: int;                                                                      
var Cow3.x_post: [Cow3]int;                                                                         
var Cow4._lock_post: [Cow4]Tid;                                                                     
var Cow3._lock_post: [Cow3]Tid;                                                                     
var newValue_post: int;                                                                             
var $pc_post: Phase;                                                                                
var Cow4.x_post: [Cow4]int;                                                                         
var Cow._state_post: [Cow]State;                                                                    
var Cow2.x_post: [Cow2]int;                                                                         
var tid_post: Tid;                                                                                  
var Cow.x_post: [Cow]int;                                                                           
var Cow2._state_post: [Cow2]State;                                                                  
var Cow._lock_post: [Cow]Tid;                                                                       
var Cow4._state_post: [Cow4]State;                                                                  
var Cow3._state_post: [Cow3]State;                                                                  
                                                                                                    
assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(Cow3._state[this], tid);                                                       
 assume Y(tid , Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock , Cow._state_p, Cow.x_p, Cow._lock_p, Cow2._state_p, Cow2.x_p, Cow2._lock_p, Cow3._state_p, Cow3.x_p, Cow3._lock_p, Cow4._state_p, Cow4.x_p, Cow4._lock_p);
 assume Y_Cow3.x(tid, this, newValue , Cow._state_p, Cow.x_p, Cow._lock_p, Cow2._state_p, Cow2.x_p, Cow2._lock_p, Cow3._state_p, Cow3.x_p, Cow3._lock_p, Cow4._state_p, Cow4.x_p, Cow4._lock_p);
assume Cow._state_post == Cow._state_p && Cow.x_post == Cow.x_p && Cow._lock_post == Cow._lock_p && Cow2._state_post == Cow2._state_p && Cow2.x_post == Cow2.x_p && Cow2._lock_post == Cow2._lock_p && Cow3._state_post == Cow3._state_p && Cow3.x_post == Cow3.x_p && Cow3._lock_post == Cow3._lock_p && Cow4._state_post == Cow4._state_p && Cow4.x_post == Cow4.x_p && Cow4._lock_post == Cow4._lock_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_Cow3.x(tid, this, newValue , Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
}                                                                                                   
// Cow3._lock:                                                                                      
                                                                                                    
function {:inline} Y_Cow3._lock(tid : Tid, this: Cow3, newValue: Tid , Cow._state: [Cow]State, Cow.x: [Cow]int, Cow._lock: [Cow]Tid, Cow2._state: [Cow2]State, Cow2.x: [Cow2]int, Cow2._lock: [Cow2]Tid, Cow3._state: [Cow3]State, Cow3.x: [Cow3]int, Cow3._lock: [Cow3]Tid, Cow4._state: [Cow4]State, Cow4.x: [Cow4]int, Cow4._lock: [Cow4]Tid): bool
{                                                                                                   
 ((isAccessible(Cow3._state[this], tid) && leq(m#moverPath(ReadEval.Cow3._lock(tid: Tid,this: Cow3,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock)), _R)) ==> (Cow3._lock[this] == newValue))
 &&(((Cow3._lock[this]==tid)==(newValue==tid)))                                                     
                                                                                                    
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_Cow3._lock(tid : Tid, this: Cow3, newValue: Tid , Cow._state: [Cow]State, Cow.x: [Cow]int, Cow._lock: [Cow]Tid, Cow2._state: [Cow2]State, Cow2.x: [Cow2]int, Cow2._lock: [Cow2]Tid, Cow3._state: [Cow3]State, Cow3.x: [Cow3]int, Cow3._lock: [Cow3]Tid, Cow4._state: [Cow4]State, Cow4.x: [Cow4]int, Cow4._lock: [Cow4]Tid): bool
{                                                                                                   
 true                                                                                               
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_Cow3._lock.Subsumes.W(tid : Tid, u : Tid, this: Cow3, newValue: Tid , Cow._state: [Cow]State, Cow.x: [Cow]int, Cow._lock: [Cow]Tid, Cow2._state: [Cow2]State, Cow2.x: [Cow2]int, Cow2._lock: [Cow2]Tid, Cow3._state: [Cow3]State, Cow3.x: [Cow3]int, Cow3._lock: [Cow3]Tid, Cow4._state: [Cow4]State, Cow4.x: [Cow4]int, Cow4._lock: [Cow4]Tid)
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var this_yield: Cow3;                                                                               
var Cow4.x_yield: [Cow4]int;                                                                        
var newValue_yield: Tid;                                                                            
var Cow._lock_yield: [Cow]Tid;                                                                      
var Cow3._state_yield: [Cow3]State;                                                                 
var tid_yield: Tid;                                                                                 
var Cow4._state_yield: [Cow4]State;                                                                 
var Cow4._lock_yield: [Cow4]Tid;                                                                    
var $pc_yield: Phase;                                                                               
var Cow3.x_yield: [Cow3]int;                                                                        
var Cow2._lock_yield: [Cow2]Tid;                                                                    
var u_yield: Tid;                                                                                   
var Cow._state_yield: [Cow]State;                                                                   
var Cow2.x_yield: [Cow2]int;                                                                        
var Cow2._state_yield: [Cow2]State;                                                                 
var Cow.x_yield: [Cow]int;                                                                          
var Cow3._lock_yield: [Cow3]Tid;                                                                    
var $recorded.state_yield: int;                                                                     
                                                                                                    
 assume isAccessible(Cow3._state[this], tid);                                                       
 assume isAccessible(Cow3._state[this], u);                                                         
 assume !isError(m#moverPath(WriteEval.Cow3._lock(u: Tid,this: Cow3,newValue: Tid,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock)));
 assume leq(m#moverPath(ReadEval.Cow3._lock(tid: Tid,this: Cow3,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock)), _N);
assume Cow._state_yield == Cow._state && Cow.x_yield == Cow.x && Cow._lock_yield == Cow._lock && Cow2._state_yield == Cow2._state && Cow2.x_yield == Cow2.x && Cow2._lock_yield == Cow2._lock && Cow3._state_yield == Cow3._state && Cow3.x_yield == Cow3.x && Cow3._lock_yield == Cow3._lock && Cow4._state_yield == Cow4._state && Cow4.x_yield == Cow4.x && Cow4._lock_yield == Cow4._lock && u_yield == u && newValue_yield == newValue && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Cow3._lock(tid, this, newValue , Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
}                                                                                                   
                                                                                                    
procedure Y_Cow3._lock.Reflexive(tid : Tid, this: Cow3 , Cow._state: [Cow]State, Cow.x: [Cow]int, Cow._lock: [Cow]Tid, Cow2._state: [Cow2]State, Cow2.x: [Cow2]int, Cow2._lock: [Cow2]Tid, Cow3._state: [Cow3]State, Cow3.x: [Cow3]int, Cow3._lock: [Cow3]Tid, Cow4._state: [Cow4]State, Cow4.x: [Cow4]int, Cow4._lock: [Cow4]Tid)
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var this_yield: Cow3;                                                                               
var Cow4.x_yield: [Cow4]int;                                                                        
var Cow._lock_yield: [Cow]Tid;                                                                      
var Cow3._state_yield: [Cow3]State;                                                                 
var tid_yield: Tid;                                                                                 
var Cow4._state_yield: [Cow4]State;                                                                 
var Cow4._lock_yield: [Cow4]Tid;                                                                    
var $pc_yield: Phase;                                                                               
var Cow3.x_yield: [Cow3]int;                                                                        
var Cow2._lock_yield: [Cow2]Tid;                                                                    
var Cow._state_yield: [Cow]State;                                                                   
var Cow2.x_yield: [Cow2]int;                                                                        
var Cow2._state_yield: [Cow2]State;                                                                 
var Cow.x_yield: [Cow]int;                                                                          
var Cow3._lock_yield: [Cow3]Tid;                                                                    
var $recorded.state_yield: int;                                                                     
                                                                                                    
 assume isAccessible(Cow3._state[this], tid);                                                       
assume Cow._state_yield == Cow._state && Cow.x_yield == Cow.x && Cow._lock_yield == Cow._lock && Cow2._state_yield == Cow2._state && Cow2.x_yield == Cow2.x && Cow2._lock_yield == Cow2._lock && Cow3._state_yield == Cow3._state && Cow3.x_yield == Cow3.x && Cow3._lock_yield == Cow3._lock && Cow4._state_yield == Cow4._state && Cow4.x_yield == Cow4.x && Cow4._lock_yield == Cow4._lock && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Cow3._lock(tid, this, Cow3._lock[this] , Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
}                                                                                                   
                                                                                                    
procedure Y_Cow3._lock.Transitive(tid : Tid, this: Cow3, newValue : Tid , Cow._state: [Cow]State, Cow.x: [Cow]int, Cow._lock: [Cow]Tid, Cow2._state: [Cow2]State, Cow2.x: [Cow2]int, Cow2._lock: [Cow2]Tid, Cow3._state: [Cow3]State, Cow3.x: [Cow3]int, Cow3._lock: [Cow3]Tid, Cow4._state: [Cow4]State, Cow4.x: [Cow4]int, Cow4._lock: [Cow4]Tid , Cow._state_p: [Cow]State, Cow.x_p: [Cow]int, Cow._lock_p: [Cow]Tid, Cow2._state_p: [Cow2]State, Cow2.x_p: [Cow2]int, Cow2._lock_p: [Cow2]Tid, Cow3._state_p: [Cow3]State, Cow3.x_p: [Cow3]int, Cow3._lock_p: [Cow3]Tid, Cow4._state_p: [Cow4]State, Cow4.x_p: [Cow4]int, Cow4._lock_p: [Cow4]Tid)
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires StateInvariant(Cow._state_p, Cow.x_p, Cow._lock_p, Cow2._state_p, Cow2.x_p, Cow2._lock_p, Cow3._state_p, Cow3.x_p, Cow3._lock_p, Cow4._state_p, Cow4.x_p, Cow4._lock_p);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Cow3._lock_pre: [Cow3]Tid;                                                                      
var Cow._lock_pre: [Cow]Tid;                                                                        
var this_pre: Cow3;                                                                                 
var Cow3._state_pre: [Cow3]State;                                                                   
var Cow4._state_pre: [Cow4]State;                                                                   
var $recorded.state_pre: int;                                                                       
var Cow2._lock_pre: [Cow2]Tid;                                                                      
var Cow2._state_pre: [Cow2]State;                                                                   
var Cow.x_pre: [Cow]int;                                                                            
var Cow._state_pre: [Cow]State;                                                                     
var tid_pre: Tid;                                                                                   
var Cow4.x_pre: [Cow4]int;                                                                          
var $pc_pre: Phase;                                                                                 
var Cow3.x_pre: [Cow3]int;                                                                          
var Cow2.x_pre: [Cow2]int;                                                                          
var newValue_pre: Tid;                                                                              
var Cow4._lock_pre: [Cow4]Tid;                                                                      
                                                                                                    
var Cow2._lock_post: [Cow2]Tid;                                                                     
var this_post: Cow3;                                                                                
var $recorded.state_post: int;                                                                      
var Cow3.x_post: [Cow3]int;                                                                         
var Cow4._lock_post: [Cow4]Tid;                                                                     
var Cow3._lock_post: [Cow3]Tid;                                                                     
var $pc_post: Phase;                                                                                
var Cow4.x_post: [Cow4]int;                                                                         
var Cow._state_post: [Cow]State;                                                                    
var Cow2.x_post: [Cow2]int;                                                                         
var tid_post: Tid;                                                                                  
var Cow.x_post: [Cow]int;                                                                           
var Cow2._state_post: [Cow2]State;                                                                  
var Cow._lock_post: [Cow]Tid;                                                                       
var Cow4._state_post: [Cow4]State;                                                                  
var Cow3._state_post: [Cow3]State;                                                                  
var newValue_post: Tid;                                                                             
                                                                                                    
assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(Cow3._state[this], tid);                                                       
 assume Y(tid , Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock , Cow._state_p, Cow.x_p, Cow._lock_p, Cow2._state_p, Cow2.x_p, Cow2._lock_p, Cow3._state_p, Cow3.x_p, Cow3._lock_p, Cow4._state_p, Cow4.x_p, Cow4._lock_p);
 assume Y_Cow3._lock(tid, this, newValue , Cow._state_p, Cow.x_p, Cow._lock_p, Cow2._state_p, Cow2.x_p, Cow2._lock_p, Cow3._state_p, Cow3.x_p, Cow3._lock_p, Cow4._state_p, Cow4.x_p, Cow4._lock_p);
assume Cow._state_post == Cow._state_p && Cow.x_post == Cow.x_p && Cow._lock_post == Cow._lock_p && Cow2._state_post == Cow2._state_p && Cow2.x_post == Cow2.x_p && Cow2._lock_post == Cow2._lock_p && Cow3._state_post == Cow3._state_p && Cow3.x_post == Cow3.x_p && Cow3._lock_post == Cow3._lock_p && Cow4._state_post == Cow4._state_p && Cow4.x_post == Cow4.x_p && Cow4._lock_post == Cow4._lock_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_Cow3._lock(tid, this, newValue , Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
}                                                                                                   
// Cow4.x:                                                                                          
                                                                                                    
function {:inline} Y_Cow4.x(tid : Tid, this: Cow4, newValue: int , Cow._state: [Cow]State, Cow.x: [Cow]int, Cow._lock: [Cow]Tid, Cow2._state: [Cow2]State, Cow2.x: [Cow2]int, Cow2._lock: [Cow2]Tid, Cow3._state: [Cow3]State, Cow3.x: [Cow3]int, Cow3._lock: [Cow3]Tid, Cow4._state: [Cow4]State, Cow4.x: [Cow4]int, Cow4._lock: [Cow4]Tid): bool
{                                                                                                   
 ((isAccessible(Cow4._state[this], tid) && leq(m#moverPath(ReadEval.Cow4.x(tid: Tid,this: Cow4,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock)), _R)) ==> (Cow4.x[this] == newValue))
 &&((newValue==(Cow4.x[this]+1)))                                                                   
                                                                                                    
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_Cow4.x(tid : Tid, this: Cow4, newValue: int , Cow._state: [Cow]State, Cow.x: [Cow]int, Cow._lock: [Cow]Tid, Cow2._state: [Cow2]State, Cow2.x: [Cow2]int, Cow2._lock: [Cow2]Tid, Cow3._state: [Cow3]State, Cow3.x: [Cow3]int, Cow3._lock: [Cow3]Tid, Cow4._state: [Cow4]State, Cow4.x: [Cow4]int, Cow4._lock: [Cow4]Tid): bool
{                                                                                                   
 true                                                                                               
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_Cow4.x.Subsumes.W(tid : Tid, u : Tid, this: Cow4, newValue: int , Cow._state: [Cow]State, Cow.x: [Cow]int, Cow._lock: [Cow]Tid, Cow2._state: [Cow2]State, Cow2.x: [Cow2]int, Cow2._lock: [Cow2]Tid, Cow3._state: [Cow3]State, Cow3.x: [Cow3]int, Cow3._lock: [Cow3]Tid, Cow4._state: [Cow4]State, Cow4.x: [Cow4]int, Cow4._lock: [Cow4]Tid)
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Cow4.x_yield: [Cow4]int;                                                                        
var Cow._lock_yield: [Cow]Tid;                                                                      
var Cow3._state_yield: [Cow3]State;                                                                 
var tid_yield: Tid;                                                                                 
var Cow4._state_yield: [Cow4]State;                                                                 
var Cow4._lock_yield: [Cow4]Tid;                                                                    
var $pc_yield: Phase;                                                                               
var newValue_yield: int;                                                                            
var Cow3.x_yield: [Cow3]int;                                                                        
var Cow2._lock_yield: [Cow2]Tid;                                                                    
var u_yield: Tid;                                                                                   
var Cow._state_yield: [Cow]State;                                                                   
var Cow2.x_yield: [Cow2]int;                                                                        
var Cow2._state_yield: [Cow2]State;                                                                 
var Cow.x_yield: [Cow]int;                                                                          
var Cow3._lock_yield: [Cow3]Tid;                                                                    
var this_yield: Cow4;                                                                               
var $recorded.state_yield: int;                                                                     
                                                                                                    
 assume isAccessible(Cow4._state[this], tid);                                                       
 assume isAccessible(Cow4._state[this], u);                                                         
 assume !isError(m#moverPath(WriteEval.Cow4.x(u: Tid,this: Cow4,newValue: int,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock)));
                                                                                                    
assume Cow._state_yield == Cow._state && Cow.x_yield == Cow.x && Cow._lock_yield == Cow._lock && Cow2._state_yield == Cow2._state && Cow2.x_yield == Cow2.x && Cow2._lock_yield == Cow2._lock && Cow3._state_yield == Cow3._state && Cow3.x_yield == Cow3.x && Cow3._lock_yield == Cow3._lock && Cow4._state_yield == Cow4._state && Cow4.x_yield == Cow4.x && Cow4._lock_yield == Cow4._lock && u_yield == u && newValue_yield == newValue && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Cow4.x(tid, this, newValue , Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
}                                                                                                   
                                                                                                    
procedure Y_Cow4.x.Reflexive(tid : Tid, this: Cow4 , Cow._state: [Cow]State, Cow.x: [Cow]int, Cow._lock: [Cow]Tid, Cow2._state: [Cow2]State, Cow2.x: [Cow2]int, Cow2._lock: [Cow2]Tid, Cow3._state: [Cow3]State, Cow3.x: [Cow3]int, Cow3._lock: [Cow3]Tid, Cow4._state: [Cow4]State, Cow4.x: [Cow4]int, Cow4._lock: [Cow4]Tid)
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Cow4.x_yield: [Cow4]int;                                                                        
var Cow._lock_yield: [Cow]Tid;                                                                      
var Cow3._state_yield: [Cow3]State;                                                                 
var tid_yield: Tid;                                                                                 
var Cow4._state_yield: [Cow4]State;                                                                 
var Cow4._lock_yield: [Cow4]Tid;                                                                    
var $pc_yield: Phase;                                                                               
var Cow3.x_yield: [Cow3]int;                                                                        
var Cow2._lock_yield: [Cow2]Tid;                                                                    
var Cow._state_yield: [Cow]State;                                                                   
var Cow2.x_yield: [Cow2]int;                                                                        
var Cow2._state_yield: [Cow2]State;                                                                 
var Cow.x_yield: [Cow]int;                                                                          
var Cow3._lock_yield: [Cow3]Tid;                                                                    
var this_yield: Cow4;                                                                               
var $recorded.state_yield: int;                                                                     
                                                                                                    
 assume isAccessible(Cow4._state[this], tid);                                                       
assume Cow._state_yield == Cow._state && Cow.x_yield == Cow.x && Cow._lock_yield == Cow._lock && Cow2._state_yield == Cow2._state && Cow2.x_yield == Cow2.x && Cow2._lock_yield == Cow2._lock && Cow3._state_yield == Cow3._state && Cow3.x_yield == Cow3.x && Cow3._lock_yield == Cow3._lock && Cow4._state_yield == Cow4._state && Cow4.x_yield == Cow4.x && Cow4._lock_yield == Cow4._lock && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Cow4.x(tid, this, Cow4.x[this] , Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
}                                                                                                   
                                                                                                    
procedure Y_Cow4.x.Transitive(tid : Tid, this: Cow4, newValue : int , Cow._state: [Cow]State, Cow.x: [Cow]int, Cow._lock: [Cow]Tid, Cow2._state: [Cow2]State, Cow2.x: [Cow2]int, Cow2._lock: [Cow2]Tid, Cow3._state: [Cow3]State, Cow3.x: [Cow3]int, Cow3._lock: [Cow3]Tid, Cow4._state: [Cow4]State, Cow4.x: [Cow4]int, Cow4._lock: [Cow4]Tid , Cow._state_p: [Cow]State, Cow.x_p: [Cow]int, Cow._lock_p: [Cow]Tid, Cow2._state_p: [Cow2]State, Cow2.x_p: [Cow2]int, Cow2._lock_p: [Cow2]Tid, Cow3._state_p: [Cow3]State, Cow3.x_p: [Cow3]int, Cow3._lock_p: [Cow3]Tid, Cow4._state_p: [Cow4]State, Cow4.x_p: [Cow4]int, Cow4._lock_p: [Cow4]Tid)
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires StateInvariant(Cow._state_p, Cow.x_p, Cow._lock_p, Cow2._state_p, Cow2.x_p, Cow2._lock_p, Cow3._state_p, Cow3.x_p, Cow3._lock_p, Cow4._state_p, Cow4.x_p, Cow4._lock_p);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Cow3._lock_pre: [Cow3]Tid;                                                                      
var Cow._lock_pre: [Cow]Tid;                                                                        
var Cow3._state_pre: [Cow3]State;                                                                   
var Cow4._state_pre: [Cow4]State;                                                                   
var $recorded.state_pre: int;                                                                       
var this_pre: Cow4;                                                                                 
var Cow2._lock_pre: [Cow2]Tid;                                                                      
var newValue_pre: int;                                                                              
var Cow2._state_pre: [Cow2]State;                                                                   
var Cow.x_pre: [Cow]int;                                                                            
var Cow._state_pre: [Cow]State;                                                                     
var tid_pre: Tid;                                                                                   
var Cow4.x_pre: [Cow4]int;                                                                          
var $pc_pre: Phase;                                                                                 
var Cow3.x_pre: [Cow3]int;                                                                          
var Cow2.x_pre: [Cow2]int;                                                                          
var Cow4._lock_pre: [Cow4]Tid;                                                                      
                                                                                                    
var Cow2._lock_post: [Cow2]Tid;                                                                     
var $recorded.state_post: int;                                                                      
var Cow3.x_post: [Cow3]int;                                                                         
var Cow4._lock_post: [Cow4]Tid;                                                                     
var Cow3._lock_post: [Cow3]Tid;                                                                     
var newValue_post: int;                                                                             
var $pc_post: Phase;                                                                                
var this_post: Cow4;                                                                                
var Cow4.x_post: [Cow4]int;                                                                         
var Cow._state_post: [Cow]State;                                                                    
var Cow2.x_post: [Cow2]int;                                                                         
var tid_post: Tid;                                                                                  
var Cow.x_post: [Cow]int;                                                                           
var Cow2._state_post: [Cow2]State;                                                                  
var Cow._lock_post: [Cow]Tid;                                                                       
var Cow4._state_post: [Cow4]State;                                                                  
var Cow3._state_post: [Cow3]State;                                                                  
                                                                                                    
assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(Cow4._state[this], tid);                                                       
 assume Y(tid , Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock , Cow._state_p, Cow.x_p, Cow._lock_p, Cow2._state_p, Cow2.x_p, Cow2._lock_p, Cow3._state_p, Cow3.x_p, Cow3._lock_p, Cow4._state_p, Cow4.x_p, Cow4._lock_p);
 assume Y_Cow4.x(tid, this, newValue , Cow._state_p, Cow.x_p, Cow._lock_p, Cow2._state_p, Cow2.x_p, Cow2._lock_p, Cow3._state_p, Cow3.x_p, Cow3._lock_p, Cow4._state_p, Cow4.x_p, Cow4._lock_p);
assume Cow._state_post == Cow._state_p && Cow.x_post == Cow.x_p && Cow._lock_post == Cow._lock_p && Cow2._state_post == Cow2._state_p && Cow2.x_post == Cow2.x_p && Cow2._lock_post == Cow2._lock_p && Cow3._state_post == Cow3._state_p && Cow3.x_post == Cow3.x_p && Cow3._lock_post == Cow3._lock_p && Cow4._state_post == Cow4._state_p && Cow4.x_post == Cow4.x_p && Cow4._lock_post == Cow4._lock_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_Cow4.x(tid, this, newValue , Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
}                                                                                                   
// Cow4._lock:                                                                                      
                                                                                                    
function {:inline} Y_Cow4._lock(tid : Tid, this: Cow4, newValue: Tid , Cow._state: [Cow]State, Cow.x: [Cow]int, Cow._lock: [Cow]Tid, Cow2._state: [Cow2]State, Cow2.x: [Cow2]int, Cow2._lock: [Cow2]Tid, Cow3._state: [Cow3]State, Cow3.x: [Cow3]int, Cow3._lock: [Cow3]Tid, Cow4._state: [Cow4]State, Cow4.x: [Cow4]int, Cow4._lock: [Cow4]Tid): bool
{                                                                                                   
 ((isAccessible(Cow4._state[this], tid) && leq(m#moverPath(ReadEval.Cow4._lock(tid: Tid,this: Cow4,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock)), _R)) ==> (Cow4._lock[this] == newValue))
 &&(((Cow4._lock[this]==tid)==(newValue==tid)))                                                     
                                                                                                    
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_Cow4._lock(tid : Tid, this: Cow4, newValue: Tid , Cow._state: [Cow]State, Cow.x: [Cow]int, Cow._lock: [Cow]Tid, Cow2._state: [Cow2]State, Cow2.x: [Cow2]int, Cow2._lock: [Cow2]Tid, Cow3._state: [Cow3]State, Cow3.x: [Cow3]int, Cow3._lock: [Cow3]Tid, Cow4._state: [Cow4]State, Cow4.x: [Cow4]int, Cow4._lock: [Cow4]Tid): bool
{                                                                                                   
 true                                                                                               
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_Cow4._lock.Subsumes.W(tid : Tid, u : Tid, this: Cow4, newValue: Tid , Cow._state: [Cow]State, Cow.x: [Cow]int, Cow._lock: [Cow]Tid, Cow2._state: [Cow2]State, Cow2.x: [Cow2]int, Cow2._lock: [Cow2]Tid, Cow3._state: [Cow3]State, Cow3.x: [Cow3]int, Cow3._lock: [Cow3]Tid, Cow4._state: [Cow4]State, Cow4.x: [Cow4]int, Cow4._lock: [Cow4]Tid)
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Cow4.x_yield: [Cow4]int;                                                                        
var newValue_yield: Tid;                                                                            
var Cow._lock_yield: [Cow]Tid;                                                                      
var Cow3._state_yield: [Cow3]State;                                                                 
var tid_yield: Tid;                                                                                 
var Cow4._state_yield: [Cow4]State;                                                                 
var Cow4._lock_yield: [Cow4]Tid;                                                                    
var $pc_yield: Phase;                                                                               
var Cow3.x_yield: [Cow3]int;                                                                        
var Cow2._lock_yield: [Cow2]Tid;                                                                    
var u_yield: Tid;                                                                                   
var Cow._state_yield: [Cow]State;                                                                   
var Cow2.x_yield: [Cow2]int;                                                                        
var Cow2._state_yield: [Cow2]State;                                                                 
var Cow.x_yield: [Cow]int;                                                                          
var Cow3._lock_yield: [Cow3]Tid;                                                                    
var this_yield: Cow4;                                                                               
var $recorded.state_yield: int;                                                                     
                                                                                                    
 assume isAccessible(Cow4._state[this], tid);                                                       
 assume isAccessible(Cow4._state[this], u);                                                         
 assume !isError(m#moverPath(WriteEval.Cow4._lock(u: Tid,this: Cow4,newValue: Tid,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock)));
 assume leq(m#moverPath(ReadEval.Cow4._lock(tid: Tid,this: Cow4,Cow._state,Cow.x,Cow._lock,Cow2._state,Cow2.x,Cow2._lock,Cow3._state,Cow3.x,Cow3._lock,Cow4._state,Cow4.x,Cow4._lock)), _N);
assume Cow._state_yield == Cow._state && Cow.x_yield == Cow.x && Cow._lock_yield == Cow._lock && Cow2._state_yield == Cow2._state && Cow2.x_yield == Cow2.x && Cow2._lock_yield == Cow2._lock && Cow3._state_yield == Cow3._state && Cow3.x_yield == Cow3.x && Cow3._lock_yield == Cow3._lock && Cow4._state_yield == Cow4._state && Cow4.x_yield == Cow4.x && Cow4._lock_yield == Cow4._lock && u_yield == u && newValue_yield == newValue && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Cow4._lock(tid, this, newValue , Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
}                                                                                                   
                                                                                                    
procedure Y_Cow4._lock.Reflexive(tid : Tid, this: Cow4 , Cow._state: [Cow]State, Cow.x: [Cow]int, Cow._lock: [Cow]Tid, Cow2._state: [Cow2]State, Cow2.x: [Cow2]int, Cow2._lock: [Cow2]Tid, Cow3._state: [Cow3]State, Cow3.x: [Cow3]int, Cow3._lock: [Cow3]Tid, Cow4._state: [Cow4]State, Cow4.x: [Cow4]int, Cow4._lock: [Cow4]Tid)
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Cow4.x_yield: [Cow4]int;                                                                        
var Cow._lock_yield: [Cow]Tid;                                                                      
var Cow3._state_yield: [Cow3]State;                                                                 
var tid_yield: Tid;                                                                                 
var Cow4._state_yield: [Cow4]State;                                                                 
var Cow4._lock_yield: [Cow4]Tid;                                                                    
var $pc_yield: Phase;                                                                               
var Cow3.x_yield: [Cow3]int;                                                                        
var Cow2._lock_yield: [Cow2]Tid;                                                                    
var Cow._state_yield: [Cow]State;                                                                   
var Cow2.x_yield: [Cow2]int;                                                                        
var Cow2._state_yield: [Cow2]State;                                                                 
var Cow.x_yield: [Cow]int;                                                                          
var Cow3._lock_yield: [Cow3]Tid;                                                                    
var this_yield: Cow4;                                                                               
var $recorded.state_yield: int;                                                                     
                                                                                                    
 assume isAccessible(Cow4._state[this], tid);                                                       
assume Cow._state_yield == Cow._state && Cow.x_yield == Cow.x && Cow._lock_yield == Cow._lock && Cow2._state_yield == Cow2._state && Cow2.x_yield == Cow2.x && Cow2._lock_yield == Cow2._lock && Cow3._state_yield == Cow3._state && Cow3.x_yield == Cow3.x && Cow3._lock_yield == Cow3._lock && Cow4._state_yield == Cow4._state && Cow4.x_yield == Cow4.x && Cow4._lock_yield == Cow4._lock && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Cow4._lock(tid, this, Cow4._lock[this] , Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
}                                                                                                   
                                                                                                    
procedure Y_Cow4._lock.Transitive(tid : Tid, this: Cow4, newValue : Tid , Cow._state: [Cow]State, Cow.x: [Cow]int, Cow._lock: [Cow]Tid, Cow2._state: [Cow2]State, Cow2.x: [Cow2]int, Cow2._lock: [Cow2]Tid, Cow3._state: [Cow3]State, Cow3.x: [Cow3]int, Cow3._lock: [Cow3]Tid, Cow4._state: [Cow4]State, Cow4.x: [Cow4]int, Cow4._lock: [Cow4]Tid , Cow._state_p: [Cow]State, Cow.x_p: [Cow]int, Cow._lock_p: [Cow]Tid, Cow2._state_p: [Cow2]State, Cow2.x_p: [Cow2]int, Cow2._lock_p: [Cow2]Tid, Cow3._state_p: [Cow3]State, Cow3.x_p: [Cow3]int, Cow3._lock_p: [Cow3]Tid, Cow4._state_p: [Cow4]State, Cow4.x_p: [Cow4]int, Cow4._lock_p: [Cow4]Tid)
 requires StateInvariant(Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
 requires StateInvariant(Cow._state_p, Cow.x_p, Cow._lock_p, Cow2._state_p, Cow2.x_p, Cow2._lock_p, Cow3._state_p, Cow3.x_p, Cow3._lock_p, Cow4._state_p, Cow4.x_p, Cow4._lock_p);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Cow3._lock_pre: [Cow3]Tid;                                                                      
var Cow._lock_pre: [Cow]Tid;                                                                        
var Cow3._state_pre: [Cow3]State;                                                                   
var Cow4._state_pre: [Cow4]State;                                                                   
var $recorded.state_pre: int;                                                                       
var this_pre: Cow4;                                                                                 
var Cow2._lock_pre: [Cow2]Tid;                                                                      
var Cow2._state_pre: [Cow2]State;                                                                   
var Cow.x_pre: [Cow]int;                                                                            
var Cow._state_pre: [Cow]State;                                                                     
var tid_pre: Tid;                                                                                   
var Cow4.x_pre: [Cow4]int;                                                                          
var $pc_pre: Phase;                                                                                 
var Cow3.x_pre: [Cow3]int;                                                                          
var Cow2.x_pre: [Cow2]int;                                                                          
var newValue_pre: Tid;                                                                              
var Cow4._lock_pre: [Cow4]Tid;                                                                      
                                                                                                    
var Cow2._lock_post: [Cow2]Tid;                                                                     
var $recorded.state_post: int;                                                                      
var Cow3.x_post: [Cow3]int;                                                                         
var Cow4._lock_post: [Cow4]Tid;                                                                     
var Cow3._lock_post: [Cow3]Tid;                                                                     
var $pc_post: Phase;                                                                                
var this_post: Cow4;                                                                                
var Cow4.x_post: [Cow4]int;                                                                         
var Cow._state_post: [Cow]State;                                                                    
var Cow2.x_post: [Cow2]int;                                                                         
var tid_post: Tid;                                                                                  
var Cow.x_post: [Cow]int;                                                                           
var Cow2._state_post: [Cow2]State;                                                                  
var Cow._lock_post: [Cow]Tid;                                                                       
var Cow4._state_post: [Cow4]State;                                                                  
var Cow3._state_post: [Cow3]State;                                                                  
var newValue_post: Tid;                                                                             
                                                                                                    
assume Cow._state_pre == Cow._state && Cow.x_pre == Cow.x && Cow._lock_pre == Cow._lock && Cow2._state_pre == Cow2._state && Cow2.x_pre == Cow2.x && Cow2._lock_pre == Cow2._lock && Cow3._state_pre == Cow3._state && Cow3.x_pre == Cow3.x && Cow3._lock_pre == Cow3._lock && Cow4._state_pre == Cow4._state && Cow4.x_pre == Cow4.x && Cow4._lock_pre == Cow4._lock && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(Cow4._state[this], tid);                                                       
 assume Y(tid , Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock , Cow._state_p, Cow.x_p, Cow._lock_p, Cow2._state_p, Cow2.x_p, Cow2._lock_p, Cow3._state_p, Cow3.x_p, Cow3._lock_p, Cow4._state_p, Cow4.x_p, Cow4._lock_p);
 assume Y_Cow4._lock(tid, this, newValue , Cow._state_p, Cow.x_p, Cow._lock_p, Cow2._state_p, Cow2.x_p, Cow2._lock_p, Cow3._state_p, Cow3.x_p, Cow3._lock_p, Cow4._state_p, Cow4.x_p, Cow4._lock_p);
assume Cow._state_post == Cow._state_p && Cow.x_post == Cow.x_p && Cow._lock_post == Cow._lock_p && Cow2._state_post == Cow2._state_p && Cow2.x_post == Cow2.x_p && Cow2._lock_post == Cow2._lock_p && Cow3._state_post == Cow3._state_p && Cow3.x_post == Cow3.x_p && Cow3._lock_post == Cow3._lock_p && Cow4._state_post == Cow4._state_p && Cow4.x_post == Cow4.x_p && Cow4._lock_post == Cow4._lock_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_Cow4._lock(tid, this, newValue , Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock);
}                                                                                                   
                                                                                                    
                                                                                                    
function {:inline} Y(tid : Tid , Cow._state: [Cow]State, Cow.x: [Cow]int, Cow._lock: [Cow]Tid, Cow2._state: [Cow2]State, Cow2.x: [Cow2]int, Cow2._lock: [Cow2]Tid, Cow3._state: [Cow3]State, Cow3.x: [Cow3]int, Cow3._lock: [Cow3]Tid, Cow4._state: [Cow4]State, Cow4.x: [Cow4]int, Cow4._lock: [Cow4]Tid , Cow._state_p: [Cow]State, Cow.x_p: [Cow]int, Cow._lock_p: [Cow]Tid, Cow2._state_p: [Cow2]State, Cow2.x_p: [Cow2]int, Cow2._lock_p: [Cow2]Tid, Cow3._state_p: [Cow3]State, Cow3.x_p: [Cow3]int, Cow3._lock_p: [Cow3]Tid, Cow4._state_p: [Cow4]State, Cow4.x_p: [Cow4]int, Cow4._lock_p: [Cow4]Tid): bool
{                                                                                                   
 (forall this: Cow :: Y_Cow.x(tid : Tid, this, Cow.x_p[this] , Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock))
 && (forall this: Cow :: Y_Cow._lock(tid : Tid, this, Cow._lock_p[this] , Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock))
 && (forall this: Cow2 :: Y_Cow2.x(tid : Tid, this, Cow2.x_p[this] , Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock))
 && (forall this: Cow2 :: Y_Cow2._lock(tid : Tid, this, Cow2._lock_p[this] , Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock))
 && (forall this: Cow3 :: Y_Cow3.x(tid : Tid, this, Cow3.x_p[this] , Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock))
 && (forall this: Cow3 :: Y_Cow3._lock(tid : Tid, this, Cow3._lock_p[this] , Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock))
 && (forall this: Cow4 :: Y_Cow4.x(tid : Tid, this, Cow4.x_p[this] , Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock))
 && (forall this: Cow4 :: Y_Cow4._lock(tid : Tid, this, Cow4._lock_p[this] , Cow._state, Cow.x, Cow._lock, Cow2._state, Cow2.x, Cow2._lock, Cow3._state, Cow3.x, Cow3._lock, Cow4._state, Cow4.x, Cow4._lock))
 && (forall _i : Cow :: isShared(Cow._state[_i]) ==> isShared(Cow._state_p[_i]))                    
 && (forall _i : Cow :: isLocal(Cow._state[_i], tid) <==> isLocal(Cow._state_p[_i], tid))           
 && (forall _i : Cow2 :: isShared(Cow2._state[_i]) ==> isShared(Cow2._state_p[_i]))                 
 && (forall _i : Cow2 :: isLocal(Cow2._state[_i], tid) <==> isLocal(Cow2._state_p[_i], tid))        
 && (forall _i : Cow3 :: isShared(Cow3._state[_i]) ==> isShared(Cow3._state_p[_i]))                 
 && (forall _i : Cow3 :: isLocal(Cow3._state[_i], tid) <==> isLocal(Cow3._state_p[_i], tid))        
 && (forall _i : Cow4 :: isShared(Cow4._state[_i]) ==> isShared(Cow4._state_p[_i]))                 
 && (forall _i : Cow4 :: isLocal(Cow4._state[_i], tid) <==> isLocal(Cow4._state_p[_i], tid))        
                                                                                                    
}                                                                                                   
                                                                                                    
                                                                                                    
// 716.1-991.2: (Method:9.2)
// 732.1-732.24: (9.2): Bad tid
// 733.1-733.37: (9.2): this is not global
// 874.1-874.27: (10.22): Cannot have potential null deference in left-mover part.
// 878.1-878.27: (10.22): Reduction failure
// 880.2-882.2: (class anchor.sink.VarDeclStmt:11.11)
// 883.2-900.19: (class anchor.sink.Read:11.11)
// 895.1-895.27: (11.11): Cannot have potential null deference in left-mover part.
// 899.1-899.27: (11.11): Reduction failure
// 903.3-919.21: (class anchor.sink.Write:13.13)
// 915.1-915.28: (13.13): Cannot have potential null deference in left-mover part.
// 918.1-918.28: (13.13): Reduction failure
// 925.1-925.27: (15.9): Cannot have potential null deference in left-mover part.
// 927.1-927.32: (15.9): lock not held
// 929.1-929.27: (15.9): Reduction failure
// 931.2-939.42: (class anchor.sink.Yield:16.9)
// 943.1-943.27: (17.22): Cannot have potential null deference in left-mover part.
// 947.1-947.27: (17.22): Reduction failure
// 949.2-951.2: (class anchor.sink.VarDeclStmt:17.30)
// 952.2-969.24: (class anchor.sink.Read:17.30)
// 964.1-964.27: (17.30): Cannot have potential null deference in left-mover part.
// 968.1-968.27: (17.30): Reduction failure
// 970.2-975.22: (class anchor.sink.Assert:17.52)
// 975.1-975.22: (17.52): This assertion may not hold.
// 979.1-979.27: (17.73): Cannot have potential null deference in left-mover part.
// 981.1-981.32: (17.73): lock not held
// 983.1-983.27: (17.73): Reduction failure
// 985.2-990.9: (class anchor.sink.Return:9.18)
// 1431.1-1431.34: (3.2): Cow.x failed Write-Write Right-Mover Check
// 1506.1-1506.30: (3.2): Cow.x failed Write-Read Right-Mover Check
// 1585.1-1585.34: (3.2): Cow.x failed Write-Write Left-Mover Check
// 1661.1-1661.30: (3.2): Cow.x failed Write-Read Left-Mover Check
// 1734.1-1734.34: (3.2): Cow.x failed Read-Write Right-Mover Check
// 1810.1-1810.34: (3.2): Cow.x failed Read-Write Left-Mover Check
// 1885.1-1885.34: (22.2): Cow2.x failed Write-Write Right-Mover Check
// 1960.1-1960.30: (22.2): Cow2.x failed Write-Read Right-Mover Check
// 2039.1-2039.34: (22.2): Cow2.x failed Write-Write Left-Mover Check
// 2115.1-2115.30: (22.2): Cow2.x failed Write-Read Left-Mover Check
// 2188.1-2188.34: (22.2): Cow2.x failed Read-Write Right-Mover Check
// 2264.1-2264.34: (22.2): Cow2.x failed Read-Write Left-Mover Check
// 2339.1-2339.34: (30.2): Cow3.x failed Write-Write Right-Mover Check
// 2414.1-2414.30: (30.2): Cow3.x failed Write-Read Right-Mover Check
// 2493.1-2493.34: (30.2): Cow3.x failed Write-Write Left-Mover Check
// 2569.1-2569.30: (30.2): Cow3.x failed Write-Read Left-Mover Check
// 2642.1-2642.34: (30.2): Cow3.x failed Read-Write Right-Mover Check
// 2718.1-2718.34: (30.2): Cow3.x failed Read-Write Left-Mover Check
// 2793.1-2793.34: (38.2): Cow4.x failed Write-Write Right-Mover Check
// 2868.1-2868.30: (38.2): Cow4.x failed Write-Read Right-Mover Check
// 2947.1-2947.34: (38.2): Cow4.x failed Write-Write Left-Mover Check
// 3023.1-3023.30: (38.2): Cow4.x failed Write-Read Left-Mover Check
// 3096.1-3096.34: (38.2): Cow4.x failed Read-Write Right-Mover Check
// 3172.1-3172.34: (38.2): Cow4.x failed Read-Write Left-Mover Check
// 3259.1-3259.140: (3.2): Cow.x is not Write-Write Stable with respect to Cow.x (case A.1)
// 3260.1-3260.101: (3.2): Cow.x is not Write-Write Stable with respect to Cow.x (case A.2)
// 3261.1-3261.158: (3.2): Cow.x is not Write-Write Stable with respect to Cow.x (case A.3)
// 3381.1-3381.140: (3.2): Cow.x is not Write-Write Stable with respect to Cow.x (case C)
// 3506.1-3506.144: (3.2): Cow.x is not Write-Write Stable with respect to Cow.x (case D)
// 3507.1-3507.144: (3.2): Cow.x is not Write-Write Stable with respect to Cow.x (case R)
// 3594.1-3594.136: (3.2): Cow.x is not Read-Write Stable with respect to Cow.x (case F)
// 3595.1-3595.136: (3.2): Cow.x is not Read-Write Stable with respect to Cow.x (case H)
// 3596.1-3596.146: (3.2): Cow.x is not Read-Write Stable with respect to Cow.x (case I)
// 3682.1-3682.136: (3.2): Cow.x is not Write-Read Stable with respect to Cow.x (case J)
// 3683.1-3683.136: (3.2): Cow.x is not Write-Read Stable with respect to Cow.x (case K)
// 3684.1-3684.99: (3.2): Cow.x is not Write-Read Stable with respect to Cow.x (case L)
// 3772.1-3772.140: (22.2): Cow2.x is not Write-Write Stable with respect to Cow.x (case A.1)
// 3773.1-3773.101: (22.2): Cow2.x is not Write-Write Stable with respect to Cow.x (case A.2)
// 3774.1-3774.156: (22.2): Cow2.x is not Write-Write Stable with respect to Cow.x (case A.3)
// 3894.1-3894.140: (3.2): Cow.x is not Write-Write Stable with respect to Cow2.x (case C)
// 4019.1-4019.144: (3.2): Cow.x is not Write-Write Stable with respect to Cow2.x (case D)
// 4020.1-4020.144: (3.2): Cow.x is not Write-Write Stable with respect to Cow2.x (case R)
// 4107.1-4107.136: (3.2): Cow.x is not Read-Write Stable with respect to Cow2.x (case F)
// 4108.1-4108.136: (3.2): Cow.x is not Read-Write Stable with respect to Cow2.x (case H)
// 4109.1-4109.144: (3.2): Cow.x is not Read-Write Stable with respect to Cow2.x (case I)
// 4195.1-4195.136: (22.2): Cow2.x is not Write-Read Stable with respect to Cow.x (case J)
// 4196.1-4196.136: (22.2): Cow2.x is not Write-Read Stable with respect to Cow.x (case K)
// 4197.1-4197.99: (22.2): Cow2.x is not Write-Read Stable with respect to Cow.x (case L)
// 4285.1-4285.140: (30.2): Cow3.x is not Write-Write Stable with respect to Cow.x (case A.1)
// 4286.1-4286.101: (30.2): Cow3.x is not Write-Write Stable with respect to Cow.x (case A.2)
// 4287.1-4287.156: (30.2): Cow3.x is not Write-Write Stable with respect to Cow.x (case A.3)
// 4407.1-4407.140: (3.2): Cow.x is not Write-Write Stable with respect to Cow3.x (case C)
// 4532.1-4532.144: (3.2): Cow.x is not Write-Write Stable with respect to Cow3.x (case D)
// 4533.1-4533.144: (3.2): Cow.x is not Write-Write Stable with respect to Cow3.x (case R)
// 4620.1-4620.136: (3.2): Cow.x is not Read-Write Stable with respect to Cow3.x (case F)
// 4621.1-4621.136: (3.2): Cow.x is not Read-Write Stable with respect to Cow3.x (case H)
// 4622.1-4622.144: (3.2): Cow.x is not Read-Write Stable with respect to Cow3.x (case I)
// 4708.1-4708.136: (30.2): Cow3.x is not Write-Read Stable with respect to Cow.x (case J)
// 4709.1-4709.136: (30.2): Cow3.x is not Write-Read Stable with respect to Cow.x (case K)
// 4710.1-4710.99: (30.2): Cow3.x is not Write-Read Stable with respect to Cow.x (case L)
// 4798.1-4798.140: (38.2): Cow4.x is not Write-Write Stable with respect to Cow.x (case A.1)
// 4799.1-4799.101: (38.2): Cow4.x is not Write-Write Stable with respect to Cow.x (case A.2)
// 4800.1-4800.156: (38.2): Cow4.x is not Write-Write Stable with respect to Cow.x (case A.3)
// 4920.1-4920.140: (3.2): Cow.x is not Write-Write Stable with respect to Cow4.x (case C)
// 5045.1-5045.144: (3.2): Cow.x is not Write-Write Stable with respect to Cow4.x (case D)
// 5046.1-5046.144: (3.2): Cow.x is not Write-Write Stable with respect to Cow4.x (case R)
// 5133.1-5133.136: (3.2): Cow.x is not Read-Write Stable with respect to Cow4.x (case F)
// 5134.1-5134.136: (3.2): Cow.x is not Read-Write Stable with respect to Cow4.x (case H)
// 5135.1-5135.144: (3.2): Cow.x is not Read-Write Stable with respect to Cow4.x (case I)
// 5221.1-5221.136: (38.2): Cow4.x is not Write-Read Stable with respect to Cow.x (case J)
// 5222.1-5222.136: (38.2): Cow4.x is not Write-Read Stable with respect to Cow.x (case K)
// 5223.1-5223.99: (38.2): Cow4.x is not Write-Read Stable with respect to Cow.x (case L)
// 5311.1-5311.140: (3.2): Cow.x is not Write-Write Stable with respect to Cow2.x (case A.1)
// 5312.1-5312.101: (3.2): Cow.x is not Write-Write Stable with respect to Cow2.x (case A.2)
// 5313.1-5313.156: (3.2): Cow.x is not Write-Write Stable with respect to Cow2.x (case A.3)
// 5433.1-5433.140: (22.2): Cow2.x is not Write-Write Stable with respect to Cow.x (case C)
// 5558.1-5558.144: (22.2): Cow2.x is not Write-Write Stable with respect to Cow.x (case D)
// 5559.1-5559.144: (22.2): Cow2.x is not Write-Write Stable with respect to Cow.x (case R)
// 5646.1-5646.136: (22.2): Cow2.x is not Read-Write Stable with respect to Cow.x (case F)
// 5647.1-5647.136: (22.2): Cow2.x is not Read-Write Stable with respect to Cow.x (case H)
// 5648.1-5648.144: (22.2): Cow2.x is not Read-Write Stable with respect to Cow.x (case I)
// 5734.1-5734.136: (3.2): Cow.x is not Write-Read Stable with respect to Cow2.x (case J)
// 5735.1-5735.136: (3.2): Cow.x is not Write-Read Stable with respect to Cow2.x (case K)
// 5736.1-5736.99: (3.2): Cow.x is not Write-Read Stable with respect to Cow2.x (case L)
// 5824.1-5824.140: (22.2): Cow2.x is not Write-Write Stable with respect to Cow2.x (case A.1)
// 5825.1-5825.101: (22.2): Cow2.x is not Write-Write Stable with respect to Cow2.x (case A.2)
// 5826.1-5826.158: (22.2): Cow2.x is not Write-Write Stable with respect to Cow2.x (case A.3)
// 5946.1-5946.140: (22.2): Cow2.x is not Write-Write Stable with respect to Cow2.x (case C)
// 6071.1-6071.144: (22.2): Cow2.x is not Write-Write Stable with respect to Cow2.x (case D)
// 6072.1-6072.144: (22.2): Cow2.x is not Write-Write Stable with respect to Cow2.x (case R)
// 6159.1-6159.136: (22.2): Cow2.x is not Read-Write Stable with respect to Cow2.x (case F)
// 6160.1-6160.136: (22.2): Cow2.x is not Read-Write Stable with respect to Cow2.x (case H)
// 6161.1-6161.146: (22.2): Cow2.x is not Read-Write Stable with respect to Cow2.x (case I)
// 6247.1-6247.136: (22.2): Cow2.x is not Write-Read Stable with respect to Cow2.x (case J)
// 6248.1-6248.136: (22.2): Cow2.x is not Write-Read Stable with respect to Cow2.x (case K)
// 6249.1-6249.99: (22.2): Cow2.x is not Write-Read Stable with respect to Cow2.x (case L)
// 6337.1-6337.140: (30.2): Cow3.x is not Write-Write Stable with respect to Cow2.x (case A.1)
// 6338.1-6338.101: (30.2): Cow3.x is not Write-Write Stable with respect to Cow2.x (case A.2)
// 6339.1-6339.156: (30.2): Cow3.x is not Write-Write Stable with respect to Cow2.x (case A.3)
// 6459.1-6459.140: (22.2): Cow2.x is not Write-Write Stable with respect to Cow3.x (case C)
// 6584.1-6584.144: (22.2): Cow2.x is not Write-Write Stable with respect to Cow3.x (case D)
// 6585.1-6585.144: (22.2): Cow2.x is not Write-Write Stable with respect to Cow3.x (case R)
// 6672.1-6672.136: (22.2): Cow2.x is not Read-Write Stable with respect to Cow3.x (case F)
// 6673.1-6673.136: (22.2): Cow2.x is not Read-Write Stable with respect to Cow3.x (case H)
// 6674.1-6674.144: (22.2): Cow2.x is not Read-Write Stable with respect to Cow3.x (case I)
// 6760.1-6760.136: (30.2): Cow3.x is not Write-Read Stable with respect to Cow2.x (case J)
// 6761.1-6761.136: (30.2): Cow3.x is not Write-Read Stable with respect to Cow2.x (case K)
// 6762.1-6762.99: (30.2): Cow3.x is not Write-Read Stable with respect to Cow2.x (case L)
// 6850.1-6850.140: (38.2): Cow4.x is not Write-Write Stable with respect to Cow2.x (case A.1)
// 6851.1-6851.101: (38.2): Cow4.x is not Write-Write Stable with respect to Cow2.x (case A.2)
// 6852.1-6852.156: (38.2): Cow4.x is not Write-Write Stable with respect to Cow2.x (case A.3)
// 6972.1-6972.140: (22.2): Cow2.x is not Write-Write Stable with respect to Cow4.x (case C)
// 7097.1-7097.144: (22.2): Cow2.x is not Write-Write Stable with respect to Cow4.x (case D)
// 7098.1-7098.144: (22.2): Cow2.x is not Write-Write Stable with respect to Cow4.x (case R)
// 7185.1-7185.136: (22.2): Cow2.x is not Read-Write Stable with respect to Cow4.x (case F)
// 7186.1-7186.136: (22.2): Cow2.x is not Read-Write Stable with respect to Cow4.x (case H)
// 7187.1-7187.144: (22.2): Cow2.x is not Read-Write Stable with respect to Cow4.x (case I)
// 7273.1-7273.136: (38.2): Cow4.x is not Write-Read Stable with respect to Cow2.x (case J)
// 7274.1-7274.136: (38.2): Cow4.x is not Write-Read Stable with respect to Cow2.x (case K)
// 7275.1-7275.99: (38.2): Cow4.x is not Write-Read Stable with respect to Cow2.x (case L)
// 7363.1-7363.140: (3.2): Cow.x is not Write-Write Stable with respect to Cow3.x (case A.1)
// 7364.1-7364.101: (3.2): Cow.x is not Write-Write Stable with respect to Cow3.x (case A.2)
// 7365.1-7365.156: (3.2): Cow.x is not Write-Write Stable with respect to Cow3.x (case A.3)
// 7485.1-7485.140: (30.2): Cow3.x is not Write-Write Stable with respect to Cow.x (case C)
// 7610.1-7610.144: (30.2): Cow3.x is not Write-Write Stable with respect to Cow.x (case D)
// 7611.1-7611.144: (30.2): Cow3.x is not Write-Write Stable with respect to Cow.x (case R)
// 7698.1-7698.136: (30.2): Cow3.x is not Read-Write Stable with respect to Cow.x (case F)
// 7699.1-7699.136: (30.2): Cow3.x is not Read-Write Stable with respect to Cow.x (case H)
// 7700.1-7700.144: (30.2): Cow3.x is not Read-Write Stable with respect to Cow.x (case I)
// 7786.1-7786.136: (3.2): Cow.x is not Write-Read Stable with respect to Cow3.x (case J)
// 7787.1-7787.136: (3.2): Cow.x is not Write-Read Stable with respect to Cow3.x (case K)
// 7788.1-7788.99: (3.2): Cow.x is not Write-Read Stable with respect to Cow3.x (case L)
// 7876.1-7876.140: (22.2): Cow2.x is not Write-Write Stable with respect to Cow3.x (case A.1)
// 7877.1-7877.101: (22.2): Cow2.x is not Write-Write Stable with respect to Cow3.x (case A.2)
// 7878.1-7878.156: (22.2): Cow2.x is not Write-Write Stable with respect to Cow3.x (case A.3)
// 7998.1-7998.140: (30.2): Cow3.x is not Write-Write Stable with respect to Cow2.x (case C)
// 8123.1-8123.144: (30.2): Cow3.x is not Write-Write Stable with respect to Cow2.x (case D)
// 8124.1-8124.144: (30.2): Cow3.x is not Write-Write Stable with respect to Cow2.x (case R)
// 8211.1-8211.136: (30.2): Cow3.x is not Read-Write Stable with respect to Cow2.x (case F)
// 8212.1-8212.136: (30.2): Cow3.x is not Read-Write Stable with respect to Cow2.x (case H)
// 8213.1-8213.144: (30.2): Cow3.x is not Read-Write Stable with respect to Cow2.x (case I)
// 8299.1-8299.136: (22.2): Cow2.x is not Write-Read Stable with respect to Cow3.x (case J)
// 8300.1-8300.136: (22.2): Cow2.x is not Write-Read Stable with respect to Cow3.x (case K)
// 8301.1-8301.99: (22.2): Cow2.x is not Write-Read Stable with respect to Cow3.x (case L)
// 8389.1-8389.140: (30.2): Cow3.x is not Write-Write Stable with respect to Cow3.x (case A.1)
// 8390.1-8390.101: (30.2): Cow3.x is not Write-Write Stable with respect to Cow3.x (case A.2)
// 8391.1-8391.158: (30.2): Cow3.x is not Write-Write Stable with respect to Cow3.x (case A.3)
// 8511.1-8511.140: (30.2): Cow3.x is not Write-Write Stable with respect to Cow3.x (case C)
// 8636.1-8636.144: (30.2): Cow3.x is not Write-Write Stable with respect to Cow3.x (case D)
// 8637.1-8637.144: (30.2): Cow3.x is not Write-Write Stable with respect to Cow3.x (case R)
// 8724.1-8724.136: (30.2): Cow3.x is not Read-Write Stable with respect to Cow3.x (case F)
// 8725.1-8725.136: (30.2): Cow3.x is not Read-Write Stable with respect to Cow3.x (case H)
// 8726.1-8726.146: (30.2): Cow3.x is not Read-Write Stable with respect to Cow3.x (case I)
// 8812.1-8812.136: (30.2): Cow3.x is not Write-Read Stable with respect to Cow3.x (case J)
// 8813.1-8813.136: (30.2): Cow3.x is not Write-Read Stable with respect to Cow3.x (case K)
// 8814.1-8814.99: (30.2): Cow3.x is not Write-Read Stable with respect to Cow3.x (case L)
// 8902.1-8902.140: (38.2): Cow4.x is not Write-Write Stable with respect to Cow3.x (case A.1)
// 8903.1-8903.101: (38.2): Cow4.x is not Write-Write Stable with respect to Cow3.x (case A.2)
// 8904.1-8904.156: (38.2): Cow4.x is not Write-Write Stable with respect to Cow3.x (case A.3)
// 9024.1-9024.140: (30.2): Cow3.x is not Write-Write Stable with respect to Cow4.x (case C)
// 9149.1-9149.144: (30.2): Cow3.x is not Write-Write Stable with respect to Cow4.x (case D)
// 9150.1-9150.144: (30.2): Cow3.x is not Write-Write Stable with respect to Cow4.x (case R)
// 9237.1-9237.136: (30.2): Cow3.x is not Read-Write Stable with respect to Cow4.x (case F)
// 9238.1-9238.136: (30.2): Cow3.x is not Read-Write Stable with respect to Cow4.x (case H)
// 9239.1-9239.144: (30.2): Cow3.x is not Read-Write Stable with respect to Cow4.x (case I)
// 9325.1-9325.136: (38.2): Cow4.x is not Write-Read Stable with respect to Cow3.x (case J)
// 9326.1-9326.136: (38.2): Cow4.x is not Write-Read Stable with respect to Cow3.x (case K)
// 9327.1-9327.99: (38.2): Cow4.x is not Write-Read Stable with respect to Cow3.x (case L)
// 9415.1-9415.140: (3.2): Cow.x is not Write-Write Stable with respect to Cow4.x (case A.1)
// 9416.1-9416.101: (3.2): Cow.x is not Write-Write Stable with respect to Cow4.x (case A.2)
// 9417.1-9417.156: (3.2): Cow.x is not Write-Write Stable with respect to Cow4.x (case A.3)
// 9537.1-9537.140: (38.2): Cow4.x is not Write-Write Stable with respect to Cow.x (case C)
// 9662.1-9662.144: (38.2): Cow4.x is not Write-Write Stable with respect to Cow.x (case D)
// 9663.1-9663.144: (38.2): Cow4.x is not Write-Write Stable with respect to Cow.x (case R)
// 9750.1-9750.136: (38.2): Cow4.x is not Read-Write Stable with respect to Cow.x (case F)
// 9751.1-9751.136: (38.2): Cow4.x is not Read-Write Stable with respect to Cow.x (case H)
// 9752.1-9752.144: (38.2): Cow4.x is not Read-Write Stable with respect to Cow.x (case I)
// 9838.1-9838.136: (3.2): Cow.x is not Write-Read Stable with respect to Cow4.x (case J)
// 9839.1-9839.136: (3.2): Cow.x is not Write-Read Stable with respect to Cow4.x (case K)
// 9840.1-9840.99: (3.2): Cow.x is not Write-Read Stable with respect to Cow4.x (case L)
// 9928.1-9928.140: (22.2): Cow2.x is not Write-Write Stable with respect to Cow4.x (case A.1)
// 9929.1-9929.101: (22.2): Cow2.x is not Write-Write Stable with respect to Cow4.x (case A.2)
// 9930.1-9930.156: (22.2): Cow2.x is not Write-Write Stable with respect to Cow4.x (case A.3)
// 10050.1-10050.140: (38.2): Cow4.x is not Write-Write Stable with respect to Cow2.x (case C)
// 10175.1-10175.144: (38.2): Cow4.x is not Write-Write Stable with respect to Cow2.x (case D)
// 10176.1-10176.144: (38.2): Cow4.x is not Write-Write Stable with respect to Cow2.x (case R)
// 10263.1-10263.136: (38.2): Cow4.x is not Read-Write Stable with respect to Cow2.x (case F)
// 10264.1-10264.136: (38.2): Cow4.x is not Read-Write Stable with respect to Cow2.x (case H)
// 10265.1-10265.144: (38.2): Cow4.x is not Read-Write Stable with respect to Cow2.x (case I)
// 10351.1-10351.136: (22.2): Cow2.x is not Write-Read Stable with respect to Cow4.x (case J)
// 10352.1-10352.136: (22.2): Cow2.x is not Write-Read Stable with respect to Cow4.x (case K)
// 10353.1-10353.99: (22.2): Cow2.x is not Write-Read Stable with respect to Cow4.x (case L)
// 10441.1-10441.140: (30.2): Cow3.x is not Write-Write Stable with respect to Cow4.x (case A.1)
// 10442.1-10442.101: (30.2): Cow3.x is not Write-Write Stable with respect to Cow4.x (case A.2)
// 10443.1-10443.156: (30.2): Cow3.x is not Write-Write Stable with respect to Cow4.x (case A.3)
// 10563.1-10563.140: (38.2): Cow4.x is not Write-Write Stable with respect to Cow3.x (case C)
// 10688.1-10688.144: (38.2): Cow4.x is not Write-Write Stable with respect to Cow3.x (case D)
// 10689.1-10689.144: (38.2): Cow4.x is not Write-Write Stable with respect to Cow3.x (case R)
// 10776.1-10776.136: (38.2): Cow4.x is not Read-Write Stable with respect to Cow3.x (case F)
// 10777.1-10777.136: (38.2): Cow4.x is not Read-Write Stable with respect to Cow3.x (case H)
// 10778.1-10778.144: (38.2): Cow4.x is not Read-Write Stable with respect to Cow3.x (case I)
// 10864.1-10864.136: (30.2): Cow3.x is not Write-Read Stable with respect to Cow4.x (case J)
// 10865.1-10865.136: (30.2): Cow3.x is not Write-Read Stable with respect to Cow4.x (case K)
// 10866.1-10866.99: (30.2): Cow3.x is not Write-Read Stable with respect to Cow4.x (case L)
// 10954.1-10954.140: (38.2): Cow4.x is not Write-Write Stable with respect to Cow4.x (case A.1)
// 10955.1-10955.101: (38.2): Cow4.x is not Write-Write Stable with respect to Cow4.x (case A.2)
// 10956.1-10956.158: (38.2): Cow4.x is not Write-Write Stable with respect to Cow4.x (case A.3)
// 11076.1-11076.140: (38.2): Cow4.x is not Write-Write Stable with respect to Cow4.x (case C)
// 11201.1-11201.144: (38.2): Cow4.x is not Write-Write Stable with respect to Cow4.x (case D)
// 11202.1-11202.144: (38.2): Cow4.x is not Write-Write Stable with respect to Cow4.x (case R)
// 11289.1-11289.136: (38.2): Cow4.x is not Read-Write Stable with respect to Cow4.x (case F)
// 11290.1-11290.136: (38.2): Cow4.x is not Read-Write Stable with respect to Cow4.x (case H)
// 11291.1-11291.146: (38.2): Cow4.x is not Read-Write Stable with respect to Cow4.x (case I)
// 11377.1-11377.136: (38.2): Cow4.x is not Write-Read Stable with respect to Cow4.x (case J)
// 11378.1-11378.136: (38.2): Cow4.x is not Write-Read Stable with respect to Cow4.x (case K)
// 11379.1-11379.99: (38.2): Cow4.x is not Write-Read Stable with respect to Cow4.x (case L)
// 11421.1-11449.2: (7.29): yields_as clause for Cow.x is not valid
// 11454.1-11477.2: (7.29): yields_as clause for Cow.x is not reflexive
// 11483.1-11529.2: (7.29): yields_as clause for Cow.x is not transitive
// 11549.1-11577.2: (7.32): yields_as clause for Cow._lock is not valid
// 11582.1-11605.2: (7.32): yields_as clause for Cow._lock is not reflexive
// 11611.1-11657.2: (7.32): yields_as clause for Cow._lock is not transitive
// 11678.1-11706.2: (26.29): yields_as clause for Cow2.x is not valid
// 11711.1-11734.2: (26.29): yields_as clause for Cow2.x is not reflexive
// 11740.1-11786.2: (26.29): yields_as clause for Cow2.x is not transitive
// 11806.1-11834.2: (7.32): yields_as clause for Cow2._lock is not valid
// 11839.1-11862.2: (7.32): yields_as clause for Cow2._lock is not reflexive
// 11868.1-11914.2: (7.32): yields_as clause for Cow2._lock is not transitive
// 11934.1-11962.2: (34.29): yields_as clause for Cow3.x is not valid
// 11967.1-11990.2: (34.29): yields_as clause for Cow3.x is not reflexive
// 11996.1-12042.2: (34.29): yields_as clause for Cow3.x is not transitive
// 12062.1-12090.2: (7.32): yields_as clause for Cow3._lock is not valid
// 12095.1-12118.2: (7.32): yields_as clause for Cow3._lock is not reflexive
// 12124.1-12170.2: (7.32): yields_as clause for Cow3._lock is not transitive
// 12190.1-12218.2: (42.29): yields_as clause for Cow4.x is not valid
// 12223.1-12246.2: (42.29): yields_as clause for Cow4.x is not reflexive
// 12252.1-12298.2: (42.29): yields_as clause for Cow4.x is not transitive
// 12318.1-12346.2: (7.32): yields_as clause for Cow4._lock is not valid
// 12351.1-12374.2: (7.32): yields_as clause for Cow4._lock is not reflexive
// 12380.1-12426.2: (7.32): yields_as clause for Cow4._lock is not transitive
