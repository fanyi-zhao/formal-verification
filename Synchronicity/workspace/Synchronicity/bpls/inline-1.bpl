                                                                                                    
 /*                                                                                                 
                                                                                                    
 /home/artifact/Synchronicity/workspace/Synchronicity/tests/inline-1.sink:                          
                                                                                                    
 AST:                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
    class Cow {                                                                                     
      array T = int[holds(this, tid) ? B : E]                                                       
                                                                                                    
      array S = int[holds(this, tid) ? B : E]                                                       
                                                                                                    
       [Cow.T{this}] a isRead ? B : E                                                               
                                                                                                    
       [Cow.S{this}] b isRead ? B : E                                                               
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      int get(int index) {                                                                          
        [Cow.T{this}] a;                                                                            
        a := this.a;                                                                                
        int v;                                                                                      
        v := a[index];                                                                              
         return v;                                                                                  
        // return -1;                                                                               
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      void set(int index,int value) {                                                               
        [Cow.T{this}] a;                                                                            
        a := this.a;                                                                                
        a[index] := value;                                                                          
        // return;                                                                                  
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      void cow(int index,int value) {                                                               
        this.set(index,value)                                                                       
        // return;                                                                                  
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      public void f0() {                                                                            
        [Cow.T{this}] a;                                                                            
        a := this.a;                                                                                
        this.set(0,0)                                                                               
        // return;                                                                                  
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      public void f1() {                                                                            
        synchronized (this) {                                                                       
          this.set(0,0)                                                                             
        }                                                                                           
        // return;                                                                                  
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      public void f2() {                                                                            
        synchronized (this) {                                                                       
          this.cow(0,1)                                                                             
        }                                                                                           
        // return;                                                                                  
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      public void f3() {                                                                            
        synchronized (this) {                                                                       
          int y;                                                                                    
          y = this.get(1)                                                                           
          this.cow(0,y)                                                                             
        }                                                                                           
        // return;                                                                                  
      }                                                                                             
                                                                                                    
    }                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
 Explicit:                                                                                          
                                                                                                    
                                                                                                    
                                                                                                    
    class Cow {                                                                                     
      array T = int[holds(this, tid) ? B : E]                                                       
                                                                                                    
      array S = int[holds(this, tid) ? B : E]                                                       
                                                                                                    
       [Cow.T{this}] a isRead ? B : E                                                               
                                                                                                    
       [Cow.S{this}] b isRead ? B : E                                                               
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      int get(int index) {                                                                          
        [Cow.T{this}] a;                                                                            
        a := this.a;                                                                                
        int v;                                                                                      
        v := a[index];                                                                              
        {                                                                                           
           return v;                                                                                
        }                                                                                           
        {                                                                                           
          // return -1;                                                                             
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      void set(int index,int value) {                                                               
        [Cow.T{this}] a;                                                                            
        a := this.a;                                                                                
        a[index] := value;                                                                          
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      void cow(int index,int value) {                                                               
        this.set(index,value)                                                                       
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      public void f0() {                                                                            
        [Cow.T{this}] a;                                                                            
        a := this.a;                                                                                
        this.set(0,0)                                                                               
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      public void f1() {                                                                            
        {                                                                                           
          acquire(this);                                                                            
          {                                                                                         
            this.set(0,0)                                                                           
          }                                                                                         
          release(this);                                                                            
        }                                                                                           
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      public void f2() {                                                                            
        {                                                                                           
          acquire(this);                                                                            
          {                                                                                         
            this.cow(0,1)                                                                           
          }                                                                                         
          release(this);                                                                            
        }                                                                                           
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      public void f3() {                                                                            
        {                                                                                           
          acquire(this);                                                                            
          {                                                                                         
            int y;                                                                                  
            y = this.get(1)                                                                         
            this.cow(0,y)                                                                           
          }                                                                                         
          release(this);                                                                            
        }                                                                                           
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
    }                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
 Inlined:                                                                                           
                                                                                                    
                                                                                                    
                                                                                                    
    class Cow {                                                                                     
      array T = int[holds(this, tid) ? B : E]                                                       
                                                                                                    
      array S = int[holds(this, tid) ? B : E]                                                       
                                                                                                    
       [Cow.T{this}] a isRead ? B : E                                                               
                                                                                                    
       [Cow.S{this}] b isRead ? B : E                                                               
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      int get(int index) {                                                                          
        [Cow.T{this}] a;                                                                            
        a := this.a;                                                                                
        int v;                                                                                      
        v := a[index];                                                                              
        {                                                                                           
           return v;                                                                                
        }                                                                                           
        {                                                                                           
          // return -1;                                                                             
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      void set(int index,int value) {                                                               
        [Cow.T{this}] a;                                                                            
        a := this.a;                                                                                
        a[index] := value;                                                                          
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      void cow(int index,int value) {                                                               
        this.set(index,value)                                                                       
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      public void f0() {                                                                            
        [Cow.T{this}] a;                                                                            
        a := this.a;                                                                                
        {                                                                                           
          inlined this.set(0,0);                                                                    
          exit$201: {                                                                               
            int index$201;                                                                          
            int value$201;                                                                          
            Cow this$201;                                                                           
            index$201 = 0;                                                                          
            value$201 = 0;                                                                          
            this$201 = this;                                                                        
            {                                                                                       
              [Cow.T{this$201}] a$201;                                                              
              a$201 := this$201.a;                                                                  
              a$201[index$201] := value$201;                                                        
              {                                                                                     
                break exit$201;                                                                     
              }                                                                                     
            }                                                                                       
          }                                                                                         
          inlined return;                                                                           
        }                                                                                           
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      public void f1() {                                                                            
        {                                                                                           
          acquire(this);                                                                            
          {                                                                                         
            {                                                                                       
              inlined this.set(0,0);                                                                
              exit$202: {                                                                           
                int index$202;                                                                      
                int value$202;                                                                      
                Cow this$202;                                                                       
                index$202 = 0;                                                                      
                value$202 = 0;                                                                      
                this$202 = this;                                                                    
                {                                                                                   
                  [Cow.T{this$202}] a$202;                                                          
                  a$202 := this$202.a;                                                              
                  a$202[index$202] := value$202;                                                    
                  {                                                                                 
                    break exit$202;                                                                 
                  }                                                                                 
                }                                                                                   
              }                                                                                     
              inlined return;                                                                       
            }                                                                                       
          }                                                                                         
          release(this);                                                                            
        }                                                                                           
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      public void f2() {                                                                            
        {                                                                                           
          acquire(this);                                                                            
          {                                                                                         
            {                                                                                       
              inlined this.cow(0,1);                                                                
              exit$203: {                                                                           
                int index$203;                                                                      
                int value$203;                                                                      
                Cow this$203;                                                                       
                index$203 = 0;                                                                      
                value$203 = 1;                                                                      
                this$203 = this;                                                                    
                {                                                                                   
                  {                                                                                 
                    inlined this$203.set(index$203,value$203);                                      
                    exit$204: {                                                                     
                      int index$204;                                                                
                      int value$204;                                                                
                      Cow this$204;                                                                 
                      index$204 = index$203;                                                        
                      value$204 = value$203;                                                        
                      this$204 = this$203;                                                          
                      {                                                                             
                        [Cow.T{this$204}] a$204;                                                    
                        a$204 := this$204.a;                                                        
                        a$204[index$204] := value$204;                                              
                        {                                                                           
                          break exit$204;                                                           
                        }                                                                           
                      }                                                                             
                    }                                                                               
                    inlined return;                                                                 
                  }                                                                                 
                  {                                                                                 
                    break exit$203;                                                                 
                  }                                                                                 
                }                                                                                   
              }                                                                                     
              inlined return;                                                                       
            }                                                                                       
          }                                                                                         
          release(this);                                                                            
        }                                                                                           
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      public void f3() {                                                                            
        {                                                                                           
          acquire(this);                                                                            
          {                                                                                         
            int y;                                                                                  
            {                                                                                       
              inlined y = this.get(1);                                                              
              exit$205: {                                                                           
                int index$205;                                                                      
                Cow this$205;                                                                       
                index$205 = 1;                                                                      
                this$205 = this;                                                                    
                {                                                                                   
                  [Cow.T{this$205}] a$205;                                                          
                  a$205 := this$205.a;                                                              
                  int v$205;                                                                        
                  v$205 := a$205[index$205];                                                        
                  {                                                                                 
                    {                                                                               
                      y = v$205;                                                                    
                      break exit$205;                                                               
                    }                                                                               
                  }                                                                                 
                  {                                                                                 
                    {                                                                               
                      y = -1;                                                                       
                      break exit$205;                                                               
                    }                                                                               
                  }                                                                                 
                }                                                                                   
              }                                                                                     
              inlined return;                                                                       
            }                                                                                       
            {                                                                                       
              inlined this.cow(0,y);                                                                
              exit$206: {                                                                           
                int index$206;                                                                      
                int value$206;                                                                      
                Cow this$206;                                                                       
                index$206 = 0;                                                                      
                value$206 = y;                                                                      
                this$206 = this;                                                                    
                {                                                                                   
                  {                                                                                 
                    inlined this$206.set(index$206,value$206);                                      
                    exit$207: {                                                                     
                      int index$207;                                                                
                      int value$207;                                                                
                      Cow this$207;                                                                 
                      index$207 = index$206;                                                        
                      value$207 = value$206;                                                        
                      this$207 = this$206;                                                          
                      {                                                                             
                        [Cow.T{this$207}] a$207;                                                    
                        a$207 := this$207.a;                                                        
                        a$207[index$207] := value$207;                                              
                        {                                                                           
                          break exit$207;                                                           
                        }                                                                           
                      }                                                                             
                    }                                                                               
                    inlined return;                                                                 
                  }                                                                                 
                  {                                                                                 
                    break exit$206;                                                                 
                  }                                                                                 
                }                                                                                   
              }                                                                                     
              inlined return;                                                                       
            }                                                                                       
          }                                                                                         
          release(this);                                                                            
        }                                                                                           
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
    }                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
 Prepared:                                                                                          
                                                                                                    
                                                                                                    
                                                                                                    
    class Cow {                                                                                     
      array T = int[holds(this, tid) ? B : E]                                                       
                                                                                                    
      array S = int[holds(this, tid) ? B : E]                                                       
                                                                                                    
       [Cow.T{this}] a isRead ? B : E                                                               
                                                                                                    
       [Cow.S{this}] b isRead ? B : E                                                               
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      int get(int index) {                                                                          
        [Cow.T{this}] a;                                                                            
        a := this.a;                                                                                
        int v;                                                                                      
        v := a[index];                                                                              
        {                                                                                           
           return v;                                                                                
        }                                                                                           
        {                                                                                           
          // return -1;                                                                             
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      void set(int index,int value) {                                                               
        [Cow.T{this}] a;                                                                            
        a := this.a;                                                                                
        a[index] := value;                                                                          
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      void cow(int index,int value) {                                                               
        this.set(index,value)                                                                       
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      public void f0() {                                                                            
        [Cow.T{this}] a;                                                                            
        a := this.a;                                                                                
        {                                                                                           
          inlined this.set(0,0);                                                                    
          exit$201: {                                                                               
            int index$201;                                                                          
            int value$201;                                                                          
            Cow this$201;                                                                           
            index$201 = 0;                                                                          
            value$201 = 0;                                                                          
            this$201 = this;                                                                        
            {                                                                                       
              [Cow.T{this$201}] a$201;                                                              
              a$201 := this$201.a;                                                                  
              a$201[index$201] := value$201;                                                        
              {                                                                                     
                break exit$201;                                                                     
              }                                                                                     
            }                                                                                       
          }                                                                                         
          inlined return;                                                                           
        }                                                                                           
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      public void f1() {                                                                            
        {                                                                                           
          acquire(this);                                                                            
          {                                                                                         
            {                                                                                       
              inlined this.set(0,0);                                                                
              exit$202: {                                                                           
                int index$202;                                                                      
                int value$202;                                                                      
                Cow this$202;                                                                       
                index$202 = 0;                                                                      
                value$202 = 0;                                                                      
                this$202 = this;                                                                    
                {                                                                                   
                  [Cow.T{this$202}] a$202;                                                          
                  a$202 := this$202.a;                                                              
                  a$202[index$202] := value$202;                                                    
                  {                                                                                 
                    break exit$202;                                                                 
                  }                                                                                 
                }                                                                                   
              }                                                                                     
              inlined return;                                                                       
            }                                                                                       
          }                                                                                         
          release(this);                                                                            
        }                                                                                           
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      public void f2() {                                                                            
        {                                                                                           
          acquire(this);                                                                            
          {                                                                                         
            {                                                                                       
              inlined this.cow(0,1);                                                                
              exit$203: {                                                                           
                int index$203;                                                                      
                int value$203;                                                                      
                Cow this$203;                                                                       
                index$203 = 0;                                                                      
                value$203 = 1;                                                                      
                this$203 = this;                                                                    
                {                                                                                   
                  {                                                                                 
                    inlined this$203.set(index$203,value$203);                                      
                    exit$204: {                                                                     
                      int index$204;                                                                
                      int value$204;                                                                
                      Cow this$204;                                                                 
                      index$204 = index$203;                                                        
                      value$204 = value$203;                                                        
                      this$204 = this$203;                                                          
                      {                                                                             
                        [Cow.T{this$204}] a$204;                                                    
                        a$204 := this$204.a;                                                        
                        a$204[index$204] := value$204;                                              
                        {                                                                           
                          break exit$204;                                                           
                        }                                                                           
                      }                                                                             
                    }                                                                               
                    inlined return;                                                                 
                  }                                                                                 
                  {                                                                                 
                    break exit$203;                                                                 
                  }                                                                                 
                }                                                                                   
              }                                                                                     
              inlined return;                                                                       
            }                                                                                       
          }                                                                                         
          release(this);                                                                            
        }                                                                                           
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      public void f3() {                                                                            
        {                                                                                           
          acquire(this);                                                                            
          {                                                                                         
            int y;                                                                                  
            {                                                                                       
              inlined y = this.get(1);                                                              
              exit$205: {                                                                           
                int index$205;                                                                      
                Cow this$205;                                                                       
                index$205 = 1;                                                                      
                this$205 = this;                                                                    
                {                                                                                   
                  [Cow.T{this$205}] a$205;                                                          
                  a$205 := this$205.a;                                                              
                  int v$205;                                                                        
                  v$205 := a$205[index$205];                                                        
                  {                                                                                 
                    {                                                                               
                      y = v$205;                                                                    
                      break exit$205;                                                               
                    }                                                                               
                  }                                                                                 
                  {                                                                                 
                    {                                                                               
                      y = -1;                                                                       
                      break exit$205;                                                               
                    }                                                                               
                  }                                                                                 
                }                                                                                   
              }                                                                                     
              inlined return;                                                                       
            }                                                                                       
            {                                                                                       
              inlined this.cow(0,y);                                                                
              exit$206: {                                                                           
                int index$206;                                                                      
                int value$206;                                                                      
                Cow this$206;                                                                       
                index$206 = 0;                                                                      
                value$206 = y;                                                                      
                this$206 = this;                                                                    
                {                                                                                   
                  {                                                                                 
                    inlined this$206.set(index$206,value$206);                                      
                    exit$207: {                                                                     
                      int index$207;                                                                
                      int value$207;                                                                
                      Cow this$207;                                                                 
                      index$207 = index$206;                                                        
                      value$207 = value$206;                                                        
                      this$207 = this$206;                                                          
                      {                                                                             
                        [Cow.T{this$207}] a$207;                                                    
                        a$207 := this$207.a;                                                        
                        a$207[index$207] := value$207;                                              
                        {                                                                           
                          break exit$207;                                                           
                        }                                                                           
                      }                                                                             
                    }                                                                               
                    inlined return;                                                                 
                  }                                                                                 
                  {                                                                                 
                    break exit$206;                                                                 
                  }                                                                                 
                }                                                                                   
              }                                                                                     
              inlined return;                                                                       
            }                                                                                       
          }                                                                                         
          release(this);                                                                            
        }                                                                                           
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
    }                                                                                               
                                                                                                    
                                                                                                    
 */                                                                                                 
                                                                                                    
//// Background                                                                                     
                                                                                                    
                                                                                                    
 /*                                                                                                 
 * Tid                                                                                              
 */                                                                                                 
 type Tid = int;  // make int so you can iterate over Tids                                          
 const unique Tid.null: Tid;                                                                        
 axiom Tid.null == -1;                                                                              
                                                                                                    
 function {:inline} ValidTid(tid : Tid): bool {                                                     
  tid != Tid.null && tid >= 0                                                                       
 }                                                                                                  
                                                                                                    
 type{:datatype} State;                                                                             
 function{:constructor} NULL(): State;                                                              
 function{:constructor} FRESH(): State;                                                             
 function{:constructor} LOCAL(t: Tid): State;                                                       
 function{:constructor} SHARED(): State;                                                            
                                                                                                    
 function {:inline} isNull(state: State) : bool {                                                   
  state == NULL()                                                                                   
 }                                                                                                  
                                                                                                    
 function {:inline} isFresh(state: State) : bool {                                                  
  state == FRESH()                                                                                  
 }                                                                                                  
                                                                                                    
 function {:inline} isShared(state: State) : bool {                                                 
  state == SHARED()                                                                                 
 }                                                                                                  
                                                                                                    
 function {:inline} isLocal(state: State, t: Tid) : bool {                                          
  state == LOCAL(t)                                                                                 
 }                                                                                                  
                                                                                                    
 function {:inline} isLocalAssignable(state: State, t: Tid) : bool {                                
  state == LOCAL(t) || state == SHARED() || state == NULL()                                         
 }                                                                                                  
                                                                                                    
 function {:inline} isSharedAssignable(state: State) : bool {                                       
  state == SHARED() || state == NULL()                                                              
 }                                                                                                  
                                                                                                    
 function {:inline} isAccessible(state: State, t: Tid) : bool {                                     
  state == LOCAL(t) || state == SHARED()                                                            
 }                                                                                                  
                                                                                                    
 function {:inline} isAllocated(state: State) : bool {                                              
  !isFresh(state) && !isNull(state)                                                                 
 }                                                                                                  
                                                                                                    
                                                                                                    
 function MOD(x:int, y:int): int;                                                                   
                                                                                                    
                                                                                                    
 /*                                                                                                 
 * For triggers                                                                                     
 */                                                                                                 
 function {:inline false} _trigger(i: int): bool {  true  }                                         
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 type Phase;                                                                                        
 const unique PreCommit : Phase;                                                                    
 const unique PostCommit : Phase;                                                                   
 const unique PhaseError : Phase;                                                                   
                                                                                                    
 function {:inline} transition(p: Phase, m: Mover): Phase {                                         
  if (m == _B) then                                                                                 
   p                                                                                                
  else if (m == _R) then                                                                            
   if (p == PreCommit) then                                                                         
    PreCommit                                                                                       
   else                                                                                             
    PhaseError                                                                                      
  else if (m == _L) then                                                                            
   if (p == PostCommit) then                                                                        
    PostCommit                                                                                      
   else if (p == PreCommit) then                                                                    
    PostCommit                                                                                      
   else                                                                                             
    PhaseError                                                                                      
  else if (m == _N) then                                                                            
   if (p == PreCommit) then                                                                         
    PostCommit                                                                                      
   else                                                                                             
    PhaseError                                                                                      
  else                                                                                              
   PhaseError // m == E or m == I                                                                   
 }                                                                                                  
                                                                                                    
                                                                                                    
 type Mover;                                                                                        
 const unique _B : Mover;                                                                           
 const unique _R : Mover;                                                                           
 const unique _L : Mover;                                                                           
 const unique _N : Mover;                                                                           
 const unique _E : Mover;                                                                           
                                                                                                    
 axiom (forall m : Mover :: m == _B || m == _R || m == _L || m == _N || m == _E);                   
                                                                                                    
 function {:inline} leq(m1: Mover, m2: Mover) : bool {                                              
  if (m1 == _B) then                                                                                
   true                                                                                             
  else if (m1 == _R) then                                                                           
   m2 == _R || m2 == _N || m2 == _E                                                                 
  else if (m1 == _L) then                                                                           
   m2 == _L || m2 == _N || m2 == _E                                                                 
  else if (m1 == _N) then                                                                           
   m2 == _N || m2 == _E                                                                             
  else if (m1 == _E) then                                                                           
   m2 == _E                                                                                         
  else                                                                                              
   false // should never happen...                                                                  
 }                                                                                                  
                                                                                                    
 function {:inline} lt(m1: Mover, m2: Mover) : bool { m1 != m2 && leq(m1, m2) }                     
                                                                                                    
 function {:inline} isError(m : Mover) : bool {                                                     
  m == _E                                                                                           
 }                                                                                                  
                                                                                                    
 function {:inline} eqOrError(m : Mover, n : Mover) : bool {                                        
  m == n || m == _E                                                                                 
 }                                                                                                  
                                                                                                    
 type{:datatype} MoverPath;                                                                         
 function{:constructor} moverPath(m:Mover, p:int):MoverPath;                                        
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
//// axioms                                                                                         
                                                                                                    
                                                                                                    
//// classes                                                                                        
                                                                                                    
                                                                                                    
/*** Class Decl Cow ***/                                                                            
                                                                                                    
type Cow;                                                                                           
const unique Cow.null: Cow;                                                                         
var Cow._state: [Cow]State;                                                                         
                                                                                                    
                                                                                                    
/////                                                                                               
                                                                                                    
var Cow.a: [Cow]Array.Cow.T;                                                                        
                                                                                                    
function {:inline} ReadEval.Cow.a(tid: Tid,this : Cow,Cow._state: [Cow]State,Cow.a: [Cow]Array.Cow.T,Cow.b: [Cow]Array.Cow.S,Cow._lock: [Cow]Tid,Array.Cow.T._state: [Array.Cow.T]State,Array.Cow.T._elems: [Array.Cow.T]([int]int),Array.Cow.T._length: [Array.Cow.T]int,Array.Cow.S._state: [Array.Cow.S]State,Array.Cow.S._elems: [Array.Cow.S]([int]int),Array.Cow.S._length: [Array.Cow.S]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := Array.Cow.T.null;                                                                 
 if (isRead) then                                                                                   
  moverPath(_B, 1)                                                                                  
 else                                                                                               
  moverPath(_E, 0)                                                                                  
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.Cow.a(tid: Tid,this : Cow,newValue: Array.Cow.T,Cow._state: [Cow]State,Cow.a: [Cow]Array.Cow.T,Cow.b: [Cow]Array.Cow.S,Cow._lock: [Cow]Tid,Array.Cow.T._state: [Array.Cow.T]State,Array.Cow.T._elems: [Array.Cow.T]([int]int),Array.Cow.T._length: [Array.Cow.T]int,Array.Cow.S._state: [Array.Cow.S]State,Array.Cow.S._elems: [Array.Cow.S]([int]int),Array.Cow.S._length: [Array.Cow.S]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isRead) then                                                                                   
  moverPath(_B, 1)                                                                                  
 else                                                                                               
  moverPath(_E, 0)                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
var Cow.b: [Cow]Array.Cow.S;                                                                        
                                                                                                    
function {:inline} ReadEval.Cow.b(tid: Tid,this : Cow,Cow._state: [Cow]State,Cow.a: [Cow]Array.Cow.T,Cow.b: [Cow]Array.Cow.S,Cow._lock: [Cow]Tid,Array.Cow.T._state: [Array.Cow.T]State,Array.Cow.T._elems: [Array.Cow.T]([int]int),Array.Cow.T._length: [Array.Cow.T]int,Array.Cow.S._state: [Array.Cow.S]State,Array.Cow.S._elems: [Array.Cow.S]([int]int),Array.Cow.S._length: [Array.Cow.S]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := Array.Cow.S.null;                                                                 
 if (isRead) then                                                                                   
  moverPath(_B, 1)                                                                                  
 else                                                                                               
  moverPath(_E, 0)                                                                                  
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.Cow.b(tid: Tid,this : Cow,newValue: Array.Cow.S,Cow._state: [Cow]State,Cow.a: [Cow]Array.Cow.T,Cow.b: [Cow]Array.Cow.S,Cow._lock: [Cow]Tid,Array.Cow.T._state: [Array.Cow.T]State,Array.Cow.T._elems: [Array.Cow.T]([int]int),Array.Cow.T._length: [Array.Cow.T]int,Array.Cow.S._state: [Array.Cow.S]State,Array.Cow.S._elems: [Array.Cow.S]([int]int),Array.Cow.S._length: [Array.Cow.S]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isRead) then                                                                                   
  moverPath(_B, 1)                                                                                  
 else                                                                                               
  moverPath(_E, 0)                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
var Cow._lock: [Cow]Tid;                                                                            
                                                                                                    
function {:inline} ReadEval.Cow._lock(tid: Tid,this : Cow,Cow._state: [Cow]State,Cow.a: [Cow]Array.Cow.T,Cow.b: [Cow]Array.Cow.S,Cow._lock: [Cow]Tid,Array.Cow.T._state: [Array.Cow.T]State,Array.Cow.T._elems: [Array.Cow.T]([int]int),Array.Cow.T._length: [Array.Cow.T]int,Array.Cow.S._state: [Array.Cow.S]State,Array.Cow.S._elems: [Array.Cow.S]([int]int),Array.Cow.S._length: [Array.Cow.S]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := Tid.null;                                                                         
 if (isLocal(Cow._state[this], tid)) then                                                           
  if (isRead) then                                                                                  
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   if (((newValue==tid)||(newValue==Tid.null))) then                                                
    moverPath(_B, 5)                                                                                
   else                                                                                             
    moverPath(_E, 1)                                                                                
 else                                                                                               
  if (isRead) then                                                                                  
   if ((Cow._lock[this]==tid)) then                                                                 
    moverPath(_R, 6)                                                                                
   else                                                                                             
    moverPath(_E, 2)                                                                                
  else                                                                                              
   if (((Cow._lock[this]==Tid.null)&&(newValue==tid))) then                                         
    moverPath(_R, 4)                                                                                
   else                                                                                             
    if (((Cow._lock[this]==tid)&&(newValue==Tid.null))) then                                        
     moverPath(_L, 8)                                                                               
    else                                                                                            
     moverPath(_E, 0)                                                                               
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.Cow._lock(tid: Tid,this : Cow,newValue: Tid,Cow._state: [Cow]State,Cow.a: [Cow]Array.Cow.T,Cow.b: [Cow]Array.Cow.S,Cow._lock: [Cow]Tid,Array.Cow.T._state: [Array.Cow.T]State,Array.Cow.T._elems: [Array.Cow.T]([int]int),Array.Cow.T._length: [Array.Cow.T]int,Array.Cow.S._state: [Array.Cow.S]State,Array.Cow.S._elems: [Array.Cow.S]([int]int),Array.Cow.S._length: [Array.Cow.S]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(Cow._state[this], tid)) then                                                           
  if (isRead) then                                                                                  
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   if (((newValue==tid)||(newValue==Tid.null))) then                                                
    moverPath(_B, 5)                                                                                
   else                                                                                             
    moverPath(_E, 1)                                                                                
 else                                                                                               
  if (isRead) then                                                                                  
   if ((Cow._lock[this]==tid)) then                                                                 
    moverPath(_R, 6)                                                                                
   else                                                                                             
    moverPath(_E, 2)                                                                                
  else                                                                                              
   if (((Cow._lock[this]==Tid.null)&&(newValue==tid))) then                                         
    moverPath(_R, 4)                                                                                
   else                                                                                             
    if (((Cow._lock[this]==tid)&&(newValue==Tid.null))) then                                        
     moverPath(_L, 8)                                                                               
    else                                                                                            
     moverPath(_E, 0)                                                                               
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
                                                                                                    
procedure  Cow.f0(tid:Tid, this : Cow)                                                              
modifies Cow._state;                                                                                
modifies Cow.a;                                                                                     
modifies Cow.b;                                                                                     
modifies Cow._lock;                                                                                 
modifies Array.Cow.T._state;                                                                        
modifies Array.Cow.T._elems;                                                                        
modifies Array.Cow.S._state;                                                                        
modifies Array.Cow.S._elems;                                                                        
                                                                                                    
requires ValidTid(tid);                                                                                    // (23.5): Bad tid
requires isShared(Cow._state[this]);                                                                       // (23.5): this is not global
                                                                                                    
requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
                                                                                                    
ensures StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
{                                                                                                   
 var tid2275916: Tid;                                                                               
 var Cow.b2275940: [Cow]Array.Cow.S;                                                                
 var Array.Cow.S._length2275940: [Array.Cow.S]int;                                                  
 var $recorded.state2275958: int;                                                                   
 var Array.Cow.T._state2275916: [Array.Cow.T]State;                                                 
 var Array.Cow.S._length2275916: [Array.Cow.S]int;                                                  
 var Cow.a2275958: [Cow]Array.Cow.T;                                                                
 var Array.Cow.S._state2275944: [Array.Cow.S]State;                                                 
 var tid2275958: Tid;                                                                               
 var Cow.a2275916: [Cow]Array.Cow.T;                                                                
 var Array.Cow.T._state2275940: [Array.Cow.T]State;                                                 
 var moverPath2275916: MoverPath;                                                                   
 var $recorded.state2275916: int;                                                                   
 var Cow._lock2275944: [Cow]Tid;                                                                    
 var Cow.b2275916: [Cow]Array.Cow.S;                                                                
 var value$2012275940: int;                                                                         
 var this2275958: Cow;                                                                              
 var index$2012275940: int;                                                                         
 var Cow.b2275958: [Cow]Array.Cow.S;                                                                
 var a2275940: Array.Cow.T;                                                                         
 var Cow._lock2275940: [Cow]Tid;                                                                    
 var this2275944: Cow;                                                                              
 var tid2275940: Tid;                                                                               
 var this$2012275940: Cow;                                                                          
 var mover2275916: Mover;                                                                           
 var Array.Cow.T._length2275916: [Array.Cow.T]int;                                                  
 var Array.Cow.S._elems2275958: [Array.Cow.S]([int]int);                                            
 var this2275916: Cow;                                                                              
 var Array.Cow.S._elems2275944: [Array.Cow.S]([int]int);                                            
 var index$201: int;                                                                                
 var value$201: int;                                                                                
 var Array.Cow.T._elems2275916: [Array.Cow.T]([int]int);                                            
 var path2275916: int;                                                                              
 var Cow._lock2275958: [Cow]Tid;                                                                    
 var value$2012275944: int;                                                                         
 var $pc2275940: Phase;                                                                             
 var Array.Cow.T._state2275958: [Array.Cow.T]State;                                                 
 var Cow.b2275944: [Cow]Array.Cow.S;                                                                
 var a2275916: Array.Cow.T;                                                                         
 var Cow.a2275940: [Cow]Array.Cow.T;                                                                
 var moverPath2275944: MoverPath;                                                                   
 var $pc2275944: Phase;                                                                             
 var mover2275944: Mover;                                                                           
 var a2275958: Array.Cow.T;                                                                         
 var Cow._state2275958: [Cow]State;                                                                 
 var Array.Cow.S._elems2275916: [Array.Cow.S]([int]int);                                            
 var a$2012275944: Array.Cow.T;                                                                     
 var Array.Cow.S._length2275958: [Array.Cow.S]int;                                                  
 var Cow._state2275940: [Cow]State;                                                                 
 var $pc2275916: Phase;                                                                             
 var this$2012275944: Cow;                                                                          
 var Cow._state2275944: [Cow]State;                                                                 
 var Array.Cow.S._state2275958: [Array.Cow.S]State;                                                 
 var Array.Cow.T._state2275944: [Array.Cow.T]State;                                                 
 var a$201: Array.Cow.T;                                                                            
 var mover2275940: Mover;                                                                           
 var moverPath2275940: MoverPath;                                                                   
 var Array.Cow.S._state2275940: [Array.Cow.S]State;                                                 
 var Array.Cow.S._length2275944: [Array.Cow.S]int;                                                  
 var Array.Cow.T._elems2275944: [Array.Cow.T]([int]int);                                            
 var tid2275944: Tid;                                                                               
 var $recorded.state2275944: int;                                                                   
 var path2275944: int;                                                                              
 var Array.Cow.T._length2275940: [Array.Cow.T]int;                                                  
 var $pc2275958: Phase;                                                                             
 var Array.Cow.T._elems2275940: [Array.Cow.T]([int]int);                                            
 var Array.Cow.T._length2275958: [Array.Cow.T]int;                                                  
 var this$201: Cow;                                                                                 
 var Array.Cow.T._elems2275958: [Array.Cow.T]([int]int);                                            
 var path2275940: int;                                                                              
 var Array.Cow.S._state2275916: [Array.Cow.S]State;                                                 
 var Array.Cow.T._length2275944: [Array.Cow.T]int;                                                  
 var a2275944: Array.Cow.T;                                                                         
 var a: Array.Cow.T;                                                                                
 var $recorded.state2275940: int;                                                                   
 var this2275940: Cow;                                                                              
 var Cow._state2275916: [Cow]State;                                                                 
 var Array.Cow.S._elems2275940: [Array.Cow.S]([int]int);                                            
 var a$2012275940: Array.Cow.T;                                                                     
 var Cow._lock2275916: [Cow]Tid;                                                                    
 var Cow.a2275944: [Cow]Array.Cow.T;                                                                
 var index$2012275944: int;                                                                         
                                                                                                    
 var $pc : Phase;                                                                                   
 $pc := PreCommit;                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 // 24.9: [Cow.T{this}] a;                                                                          
                                                                                                    
                                                                                                    
 // 24.9: a := this.a;                                                                              
                                                                                                    
                                                                                                    
 moverPath2275916 := ReadEval.Cow.a(tid: Tid,this: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 mover2275916 := m#moverPath(moverPath2275916);                                                     
 path2275916 := p#moverPath(moverPath2275916);                                                      
 assume Cow._state2275916 == Cow._state && Cow.a2275916 == Cow.a && Cow.b2275916 == Cow.b && Cow._lock2275916 == Cow._lock && Array.Cow.T._state2275916 == Array.Cow.T._state && Array.Cow.T._elems2275916 == Array.Cow.T._elems && Array.Cow.T._length2275916 == Array.Cow.T._length && Array.Cow.S._state2275916 == Array.Cow.S._state && Array.Cow.S._elems2275916 == Array.Cow.S._elems && Array.Cow.S._length2275916 == Array.Cow.S._length && a2275916 == a && this2275916 == this && tid2275916 == tid && $pc2275916 == $pc;
 assume $recorded.state2275916 == 1;                                                                
 if ($pc == PreCommit) {                                                                            
  assume this != Cow.null;                                                                          
 } else {                                                                                           
  assert this != Cow.null;                                                                                 // (24.9): Cannot have potential null deference in left-mover part.
 }                                                                                                  
                                                                                                    
 $pc := transition($pc, mover2275916);                                                              
 assert $pc != PhaseError;                                                                                 // (24.9): Reduction failure
 a := Cow.a[this];                                                                                  
 // inlined: this.set(0,0)}                                                                         
 exit$201_top:                                                                                      
                                                                                                    
 // 25.9: int index$201;                                                                            
                                                                                                    
                                                                                                    
 // 25.9: int value$201;                                                                            
                                                                                                    
                                                                                                    
 // 25.9: Cow this$201;                                                                             
                                                                                                    
                                                                                                    
 // 25.9: index$201 = 0;                                                                            
                                                                                                    
 index$201 := 0;                                                                                    
                                                                                                    
 // 25.9: value$201 = 0;                                                                            
                                                                                                    
 value$201 := 0;                                                                                    
                                                                                                    
 // 25.9: this$201 = this;                                                                          
                                                                                                    
 this$201 := this;                                                                                  
                                                                                                    
 // 15.9: [Cow.T{this$201}] a$201;                                                                  
                                                                                                    
                                                                                                    
 // 15.9: a$201 := this$201.a;                                                                      
                                                                                                    
                                                                                                    
 moverPath2275940 := ReadEval.Cow.a(tid: Tid,this$201: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 mover2275940 := m#moverPath(moverPath2275940);                                                     
 path2275940 := p#moverPath(moverPath2275940);                                                      
 assume Cow._state2275940 == Cow._state && Cow.a2275940 == Cow.a && Cow.b2275940 == Cow.b && Cow._lock2275940 == Cow._lock && Array.Cow.T._state2275940 == Array.Cow.T._state && Array.Cow.T._elems2275940 == Array.Cow.T._elems && Array.Cow.T._length2275940 == Array.Cow.T._length && Array.Cow.S._state2275940 == Array.Cow.S._state && Array.Cow.S._elems2275940 == Array.Cow.S._elems && Array.Cow.S._length2275940 == Array.Cow.S._length && a$2012275940 == a$201 && this$2012275940 == this$201 && value$2012275940 == value$201 && index$2012275940 == index$201 && a2275940 == a && this2275940 == this && tid2275940 == tid && $pc2275940 == $pc;
 assume $recorded.state2275940 == 1;                                                                
 if ($pc == PreCommit) {                                                                            
  assume this$201 != Cow.null;                                                                      
 } else {                                                                                           
  assert this$201 != Cow.null;                                                                             // (15.9): Cannot have potential null deference in left-mover part.
 }                                                                                                  
                                                                                                    
 $pc := transition($pc, mover2275940);                                                              
 assert $pc != PhaseError;                                                                                 // (15.9): Reduction failure
 a$201 := Cow.a[this$201];                                                                          
                                                                                                    
 // 16.9: a$201[index$201] := value$201;                                                            
                                                                                                    
                                                                                                    
 moverPath2275944 := WriteEval.Array.Cow.T(tid: Tid,this$201: Cow,a$201: Array.Cow.T,index$201: int,value$201: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 mover2275944 := m#moverPath(moverPath2275944);                                                     
 path2275944 := p#moverPath(moverPath2275944);                                                      
 assume Cow._state2275944 == Cow._state && Cow.a2275944 == Cow.a && Cow.b2275944 == Cow.b && Cow._lock2275944 == Cow._lock && Array.Cow.T._state2275944 == Array.Cow.T._state && Array.Cow.T._elems2275944 == Array.Cow.T._elems && Array.Cow.T._length2275944 == Array.Cow.T._length && Array.Cow.S._state2275944 == Array.Cow.S._state && Array.Cow.S._elems2275944 == Array.Cow.S._elems && Array.Cow.S._length2275944 == Array.Cow.S._length && a$2012275944 == a$201 && this$2012275944 == this$201 && value$2012275944 == value$201 && index$2012275944 == index$201 && a2275944 == a && this2275944 == this && tid2275944 == tid && $pc2275944 == $pc;
 assume $recorded.state2275944 == 1;                                                                
 if ($pc == PreCommit) {                                                                            
  assume a$201 != Array.Cow.T.null;                                                                 
 } else {                                                                                           
  assert a$201 != Array.Cow.T.null;                                                                        // (16.9): Cannot have potential null deference in left-mover part.
 }                                                                                                  
 if ($pc == PreCommit) {                                                                            
  assume 0 <= index$201;                                                                            
 } else {                                                                                           
  assert 0 <= index$201;                                                                                   // (16.9): index < 0.
 }                                                                                                  
 if ($pc == PreCommit) {                                                                            
  assume index$201 < Array.Cow.T._length[a$201];                                                    
 } else {                                                                                           
  assert index$201 < Array.Cow.T._length[a$201];                                                           // (16.9): index is >= length.
 }                                                                                                  
                                                                                                    
 $pc := transition($pc, mover2275944);                                                              
 assert $pc != PhaseError;                                                                                 // (16.9): Reduction failure
 Array.Cow.T._elems[a$201][index$201] := value$201;                                                 
                                                                                                    
 // 14.36: break exit$201;                                                                          
                                                                                                    
 goto exit$201_bottom;                                                                              
 exit$201_bottom:                                                                                   
                                                                                                    
 // 23.22: // return;                                                                               
                                                                                                    
 assume Cow._state2275958 == Cow._state && Cow.a2275958 == Cow.a && Cow.b2275958 == Cow.b && Cow._lock2275958 == Cow._lock && Array.Cow.T._state2275958 == Array.Cow.T._state && Array.Cow.T._elems2275958 == Array.Cow.T._elems && Array.Cow.T._length2275958 == Array.Cow.T._length && Array.Cow.S._state2275958 == Array.Cow.S._state && Array.Cow.S._elems2275958 == Array.Cow.S._elems && Array.Cow.S._length2275958 == Array.Cow.S._length && a2275958 == a && this2275958 == this && tid2275958 == tid;
 assume $recorded.state2275958 == 1;                                                                
 return;                                                                                            
}                                                                                                   
                                                                                                    
                                                                                                    
procedure  Cow.f1(tid:Tid, this : Cow)                                                              
modifies Cow._state;                                                                                
modifies Cow.a;                                                                                     
modifies Cow.b;                                                                                     
modifies Cow._lock;                                                                                 
modifies Array.Cow.T._state;                                                                        
modifies Array.Cow.T._elems;                                                                        
modifies Array.Cow.S._state;                                                                        
modifies Array.Cow.S._elems;                                                                        
                                                                                                    
requires ValidTid(tid);                                                                                    // (28.5): Bad tid
requires isShared(Cow._state[this]);                                                                       // (28.5): this is not global
                                                                                                    
requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
                                                                                                    
ensures StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
{                                                                                                   
 var Cow.a2275991: [Cow]Array.Cow.T;                                                                
 var this2275987: Cow;                                                                              
 var Array.Cow.T._state2275987: [Array.Cow.T]State;                                                 
 var Array.Cow.S._length2275987: [Array.Cow.S]int;                                                  
 var Cow._state2276009: [Cow]State;                                                                 
 var Cow._state2275987: [Cow]State;                                                                 
 var path2275987: int;                                                                              
 var Array.Cow.T._state2275991: [Array.Cow.T]State;                                                 
 var Array.Cow.T._length2275991: [Array.Cow.T]int;                                                  
 var moverPath2275991: MoverPath;                                                                   
 var mover2275987: Mover;                                                                           
 var index$202: int;                                                                                
 var this$2022275987: Cow;                                                                          
 var Cow._lock2276009: [Cow]Tid;                                                                    
 var Cow.b2275987: [Cow]Array.Cow.S;                                                                
 var $recorded.state2275987: int;                                                                   
 var $pc2275991: Phase;                                                                             
 var tid2275991: Tid;                                                                               
 var Array.Cow.S._elems2275987: [Array.Cow.S]([int]int);                                            
 var Cow._state2275991: [Cow]State;                                                                 
 var mover2275991: Mover;                                                                           
 var Array.Cow.S._elems2276009: [Array.Cow.S]([int]int);                                            
 var value$2022275991: int;                                                                         
 var moverPath2275987: MoverPath;                                                                   
 var index$2022275987: int;                                                                         
 var this$2022275991: Cow;                                                                          
 var $recorded.state2275991: int;                                                                   
 var Array.Cow.T._state2276009: [Array.Cow.T]State;                                                 
 var Array.Cow.S._state2276009: [Array.Cow.S]State;                                                 
 var a$2022275987: Array.Cow.T;                                                                     
 var Array.Cow.T._elems2275991: [Array.Cow.T]([int]int);                                            
 var Cow._lock2275991: [Cow]Tid;                                                                    
 var Cow._lock2275987: [Cow]Tid;                                                                    
 var Array.Cow.S._state2275991: [Array.Cow.S]State;                                                 
 var Cow.b2275991: [Cow]Array.Cow.S;                                                                
 var Array.Cow.S._length2275991: [Array.Cow.S]int;                                                  
 var Cow.a2276009: [Cow]Array.Cow.T;                                                                
 var Array.Cow.S._length2276009: [Array.Cow.S]int;                                                  
 var tid2275987: Tid;                                                                               
 var path2275991: int;                                                                              
 var $pc2275987: Phase;                                                                             
 var value$202: int;                                                                                
 var Array.Cow.T._length2276009: [Array.Cow.T]int;                                                  
 var Cow.b2276009: [Cow]Array.Cow.S;                                                                
 var this2276009: Cow;                                                                              
 var Array.Cow.T._elems2276009: [Array.Cow.T]([int]int);                                            
 var this$202: Cow;                                                                                 
 var Cow.a2275987: [Cow]Array.Cow.T;                                                                
 var $pc2276009: Phase;                                                                             
 var index$2022275991: int;                                                                         
 var a$2022275991: Array.Cow.T;                                                                     
 var tid2276009: Tid;                                                                               
 var $recorded.state2276009: int;                                                                   
 var a$202: Array.Cow.T;                                                                            
 var value$2022275987: int;                                                                         
 var Array.Cow.S._elems2275991: [Array.Cow.S]([int]int);                                            
 var this2275991: Cow;                                                                              
 var Array.Cow.T._elems2275987: [Array.Cow.T]([int]int);                                            
 var Array.Cow.S._state2275987: [Array.Cow.S]State;                                                 
 var Array.Cow.T._length2275987: [Array.Cow.T]int;                                                  
                                                                                                    
 var $pc : Phase;                                                                                   
 $pc := PreCommit;                                                                                  
                                                                                                    
                                                                                                    
 if ($pc == PreCommit) {                                                                            
  assume this != Cow.null;                                                                          
 } else {                                                                                           
  assert this != Cow.null;                                                                                 // (29.22): Cannot have potential null deference in left-mover part.
 }                                                                                                  
 assume Cow._lock[this] == Tid.null;                                                                
 $pc := transition($pc, _R);                                                                        
 assert $pc != PhaseError;                                                                                 // (29.22): Reduction failure
 Cow._lock[this] := tid;                                                                            
 // inlined: this.set(0,0)}                                                                         
 exit$202_top:                                                                                      
                                                                                                    
 // 30.13: int index$202;                                                                           
                                                                                                    
                                                                                                    
 // 30.13: int value$202;                                                                           
                                                                                                    
                                                                                                    
 // 30.13: Cow this$202;                                                                            
                                                                                                    
                                                                                                    
 // 30.13: index$202 = 0;                                                                           
                                                                                                    
 index$202 := 0;                                                                                    
                                                                                                    
 // 30.13: value$202 = 0;                                                                           
                                                                                                    
 value$202 := 0;                                                                                    
                                                                                                    
 // 30.13: this$202 = this;                                                                         
                                                                                                    
 this$202 := this;                                                                                  
                                                                                                    
 // 15.9: [Cow.T{this$202}] a$202;                                                                  
                                                                                                    
                                                                                                    
 // 15.9: a$202 := this$202.a;                                                                      
                                                                                                    
                                                                                                    
 moverPath2275987 := ReadEval.Cow.a(tid: Tid,this$202: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 mover2275987 := m#moverPath(moverPath2275987);                                                     
 path2275987 := p#moverPath(moverPath2275987);                                                      
 assume Cow._state2275987 == Cow._state && Cow.a2275987 == Cow.a && Cow.b2275987 == Cow.b && Cow._lock2275987 == Cow._lock && Array.Cow.T._state2275987 == Array.Cow.T._state && Array.Cow.T._elems2275987 == Array.Cow.T._elems && Array.Cow.T._length2275987 == Array.Cow.T._length && Array.Cow.S._state2275987 == Array.Cow.S._state && Array.Cow.S._elems2275987 == Array.Cow.S._elems && Array.Cow.S._length2275987 == Array.Cow.S._length && a$2022275987 == a$202 && this$2022275987 == this$202 && value$2022275987 == value$202 && index$2022275987 == index$202 && this2275987 == this && tid2275987 == tid && $pc2275987 == $pc;
 assume $recorded.state2275987 == 1;                                                                
 if ($pc == PreCommit) {                                                                            
  assume this$202 != Cow.null;                                                                      
 } else {                                                                                           
  assert this$202 != Cow.null;                                                                             // (15.9): Cannot have potential null deference in left-mover part.
 }                                                                                                  
                                                                                                    
 $pc := transition($pc, mover2275987);                                                              
 assert $pc != PhaseError;                                                                                 // (15.9): Reduction failure
 a$202 := Cow.a[this$202];                                                                          
                                                                                                    
 // 16.9: a$202[index$202] := value$202;                                                            
                                                                                                    
                                                                                                    
 moverPath2275991 := WriteEval.Array.Cow.T(tid: Tid,this$202: Cow,a$202: Array.Cow.T,index$202: int,value$202: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 mover2275991 := m#moverPath(moverPath2275991);                                                     
 path2275991 := p#moverPath(moverPath2275991);                                                      
 assume Cow._state2275991 == Cow._state && Cow.a2275991 == Cow.a && Cow.b2275991 == Cow.b && Cow._lock2275991 == Cow._lock && Array.Cow.T._state2275991 == Array.Cow.T._state && Array.Cow.T._elems2275991 == Array.Cow.T._elems && Array.Cow.T._length2275991 == Array.Cow.T._length && Array.Cow.S._state2275991 == Array.Cow.S._state && Array.Cow.S._elems2275991 == Array.Cow.S._elems && Array.Cow.S._length2275991 == Array.Cow.S._length && a$2022275991 == a$202 && this$2022275991 == this$202 && value$2022275991 == value$202 && index$2022275991 == index$202 && this2275991 == this && tid2275991 == tid && $pc2275991 == $pc;
 assume $recorded.state2275991 == 1;                                                                
 if ($pc == PreCommit) {                                                                            
  assume a$202 != Array.Cow.T.null;                                                                 
 } else {                                                                                           
  assert a$202 != Array.Cow.T.null;                                                                        // (16.9): Cannot have potential null deference in left-mover part.
 }                                                                                                  
 if ($pc == PreCommit) {                                                                            
  assume 0 <= index$202;                                                                            
 } else {                                                                                           
  assert 0 <= index$202;                                                                                   // (16.9): index < 0.
 }                                                                                                  
 if ($pc == PreCommit) {                                                                            
  assume index$202 < Array.Cow.T._length[a$202];                                                    
 } else {                                                                                           
  assert index$202 < Array.Cow.T._length[a$202];                                                           // (16.9): index is >= length.
 }                                                                                                  
                                                                                                    
 $pc := transition($pc, mover2275991);                                                              
 assert $pc != PhaseError;                                                                                 // (16.9): Reduction failure
 Array.Cow.T._elems[a$202][index$202] := value$202;                                                 
                                                                                                    
 // 14.36: break exit$202;                                                                          
                                                                                                    
 goto exit$202_bottom;                                                                              
 exit$202_bottom:                                                                                   
 if ($pc == PreCommit) {                                                                            
  assume this != Cow.null;                                                                          
 } else {                                                                                           
  assert this != Cow.null;                                                                                 // (31.9): Cannot have potential null deference in left-mover part.
 }                                                                                                  
 assert Cow._lock[this] == tid;                                                                            // (31.9): lock not held
 $pc := transition($pc, _L);                                                                        
 assert $pc != PhaseError;                                                                                 // (31.9): Reduction failure
 Cow._lock[this] := Tid.null;                                                                       
                                                                                                    
 // 28.22: // return;                                                                               
                                                                                                    
 assume Cow._state2276009 == Cow._state && Cow.a2276009 == Cow.a && Cow.b2276009 == Cow.b && Cow._lock2276009 == Cow._lock && Array.Cow.T._state2276009 == Array.Cow.T._state && Array.Cow.T._elems2276009 == Array.Cow.T._elems && Array.Cow.T._length2276009 == Array.Cow.T._length && Array.Cow.S._state2276009 == Array.Cow.S._state && Array.Cow.S._elems2276009 == Array.Cow.S._elems && Array.Cow.S._length2276009 == Array.Cow.S._length && this2276009 == this && tid2276009 == tid;
 assume $recorded.state2276009 == 1;                                                                
 return;                                                                                            
}                                                                                                   
                                                                                                    
                                                                                                    
procedure  Cow.f2(tid:Tid, this : Cow)                                                              
modifies Cow._state;                                                                                
modifies Cow.a;                                                                                     
modifies Cow.b;                                                                                     
modifies Cow._lock;                                                                                 
modifies Array.Cow.T._state;                                                                        
modifies Array.Cow.T._elems;                                                                        
modifies Array.Cow.S._state;                                                                        
modifies Array.Cow.S._elems;                                                                        
                                                                                                    
requires ValidTid(tid);                                                                                    // (34.5): Bad tid
requires isShared(Cow._state[this]);                                                                       // (34.5): this is not global
                                                                                                    
requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
                                                                                                    
ensures StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
{                                                                                                   
 var Cow.a2276059: [Cow]Array.Cow.T;                                                                
 var this$2042276059: Cow;                                                                          
 var moverPath2276059: MoverPath;                                                                   
 var index$2042276063: int;                                                                         
 var index$204: int;                                                                                
 var Array.Cow.T._elems2276092: [Array.Cow.T]([int]int);                                            
 var Cow._state2276092: [Cow]State;                                                                 
 var value$2042276063: int;                                                                         
 var Array.Cow.S._length2276092: [Array.Cow.S]int;                                                  
 var a$204: Array.Cow.T;                                                                            
 var Cow._state2276059: [Cow]State;                                                                 
 var Cow.b2276059: [Cow]Array.Cow.S;                                                                
 var $pc2276059: Phase;                                                                             
 var value$2032276059: int;                                                                         
 var Array.Cow.S._elems2276092: [Array.Cow.S]([int]int);                                            
 var Cow.a2276092: [Cow]Array.Cow.T;                                                                
 var this$2032276059: Cow;                                                                          
 var tid2276063: Tid;                                                                               
 var path2276059: int;                                                                              
 var Array.Cow.S._elems2276059: [Array.Cow.S]([int]int);                                            
 var value$2042276059: int;                                                                         
 var Cow._lock2276059: [Cow]Tid;                                                                    
 var this2276092: Cow;                                                                              
 var tid2276092: Tid;                                                                               
 var Array.Cow.S._state2276059: [Array.Cow.S]State;                                                 
 var Array.Cow.T._state2276063: [Array.Cow.T]State;                                                 
 var mover2276063: Mover;                                                                           
 var this$203: Cow;                                                                                 
 var Cow.a2276063: [Cow]Array.Cow.T;                                                                
 var tid2276059: Tid;                                                                               
 var Array.Cow.T._length2276063: [Array.Cow.T]int;                                                  
 var moverPath2276063: MoverPath;                                                                   
 var Cow._state2276063: [Cow]State;                                                                 
 var this$2032276063: Cow;                                                                          
 var a$2042276063: Array.Cow.T;                                                                     
 var Array.Cow.S._elems2276063: [Array.Cow.S]([int]int);                                            
 var Cow.b2276063: [Cow]Array.Cow.S;                                                                
 var Array.Cow.T._elems2276059: [Array.Cow.T]([int]int);                                            
 var Array.Cow.T._elems2276063: [Array.Cow.T]([int]int);                                            
 var $recorded.state2276092: int;                                                                   
 var this2276059: Cow;                                                                              
 var mover2276059: Mover;                                                                           
 var this2276063: Cow;                                                                              
 var Array.Cow.T._state2276059: [Array.Cow.T]State;                                                 
 var Array.Cow.S._length2276059: [Array.Cow.S]int;                                                  
 var index$2032276059: int;                                                                         
 var Cow.b2276092: [Cow]Array.Cow.S;                                                                
 var index$2042276059: int;                                                                         
 var index$2032276063: int;                                                                         
 var Array.Cow.T._length2276092: [Array.Cow.T]int;                                                  
 var Array.Cow.T._length2276059: [Array.Cow.T]int;                                                  
 var $recorded.state2276059: int;                                                                   
 var Array.Cow.S._state2276092: [Array.Cow.S]State;                                                 
 var Array.Cow.T._state2276092: [Array.Cow.T]State;                                                 
 var $recorded.state2276063: int;                                                                   
 var Array.Cow.S._length2276063: [Array.Cow.S]int;                                                  
 var $pc2276063: Phase;                                                                             
 var Cow._lock2276092: [Cow]Tid;                                                                    
 var index$203: int;                                                                                
 var path2276063: int;                                                                              
 var Cow._lock2276063: [Cow]Tid;                                                                    
 var value$2032276063: int;                                                                         
 var a$2042276059: Array.Cow.T;                                                                     
 var $pc2276092: Phase;                                                                             
 var Array.Cow.S._state2276063: [Array.Cow.S]State;                                                 
 var this$204: Cow;                                                                                 
 var value$204: int;                                                                                
 var value$203: int;                                                                                
 var this$2042276063: Cow;                                                                          
                                                                                                    
 var $pc : Phase;                                                                                   
 $pc := PreCommit;                                                                                  
                                                                                                    
                                                                                                    
 if ($pc == PreCommit) {                                                                            
  assume this != Cow.null;                                                                          
 } else {                                                                                           
  assert this != Cow.null;                                                                                 // (35.22): Cannot have potential null deference in left-mover part.
 }                                                                                                  
 assume Cow._lock[this] == Tid.null;                                                                
 $pc := transition($pc, _R);                                                                        
 assert $pc != PhaseError;                                                                                 // (35.22): Reduction failure
 Cow._lock[this] := tid;                                                                            
 // inlined: this.cow(0,1)}                                                                         
 exit$203_top:                                                                                      
                                                                                                    
 // 36.13: int index$203;                                                                           
                                                                                                    
                                                                                                    
 // 36.13: int value$203;                                                                           
                                                                                                    
                                                                                                    
 // 36.13: Cow this$203;                                                                            
                                                                                                    
                                                                                                    
 // 36.13: index$203 = 0;                                                                           
                                                                                                    
 index$203 := 0;                                                                                    
                                                                                                    
 // 36.13: value$203 = 1;                                                                           
                                                                                                    
 value$203 := 1;                                                                                    
                                                                                                    
 // 36.13: this$203 = this;                                                                         
                                                                                                    
 this$203 := this;                                                                                  
 // inlined: this$203.set(index$203,value$203)}                                                     
 exit$204_top:                                                                                      
                                                                                                    
 // 20.9: int index$204;                                                                            
                                                                                                    
                                                                                                    
 // 20.9: int value$204;                                                                            
                                                                                                    
                                                                                                    
 // 20.9: Cow this$204;                                                                             
                                                                                                    
                                                                                                    
 // 20.9: index$204 = index$203;                                                                    
                                                                                                    
 index$204 := index$203;                                                                            
                                                                                                    
 // 20.9: value$204 = value$203;                                                                    
                                                                                                    
 value$204 := value$203;                                                                            
                                                                                                    
 // 20.9: this$204 = this$203;                                                                      
                                                                                                    
 this$204 := this$203;                                                                              
                                                                                                    
 // 15.9: [Cow.T{this$204}] a$204;                                                                  
                                                                                                    
                                                                                                    
 // 15.9: a$204 := this$204.a;                                                                      
                                                                                                    
                                                                                                    
 moverPath2276059 := ReadEval.Cow.a(tid: Tid,this$204: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 mover2276059 := m#moverPath(moverPath2276059);                                                     
 path2276059 := p#moverPath(moverPath2276059);                                                      
 assume Cow._state2276059 == Cow._state && Cow.a2276059 == Cow.a && Cow.b2276059 == Cow.b && Cow._lock2276059 == Cow._lock && Array.Cow.T._state2276059 == Array.Cow.T._state && Array.Cow.T._elems2276059 == Array.Cow.T._elems && Array.Cow.T._length2276059 == Array.Cow.T._length && Array.Cow.S._state2276059 == Array.Cow.S._state && Array.Cow.S._elems2276059 == Array.Cow.S._elems && Array.Cow.S._length2276059 == Array.Cow.S._length && a$2042276059 == a$204 && this$2042276059 == this$204 && value$2042276059 == value$204 && index$2042276059 == index$204 && this$2032276059 == this$203 && value$2032276059 == value$203 && index$2032276059 == index$203 && this2276059 == this && tid2276059 == tid && $pc2276059 == $pc;
 assume $recorded.state2276059 == 1;                                                                
 if ($pc == PreCommit) {                                                                            
  assume this$204 != Cow.null;                                                                      
 } else {                                                                                           
  assert this$204 != Cow.null;                                                                             // (15.9): Cannot have potential null deference in left-mover part.
 }                                                                                                  
                                                                                                    
 $pc := transition($pc, mover2276059);                                                              
 assert $pc != PhaseError;                                                                                 // (15.9): Reduction failure
 a$204 := Cow.a[this$204];                                                                          
                                                                                                    
 // 16.9: a$204[index$204] := value$204;                                                            
                                                                                                    
                                                                                                    
 moverPath2276063 := WriteEval.Array.Cow.T(tid: Tid,this$204: Cow,a$204: Array.Cow.T,index$204: int,value$204: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 mover2276063 := m#moverPath(moverPath2276063);                                                     
 path2276063 := p#moverPath(moverPath2276063);                                                      
 assume Cow._state2276063 == Cow._state && Cow.a2276063 == Cow.a && Cow.b2276063 == Cow.b && Cow._lock2276063 == Cow._lock && Array.Cow.T._state2276063 == Array.Cow.T._state && Array.Cow.T._elems2276063 == Array.Cow.T._elems && Array.Cow.T._length2276063 == Array.Cow.T._length && Array.Cow.S._state2276063 == Array.Cow.S._state && Array.Cow.S._elems2276063 == Array.Cow.S._elems && Array.Cow.S._length2276063 == Array.Cow.S._length && a$2042276063 == a$204 && this$2042276063 == this$204 && value$2042276063 == value$204 && index$2042276063 == index$204 && this$2032276063 == this$203 && value$2032276063 == value$203 && index$2032276063 == index$203 && this2276063 == this && tid2276063 == tid && $pc2276063 == $pc;
 assume $recorded.state2276063 == 1;                                                                
 if ($pc == PreCommit) {                                                                            
  assume a$204 != Array.Cow.T.null;                                                                 
 } else {                                                                                           
  assert a$204 != Array.Cow.T.null;                                                                        // (16.9): Cannot have potential null deference in left-mover part.
 }                                                                                                  
 if ($pc == PreCommit) {                                                                            
  assume 0 <= index$204;                                                                            
 } else {                                                                                           
  assert 0 <= index$204;                                                                                   // (16.9): index < 0.
 }                                                                                                  
 if ($pc == PreCommit) {                                                                            
  assume index$204 < Array.Cow.T._length[a$204];                                                    
 } else {                                                                                           
  assert index$204 < Array.Cow.T._length[a$204];                                                           // (16.9): index is >= length.
 }                                                                                                  
                                                                                                    
 $pc := transition($pc, mover2276063);                                                              
 assert $pc != PhaseError;                                                                                 // (16.9): Reduction failure
 Array.Cow.T._elems[a$204][index$204] := value$204;                                                 
                                                                                                    
 // 14.36: break exit$204;                                                                          
                                                                                                    
 goto exit$204_bottom;                                                                              
 exit$204_bottom:                                                                                   
                                                                                                    
 // 19.36: break exit$203;                                                                          
                                                                                                    
 goto exit$203_bottom;                                                                              
 exit$203_bottom:                                                                                   
 if ($pc == PreCommit) {                                                                            
  assume this != Cow.null;                                                                          
 } else {                                                                                           
  assert this != Cow.null;                                                                                 // (37.9): Cannot have potential null deference in left-mover part.
 }                                                                                                  
 assert Cow._lock[this] == tid;                                                                            // (37.9): lock not held
 $pc := transition($pc, _L);                                                                        
 assert $pc != PhaseError;                                                                                 // (37.9): Reduction failure
 Cow._lock[this] := Tid.null;                                                                       
                                                                                                    
 // 34.22: // return;                                                                               
                                                                                                    
 assume Cow._state2276092 == Cow._state && Cow.a2276092 == Cow.a && Cow.b2276092 == Cow.b && Cow._lock2276092 == Cow._lock && Array.Cow.T._state2276092 == Array.Cow.T._state && Array.Cow.T._elems2276092 == Array.Cow.T._elems && Array.Cow.T._length2276092 == Array.Cow.T._length && Array.Cow.S._state2276092 == Array.Cow.S._state && Array.Cow.S._elems2276092 == Array.Cow.S._elems && Array.Cow.S._length2276092 == Array.Cow.S._length && this2276092 == this && tid2276092 == tid;
 assume $recorded.state2276092 == 1;                                                                
 return;                                                                                            
}                                                                                                   
                                                                                                    
                                                                                                    
procedure  Cow.f3(tid:Tid, this : Cow)                                                              
modifies Cow._state;                                                                                
modifies Cow.a;                                                                                     
modifies Cow.b;                                                                                     
modifies Cow._lock;                                                                                 
modifies Array.Cow.T._state;                                                                        
modifies Array.Cow.T._elems;                                                                        
modifies Array.Cow.S._state;                                                                        
modifies Array.Cow.S._elems;                                                                        
                                                                                                    
requires ValidTid(tid);                                                                                    // (40.5): Bad tid
requires isShared(Cow._state[this]);                                                                       // (40.5): this is not global
                                                                                                    
requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
                                                                                                    
ensures StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
{                                                                                                   
 var mover2276126: Mover;                                                                           
 var value$2072276192: int;                                                                         
 var Array.Cow.T._length2276119: [Array.Cow.T]int;                                                  
 var Array.Cow.S._length2276119: [Array.Cow.S]int;                                                  
 var y2276196: int;                                                                                 
 var this$2062276196: Cow;                                                                          
 var Array.Cow.T._state2276224: [Array.Cow.T]State;                                                 
 var Array.Cow.S._length2276224: [Array.Cow.S]int;                                                  
 var a$2052276119: Array.Cow.T;                                                                     
 var Array.Cow.T._elems2276224: [Array.Cow.T]([int]int);                                            
 var Cow.a2276119: [Cow]Array.Cow.T;                                                                
 var this$205: Cow;                                                                                 
 var y2276192: int;                                                                                 
 var Array.Cow.S._elems2276192: [Array.Cow.S]([int]int);                                            
 var Array.Cow.S._state2276119: [Array.Cow.S]State;                                                 
 var Cow._state2276126: [Cow]State;                                                                 
 var mover2276196: Mover;                                                                           
 var moverPath2276196: MoverPath;                                                                   
 var y2276126: int;                                                                                 
 var path2276119: int;                                                                              
 var $pc2276224: Phase;                                                                             
 var index$2072276196: int;                                                                         
 var Array.Cow.T._elems2276119: [Array.Cow.T]([int]int);                                            
 var $recorded.state2276119: int;                                                                   
 var index$206: int;                                                                                
 var $pc2276119: Phase;                                                                             
 var value$2072276196: int;                                                                         
 var Array.Cow.S._length2276126: [Array.Cow.S]int;                                                  
 var Array.Cow.T._length2276224: [Array.Cow.T]int;                                                  
 var Array.Cow.T._state2276192: [Array.Cow.T]State;                                                 
 var Array.Cow.S._elems2276119: [Array.Cow.S]([int]int);                                            
 var index$207: int;                                                                                
 var index$2062276192: int;                                                                         
 var v$205: int;                                                                                    
 var y2276119: int;                                                                                 
 var Cow._lock2276126: [Cow]Tid;                                                                    
 var Cow.a2276126: [Cow]Array.Cow.T;                                                                
 var Array.Cow.S._length2276196: [Array.Cow.S]int;                                                  
 var Cow._lock2276196: [Cow]Tid;                                                                    
 var this$2052276126: Cow;                                                                          
 var this$2072276196: Cow;                                                                          
 var $recorded.state2276224: int;                                                                   
 var index$205: int;                                                                                
 var Array.Cow.T._length2276126: [Array.Cow.T]int;                                                  
 var a$2072276192: Array.Cow.T;                                                                     
 var Cow.a2276196: [Cow]Array.Cow.T;                                                                
 var mover2276119: Mover;                                                                           
 var Cow.b2276196: [Cow]Array.Cow.S;                                                                
 var Array.Cow.T._state2276119: [Array.Cow.T]State;                                                 
 var Cow.b2276224: [Cow]Array.Cow.S;                                                                
 var index$2052276119: int;                                                                         
 var Array.Cow.S._elems2276126: [Array.Cow.S]([int]int);                                            
 var path2276126: int;                                                                              
 var a$207: Array.Cow.T;                                                                            
 var value$207: int;                                                                                
 var Cow.b2276119: [Cow]Array.Cow.S;                                                                
 var Array.Cow.T._elems2276192: [Array.Cow.T]([int]int);                                            
 var this2276196: Cow;                                                                              
 var $pc2276126: Phase;                                                                             
 var Array.Cow.S._elems2276224: [Array.Cow.S]([int]int);                                            
 var Array.Cow.T._length2276196: [Array.Cow.T]int;                                                  
 var Array.Cow.T._elems2276196: [Array.Cow.T]([int]int);                                            
 var Cow._state2276192: [Cow]State;                                                                 
 var Array.Cow.T._state2276126: [Array.Cow.T]State;                                                 
 var index$2072276192: int;                                                                         
 var Array.Cow.T._length2276192: [Array.Cow.T]int;                                                  
 var Cow.a2276192: [Cow]Array.Cow.T;                                                                
 var this$2062276192: Cow;                                                                          
 var Cow._lock2276192: [Cow]Tid;                                                                    
 var Cow._state2276119: [Cow]State;                                                                 
 var index$2062276196: int;                                                                         
 var this2276119: Cow;                                                                              
 var y: int;                                                                                        
 var value$2062276196: int;                                                                         
 var $recorded.state2276192: int;                                                                   
 var $recorded.state2276126: int;                                                                   
 var Array.Cow.T._state2276196: [Array.Cow.T]State;                                                 
 var path2276192: int;                                                                              
 var Cow._lock2276119: [Cow]Tid;                                                                    
 var Array.Cow.S._elems2276196: [Array.Cow.S]([int]int);                                            
 var this2276126: Cow;                                                                              
 var this$206: Cow;                                                                                 
 var a$205: Array.Cow.T;                                                                            
 var Cow._state2276224: [Cow]State;                                                                 
 var Cow.a2276224: [Cow]Array.Cow.T;                                                                
 var tid2276126: Tid;                                                                               
 var tid2276196: Tid;                                                                               
 var a$2072276196: Array.Cow.T;                                                                     
 var path2276196: int;                                                                              
 var Cow.b2276126: [Cow]Array.Cow.S;                                                                
 var index$2052276126: int;                                                                         
 var a$2052276126: Array.Cow.T;                                                                     
 var this$207: Cow;                                                                                 
 var Array.Cow.S._state2276196: [Array.Cow.S]State;                                                 
 var Array.Cow.S._state2276126: [Array.Cow.S]State;                                                 
 var Array.Cow.S._state2276192: [Array.Cow.S]State;                                                 
 var this$2052276119: Cow;                                                                          
 var moverPath2276119: MoverPath;                                                                   
 var this2276192: Cow;                                                                              
 var $pc2276192: Phase;                                                                             
 var moverPath2276126: MoverPath;                                                                   
 var Array.Cow.S._length2276192: [Array.Cow.S]int;                                                  
 var tid2276192: Tid;                                                                               
 var v$2052276126: int;                                                                             
 var this2276224: Cow;                                                                              
 var Cow._lock2276224: [Cow]Tid;                                                                    
 var $pc2276196: Phase;                                                                             
 var tid2276224: Tid;                                                                               
 var Array.Cow.S._state2276224: [Array.Cow.S]State;                                                 
 var this$2072276192: Cow;                                                                          
 var Array.Cow.T._elems2276126: [Array.Cow.T]([int]int);                                            
 var value$206: int;                                                                                
 var Cow._state2276196: [Cow]State;                                                                 
 var moverPath2276192: MoverPath;                                                                   
 var mover2276192: Mover;                                                                           
 var $recorded.state2276196: int;                                                                   
 var Cow.b2276192: [Cow]Array.Cow.S;                                                                
 var value$2062276192: int;                                                                         
 var tid2276119: Tid;                                                                               
                                                                                                    
 var $pc : Phase;                                                                                   
 $pc := PreCommit;                                                                                  
                                                                                                    
                                                                                                    
 if ($pc == PreCommit) {                                                                            
  assume this != Cow.null;                                                                          
 } else {                                                                                           
  assert this != Cow.null;                                                                                 // (41.27): Cannot have potential null deference in left-mover part.
 }                                                                                                  
 assume Cow._lock[this] == Tid.null;                                                                
 $pc := transition($pc, _R);                                                                        
 assert $pc != PhaseError;                                                                                 // (41.27): Reduction failure
 Cow._lock[this] := tid;                                                                            
                                                                                                    
 // 42.18: int y;                                                                                   
                                                                                                    
 // inlined: this.get(1)}                                                                           
 exit$205_top:                                                                                      
                                                                                                    
 // 42.18: int index$205;                                                                           
                                                                                                    
                                                                                                    
 // 42.18: Cow this$205;                                                                            
                                                                                                    
                                                                                                    
 // 42.18: index$205 = 1;                                                                           
                                                                                                    
 index$205 := 1;                                                                                    
                                                                                                    
 // 42.18: this$205 = this;                                                                         
                                                                                                    
 this$205 := this;                                                                                  
                                                                                                    
 // 9.9: [Cow.T{this$205}] a$205;                                                                   
                                                                                                    
                                                                                                    
 // 9.9: a$205 := this$205.a;                                                                       
                                                                                                    
                                                                                                    
 moverPath2276119 := ReadEval.Cow.a(tid: Tid,this$205: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 mover2276119 := m#moverPath(moverPath2276119);                                                     
 path2276119 := p#moverPath(moverPath2276119);                                                      
 assume Cow._state2276119 == Cow._state && Cow.a2276119 == Cow.a && Cow.b2276119 == Cow.b && Cow._lock2276119 == Cow._lock && Array.Cow.T._state2276119 == Array.Cow.T._state && Array.Cow.T._elems2276119 == Array.Cow.T._elems && Array.Cow.T._length2276119 == Array.Cow.T._length && Array.Cow.S._state2276119 == Array.Cow.S._state && Array.Cow.S._elems2276119 == Array.Cow.S._elems && Array.Cow.S._length2276119 == Array.Cow.S._length && a$2052276119 == a$205 && this$2052276119 == this$205 && index$2052276119 == index$205 && y2276119 == y && this2276119 == this && tid2276119 == tid && $pc2276119 == $pc;
 assume $recorded.state2276119 == 1;                                                                
 if ($pc == PreCommit) {                                                                            
  assume this$205 != Cow.null;                                                                      
 } else {                                                                                           
  assert this$205 != Cow.null;                                                                             // (9.9): Cannot have potential null deference in left-mover part.
 }                                                                                                  
                                                                                                    
 $pc := transition($pc, mover2276119);                                                              
 assert $pc != PhaseError;                                                                                 // (9.9): Reduction failure
 a$205 := Cow.a[this$205];                                                                          
                                                                                                    
 // 10.9: int v$205;                                                                                
                                                                                                    
                                                                                                    
 // 10.9: v$205 := a$205[index$205];                                                                
                                                                                                    
                                                                                                    
 moverPath2276126 := ReadEval.Array.Cow.T(tid: Tid,this$205: Cow,a$205: Array.Cow.T,index$205: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 mover2276126 := m#moverPath(moverPath2276126);                                                     
 path2276126 := p#moverPath(moverPath2276126);                                                      
 assume Cow._state2276126 == Cow._state && Cow.a2276126 == Cow.a && Cow.b2276126 == Cow.b && Cow._lock2276126 == Cow._lock && Array.Cow.T._state2276126 == Array.Cow.T._state && Array.Cow.T._elems2276126 == Array.Cow.T._elems && Array.Cow.T._length2276126 == Array.Cow.T._length && Array.Cow.S._state2276126 == Array.Cow.S._state && Array.Cow.S._elems2276126 == Array.Cow.S._elems && Array.Cow.S._length2276126 == Array.Cow.S._length && v$2052276126 == v$205 && a$2052276126 == a$205 && this$2052276126 == this$205 && index$2052276126 == index$205 && y2276126 == y && this2276126 == this && tid2276126 == tid && $pc2276126 == $pc;
 assume $recorded.state2276126 == 1;                                                                
 if ($pc == PreCommit) {                                                                            
  assume a$205 != Array.Cow.T.null;                                                                 
 } else {                                                                                           
  assert a$205 != Array.Cow.T.null;                                                                        // (10.9): Cannot have potential null deference in left-mover part.
 }                                                                                                  
 if ($pc == PreCommit) {                                                                            
  assume 0 <= index$205;                                                                            
 } else {                                                                                           
  assert 0 <= index$205;                                                                                   // (10.9): index < 0.
 }                                                                                                  
 if ($pc == PreCommit) {                                                                            
  assume index$205 < Array.Cow.T._length[a$205];                                                    
 } else {                                                                                           
  assert index$205 < Array.Cow.T._length[a$205];                                                           // (10.9): index is >= length.
 }                                                                                                  
                                                                                                    
 $pc := transition($pc, mover2276126);                                                              
 assert $pc != PhaseError;                                                                                 // (10.9): Reduction failure
 v$205 := Array.Cow.T._elems[a$205][index$205];                                                     
                                                                                                    
 // 11.9: y = v$205;                                                                                
                                                                                                    
 y := v$205;                                                                                        
                                                                                                    
 // 11.9: break exit$205;                                                                           
                                                                                                    
 goto exit$205_bottom;                                                                              
                                                                                                    
 // 8.24: y = -1;                                                                                   
                                                                                                    
 y := -1;                                                                                           
                                                                                                    
 // 8.24: break exit$205;                                                                           
                                                                                                    
 goto exit$205_bottom;                                                                              
 exit$205_bottom:                                                                                   
 // inlined: this.cow(0,y)}                                                                         
 exit$206_top:                                                                                      
                                                                                                    
 // 43.18: int index$206;                                                                           
                                                                                                    
                                                                                                    
 // 43.18: int value$206;                                                                           
                                                                                                    
                                                                                                    
 // 43.18: Cow this$206;                                                                            
                                                                                                    
                                                                                                    
 // 43.18: index$206 = 0;                                                                           
                                                                                                    
 index$206 := 0;                                                                                    
                                                                                                    
 // 43.18: value$206 = y;                                                                           
                                                                                                    
 value$206 := y;                                                                                    
                                                                                                    
 // 43.18: this$206 = this;                                                                         
                                                                                                    
 this$206 := this;                                                                                  
 // inlined: this$206.set(index$206,value$206)}                                                     
 exit$207_top:                                                                                      
                                                                                                    
 // 20.9: int index$207;                                                                            
                                                                                                    
                                                                                                    
 // 20.9: int value$207;                                                                            
                                                                                                    
                                                                                                    
 // 20.9: Cow this$207;                                                                             
                                                                                                    
                                                                                                    
 // 20.9: index$207 = index$206;                                                                    
                                                                                                    
 index$207 := index$206;                                                                            
                                                                                                    
 // 20.9: value$207 = value$206;                                                                    
                                                                                                    
 value$207 := value$206;                                                                            
                                                                                                    
 // 20.9: this$207 = this$206;                                                                      
                                                                                                    
 this$207 := this$206;                                                                              
                                                                                                    
 // 15.9: [Cow.T{this$207}] a$207;                                                                  
                                                                                                    
                                                                                                    
 // 15.9: a$207 := this$207.a;                                                                      
                                                                                                    
                                                                                                    
 moverPath2276192 := ReadEval.Cow.a(tid: Tid,this$207: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 mover2276192 := m#moverPath(moverPath2276192);                                                     
 path2276192 := p#moverPath(moverPath2276192);                                                      
 assume Cow._state2276192 == Cow._state && Cow.a2276192 == Cow.a && Cow.b2276192 == Cow.b && Cow._lock2276192 == Cow._lock && Array.Cow.T._state2276192 == Array.Cow.T._state && Array.Cow.T._elems2276192 == Array.Cow.T._elems && Array.Cow.T._length2276192 == Array.Cow.T._length && Array.Cow.S._state2276192 == Array.Cow.S._state && Array.Cow.S._elems2276192 == Array.Cow.S._elems && Array.Cow.S._length2276192 == Array.Cow.S._length && a$2072276192 == a$207 && this$2072276192 == this$207 && value$2072276192 == value$207 && index$2072276192 == index$207 && this$2062276192 == this$206 && value$2062276192 == value$206 && index$2062276192 == index$206 && y2276192 == y && this2276192 == this && tid2276192 == tid && $pc2276192 == $pc;
 assume $recorded.state2276192 == 1;                                                                
 if ($pc == PreCommit) {                                                                            
  assume this$207 != Cow.null;                                                                      
 } else {                                                                                           
  assert this$207 != Cow.null;                                                                             // (15.9): Cannot have potential null deference in left-mover part.
 }                                                                                                  
                                                                                                    
 $pc := transition($pc, mover2276192);                                                              
 assert $pc != PhaseError;                                                                                 // (15.9): Reduction failure
 a$207 := Cow.a[this$207];                                                                          
                                                                                                    
 // 16.9: a$207[index$207] := value$207;                                                            
                                                                                                    
                                                                                                    
 moverPath2276196 := WriteEval.Array.Cow.T(tid: Tid,this$207: Cow,a$207: Array.Cow.T,index$207: int,value$207: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 mover2276196 := m#moverPath(moverPath2276196);                                                     
 path2276196 := p#moverPath(moverPath2276196);                                                      
 assume Cow._state2276196 == Cow._state && Cow.a2276196 == Cow.a && Cow.b2276196 == Cow.b && Cow._lock2276196 == Cow._lock && Array.Cow.T._state2276196 == Array.Cow.T._state && Array.Cow.T._elems2276196 == Array.Cow.T._elems && Array.Cow.T._length2276196 == Array.Cow.T._length && Array.Cow.S._state2276196 == Array.Cow.S._state && Array.Cow.S._elems2276196 == Array.Cow.S._elems && Array.Cow.S._length2276196 == Array.Cow.S._length && a$2072276196 == a$207 && this$2072276196 == this$207 && value$2072276196 == value$207 && index$2072276196 == index$207 && this$2062276196 == this$206 && value$2062276196 == value$206 && index$2062276196 == index$206 && y2276196 == y && this2276196 == this && tid2276196 == tid && $pc2276196 == $pc;
 assume $recorded.state2276196 == 1;                                                                
 if ($pc == PreCommit) {                                                                            
  assume a$207 != Array.Cow.T.null;                                                                 
 } else {                                                                                           
  assert a$207 != Array.Cow.T.null;                                                                        // (16.9): Cannot have potential null deference in left-mover part.
 }                                                                                                  
 if ($pc == PreCommit) {                                                                            
  assume 0 <= index$207;                                                                            
 } else {                                                                                           
  assert 0 <= index$207;                                                                                   // (16.9): index < 0.
 }                                                                                                  
 if ($pc == PreCommit) {                                                                            
  assume index$207 < Array.Cow.T._length[a$207];                                                    
 } else {                                                                                           
  assert index$207 < Array.Cow.T._length[a$207];                                                           // (16.9): index is >= length.
 }                                                                                                  
                                                                                                    
 $pc := transition($pc, mover2276196);                                                              
 assert $pc != PhaseError;                                                                                 // (16.9): Reduction failure
 Array.Cow.T._elems[a$207][index$207] := value$207;                                                 
                                                                                                    
 // 14.36: break exit$207;                                                                          
                                                                                                    
 goto exit$207_bottom;                                                                              
 exit$207_bottom:                                                                                   
                                                                                                    
 // 19.36: break exit$206;                                                                          
                                                                                                    
 goto exit$206_bottom;                                                                              
 exit$206_bottom:                                                                                   
 if ($pc == PreCommit) {                                                                            
  assume this != Cow.null;                                                                          
 } else {                                                                                           
  assert this != Cow.null;                                                                                 // (44.14): Cannot have potential null deference in left-mover part.
 }                                                                                                  
 assert Cow._lock[this] == tid;                                                                            // (44.14): lock not held
 $pc := transition($pc, _L);                                                                        
 assert $pc != PhaseError;                                                                                 // (44.14): Reduction failure
 Cow._lock[this] := Tid.null;                                                                       
                                                                                                    
 // 40.22: // return;                                                                               
                                                                                                    
 assume Cow._state2276224 == Cow._state && Cow.a2276224 == Cow.a && Cow.b2276224 == Cow.b && Cow._lock2276224 == Cow._lock && Array.Cow.T._state2276224 == Array.Cow.T._state && Array.Cow.T._elems2276224 == Array.Cow.T._elems && Array.Cow.T._length2276224 == Array.Cow.T._length && Array.Cow.S._state2276224 == Array.Cow.S._state && Array.Cow.S._elems2276224 == Array.Cow.S._elems && Array.Cow.S._length2276224 == Array.Cow.S._length && this2276224 == this && tid2276224 == tid;
 assume $recorded.state2276224 == 1;                                                                
 return;                                                                                            
}                                                                                                   
                                                                                                    
                                                                                                    
/*** Array Array.Cow.T ***/                                                                         
                                                                                                    
type Array.Cow.T;                                                                                   
const unique Array.Cow.T.null: Array.Cow.T;                                                         
var Array.Cow.T._state: [Array.Cow.T]State;                                                         
                                                                                                    
const Array.Cow.T._this : [Array.Cow.T]Cow;                                                         
const Array.Cow.T._length : [Array.Cow.T]int;                                                       
var Array.Cow.T._elems  : [Array.Cow.T]([int]int);                                                  
                                                                                                    
axiom (forall $this : Array.Cow.T :: Array.Cow.T._length[$this] >= 0);                              
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
// Array.Cow.T: Spec(Cond(Holds(VarAccess(this),VarAccess(tid)),ConstExpr(MoverConst(B())),ConstExpr(MoverConst(E()))),false,List())
                                                                                                    
function {:inline} ReadEval.Array.Cow.T(tid: Tid,this : Cow,athis : Array.Cow.T,index : int,Cow._state: [Cow]State,Cow.a: [Cow]Array.Cow.T,Cow.b: [Cow]Array.Cow.S,Cow._lock: [Cow]Tid,Array.Cow.T._state: [Array.Cow.T]State,Array.Cow.T._elems: [Array.Cow.T]([int]int),Array.Cow.T._length: [Array.Cow.T]int,Array.Cow.S._state: [Array.Cow.S]State,Array.Cow.S._elems: [Array.Cow.S]([int]int),Array.Cow.S._length: [Array.Cow.S]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 if ((isAccessible(Cow._state[this], tid) && Cow._lock[this] == tid)) then                          
  moverPath(_B, 1)                                                                                  
 else                                                                                               
  moverPath(_E, 0)                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
// Array.Cow.T: Spec(Cond(Holds(VarAccess(this),VarAccess(tid)),ConstExpr(MoverConst(B())),ConstExpr(MoverConst(E()))),false,List())
                                                                                                    
function {:inline} WriteEval.Array.Cow.T(tid: Tid,this : Cow,athis : Array.Cow.T,index : int,newValue: int,Cow._state: [Cow]State,Cow.a: [Cow]Array.Cow.T,Cow.b: [Cow]Array.Cow.S,Cow._lock: [Cow]Tid,Array.Cow.T._state: [Array.Cow.T]State,Array.Cow.T._elems: [Array.Cow.T]([int]int),Array.Cow.T._length: [Array.Cow.T]int,Array.Cow.S._state: [Array.Cow.S]State,Array.Cow.S._elems: [Array.Cow.S]([int]int),Array.Cow.S._length: [Array.Cow.S]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 if ((isAccessible(Cow._state[this], tid) && Cow._lock[this] == tid)) then                          
  moverPath(_B, 1)                                                                                  
 else                                                                                               
  moverPath(_E, 0)                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
                                                                                                    
/*** Array Array.Cow.S ***/                                                                         
                                                                                                    
type Array.Cow.S;                                                                                   
const unique Array.Cow.S.null: Array.Cow.S;                                                         
var Array.Cow.S._state: [Array.Cow.S]State;                                                         
                                                                                                    
const Array.Cow.S._this : [Array.Cow.S]Cow;                                                         
const Array.Cow.S._length : [Array.Cow.S]int;                                                       
var Array.Cow.S._elems  : [Array.Cow.S]([int]int);                                                  
                                                                                                    
axiom (forall $this : Array.Cow.S :: Array.Cow.S._length[$this] >= 0);                              
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
// Array.Cow.S: Spec(Cond(Holds(VarAccess(this),VarAccess(tid)),ConstExpr(MoverConst(B())),ConstExpr(MoverConst(E()))),false,List())
                                                                                                    
function {:inline} ReadEval.Array.Cow.S(tid: Tid,this : Cow,athis : Array.Cow.S,index : int,Cow._state: [Cow]State,Cow.a: [Cow]Array.Cow.T,Cow.b: [Cow]Array.Cow.S,Cow._lock: [Cow]Tid,Array.Cow.T._state: [Array.Cow.T]State,Array.Cow.T._elems: [Array.Cow.T]([int]int),Array.Cow.T._length: [Array.Cow.T]int,Array.Cow.S._state: [Array.Cow.S]State,Array.Cow.S._elems: [Array.Cow.S]([int]int),Array.Cow.S._length: [Array.Cow.S]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 if ((isAccessible(Cow._state[this], tid) && Cow._lock[this] == tid)) then                          
  moverPath(_B, 1)                                                                                  
 else                                                                                               
  moverPath(_E, 0)                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
// Array.Cow.S: Spec(Cond(Holds(VarAccess(this),VarAccess(tid)),ConstExpr(MoverConst(B())),ConstExpr(MoverConst(E()))),false,List())
                                                                                                    
function {:inline} WriteEval.Array.Cow.S(tid: Tid,this : Cow,athis : Array.Cow.S,index : int,newValue: int,Cow._state: [Cow]State,Cow.a: [Cow]Array.Cow.T,Cow.b: [Cow]Array.Cow.S,Cow._lock: [Cow]Tid,Array.Cow.T._state: [Array.Cow.T]State,Array.Cow.T._elems: [Array.Cow.T]([int]int),Array.Cow.T._length: [Array.Cow.T]int,Array.Cow.S._state: [Array.Cow.S]State,Array.Cow.S._elems: [Array.Cow.S]([int]int),Array.Cow.S._length: [Array.Cow.S]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 if ((isAccessible(Cow._state[this], tid) && Cow._lock[this] == tid)) then                          
  moverPath(_B, 1)                                                                                  
 else                                                                                               
  moverPath(_E, 0)                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
//// Globals                                                                                        
                                                                                                    
                                                                                                    
//// State Invariant                                                                                
                                                                                                    
 function {:inline} StateInvariant(Cow._state: [Cow]State,Cow.a: [Cow]Array.Cow.T,Cow.b: [Cow]Array.Cow.S,Cow._lock: [Cow]Tid,Array.Cow.T._state: [Array.Cow.T]State,Array.Cow.T._elems: [Array.Cow.T]([int]int),Array.Cow.T._length: [Array.Cow.T]int,Array.Cow.S._state: [Array.Cow.S]State,Array.Cow.S._elems: [Array.Cow.S]([int]int),Array.Cow.S._length: [Array.Cow.S]int) returns (bool) {
  true &&                                                                                           
  (forall _i: Cow  :: _i == Cow.null <==> isNull(Cow._state[_i])) &&                                
  (forall _i: Array.Cow.T  :: _i == Array.Cow.T.null <==> isNull(Array.Cow.T._state[_i])) &&        
  (forall _i: Array.Cow.S  :: _i == Array.Cow.S.null <==> isNull(Array.Cow.S._state[_i])) &&        
  (forall _t: Tid, _i: Array.Cow.T  :: ValidTid(_t) && isAccessible(Array.Cow.T._state[_i], _t) ==> isAccessible(Cow._state[Array.Cow.T._this[_i]], _t)) &&
  (forall _t: Tid, _i: Array.Cow.S  :: ValidTid(_t) && isAccessible(Array.Cow.S._state[_i], _t) ==> isAccessible(Cow._state[Array.Cow.S._this[_i]], _t)) &&
  (forall _i: Cow ::  (isShared(Cow._state[_i]) ==> isSharedAssignable(Array.Cow.T._state[Cow.a[_i]]))) &&
  (forall _i: Cow ::  (forall _t: Tid :: (ValidTid(_t) && isLocal(Cow._state[_i],_t) ==> isLocalAssignable(Array.Cow.T._state[Cow.a[_i]], _t)))) &&
  (forall _i: Cow :: { Cow.a[_i] } Array.Cow.T._this[Cow.a[_i]] == _i) &&                           
  (forall _i: Cow ::  (isShared(Cow._state[_i]) ==> isSharedAssignable(Array.Cow.S._state[Cow.b[_i]]))) &&
  (forall _i: Cow ::  (forall _t: Tid :: (ValidTid(_t) && isLocal(Cow._state[_i],_t) ==> isLocalAssignable(Array.Cow.S._state[Cow.b[_i]], _t)))) &&
  (forall _i: Cow :: { Cow.b[_i] } Array.Cow.S._this[Cow.b[_i]] == _i) &&                           
  _trigger(0) &&                                                                                    
  _trigger(1) &&                                                                                    
  _trigger(2) &&                                                                                    
  _trigger(3)                                                                                       
 }                                                                                                  
//// Spec Checks                                                                                    
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.Cow.a(t: Tid, u: Tid, v: Array.Cow.T, w: Array.Cow.T, x: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[x], u);                                                           
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var u_pre: Tid;                                                                                    
 var v_pre: Array.Cow.T;                                                                            
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var w_post: Array.Cow.T;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Cow.a[x] := v;                                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Cow.a(u: Tid,x: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (5.5): Cow.a failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.Cow.a(t: Tid, u: Tid, v: Array.Cow.T, w: Array.Cow.T, x: Cow) 
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[x], u);                                                           
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var u_pre: Tid;                                                                                    
 var v_pre: Array.Cow.T;                                                                            
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var w_post: Array.Cow.T;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Cow.a[x] := v;                                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.Cow.a(u: Tid,x: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (5.5): Cow.a failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.Cow.a(t: Tid, u: Tid, v: Array.Cow.T, w: Array.Cow.T, x: Cow) 
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[x], u);                                                           
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : Array.Cow.T;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var u_pre: Tid;                                                                                    
 var v_pre: Array.Cow.T;                                                                            
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var w_post: Array.Cow.T;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 assume w == Cow.a[x];                                                                              
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _writeByT := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 Cow.a[x] := havocValue;                                                                            
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;   // H[p.f = _]                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Cow.a(u: Tid,x: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (5.5): Cow.a failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.Cow.a(t: Tid, u: Tid, v: Array.Cow.T, w: Array.Cow.T, x: Cow)  
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[x], u);                                                           
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : Array.Cow.T;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var u_pre: Tid;                                                                                    
 var v_pre: Array.Cow.T;                                                                            
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var w_post: Array.Cow.T;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 assume w == Cow.a[x];                                                                              
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByU := ReadEval.Cow.a(u: Tid,x: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H                                                             
 _writeByT := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (5.5): Cow.a failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.Cow.a(t: Tid, u: Tid, v: Array.Cow.T, w: Array.Cow.T, x: Cow)      
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[x], u);                                                           
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var u_pre: Tid;                                                                                    
 var v_pre: Array.Cow.T;                                                                            
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var w_post: Array.Cow.T;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Cow.a(t: Tid,x: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;  // H                                                            
 _writeByU := WriteEval.Cow.a(u: Tid,x: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (5.5): Cow.a failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.Cow.a(t: Tid, u: Tid, v: Array.Cow.T, w: Array.Cow.T, x: Cow)       
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[x], u);                                                           
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : Array.Cow.T;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var u_pre: Tid;                                                                                    
 var v_pre: Array.Cow.T;                                                                            
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var w_post: Array.Cow.T;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
 assume w == Cow.a[x];                                                                              
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Cow.a(t: Tid,x: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 Cow.a[x] := havocValue;                                                                            
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H[p.f := _]                                                   
 _writeByU := WriteEval.Cow.a(u: Tid,x: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (5.5): Cow.a failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.Cow.b(t: Tid, u: Tid, v: Array.Cow.S, w: Array.Cow.S, x: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[x], u);                                                           
 modifies Cow.b;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var w_pre: Array.Cow.S;                                                                            
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var u_pre: Tid;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var v_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w_post: Array.Cow.S;                                                                           
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var v_post: Array.Cow.S;                                                                           
 var Cow._state_post: [Cow]State;                                                                   
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Cow.b(t: Tid,x: Cow,v: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Cow.b[x] := v;                                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Cow.b(u: Tid,x: Cow,w: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (6.5): Cow.b failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.Cow.b(t: Tid, u: Tid, v: Array.Cow.S, w: Array.Cow.S, x: Cow) 
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[x], u);                                                           
 modifies Cow.b;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var w_pre: Array.Cow.S;                                                                            
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var u_pre: Tid;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var v_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w_post: Array.Cow.S;                                                                           
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var v_post: Array.Cow.S;                                                                           
 var Cow._state_post: [Cow]State;                                                                   
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Cow.b(t: Tid,x: Cow,v: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Cow.b[x] := v;                                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.Cow.b(u: Tid,x: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (6.5): Cow.b failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.Cow.b(t: Tid, u: Tid, v: Array.Cow.S, w: Array.Cow.S, x: Cow) 
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[x], u);                                                           
 modifies Cow.b;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : Array.Cow.S;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var w_pre: Array.Cow.S;                                                                            
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var u_pre: Tid;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var v_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w_post: Array.Cow.S;                                                                           
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var v_post: Array.Cow.S;                                                                           
 var Cow._state_post: [Cow]State;                                                                   
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 assume w == Cow.b[x];                                                                              
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _writeByT := WriteEval.Cow.b(t: Tid,x: Cow,v: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 Cow.b[x] := havocValue;                                                                            
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;   // H[p.f = _]                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Cow.b(u: Tid,x: Cow,w: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (6.5): Cow.b failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.Cow.b(t: Tid, u: Tid, v: Array.Cow.S, w: Array.Cow.S, x: Cow)  
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[x], u);                                                           
 modifies Cow.b;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : Array.Cow.S;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var w_pre: Array.Cow.S;                                                                            
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var u_pre: Tid;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var v_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w_post: Array.Cow.S;                                                                           
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var v_post: Array.Cow.S;                                                                           
 var Cow._state_post: [Cow]State;                                                                   
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 assume w == Cow.b[x];                                                                              
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByU := ReadEval.Cow.b(u: Tid,x: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H                                                             
 _writeByT := WriteEval.Cow.b(t: Tid,x: Cow,v: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (6.5): Cow.b failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.Cow.b(t: Tid, u: Tid, v: Array.Cow.S, w: Array.Cow.S, x: Cow)      
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[x], u);                                                           
 modifies Cow.b;                                                                                    
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var w_pre: Array.Cow.S;                                                                            
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var u_pre: Tid;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var v_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w_post: Array.Cow.S;                                                                           
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var v_post: Array.Cow.S;                                                                           
 var Cow._state_post: [Cow]State;                                                                   
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Cow.b(t: Tid,x: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;  // H                                                            
 _writeByU := WriteEval.Cow.b(u: Tid,x: Cow,w: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (6.5): Cow.b failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.Cow.b(t: Tid, u: Tid, v: Array.Cow.S, w: Array.Cow.S, x: Cow)       
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[x], u);                                                           
 modifies Cow.b;                                                                                    
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : Array.Cow.S;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var w_pre: Array.Cow.S;                                                                            
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var u_pre: Tid;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var v_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w_post: Array.Cow.S;                                                                           
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var v_post: Array.Cow.S;                                                                           
 var Cow._state_post: [Cow]State;                                                                   
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
 assume w == Cow.b[x];                                                                              
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Cow.b(t: Tid,x: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 Cow.b[x] := havocValue;                                                                            
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H[p.f := _]                                                   
 _writeByU := WriteEval.Cow.b(u: Tid,x: Cow,w: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (6.5): Cow.b failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.Array.Cow.T._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Cow, x: Array.Cow.T, i: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.T._state[x], u);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Array.Cow.T._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Array.Cow.T(u: Tid,x_owner: Cow,x: Array.Cow.T,i: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (3.5): Array Array.Cow.T failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.Array.Cow.T._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Cow, x: Array.Cow.T, i: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.T._state[x], u);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Array.Cow.T._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.Array.Cow.T(u: Tid,x_owner: Cow,x: Array.Cow.T,i: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (3.5): Array Array.Cow.T failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.Array.Cow.T._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Cow, x: Array.Cow.T, i: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.T._state[x], u);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 assume w == Array.Cow.T._elems[x][i];                                                              
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;  // H                                                             
 _writeByT := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 Array.Cow.T._elems[x][i] := havocValue;                                                            
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1;   // H[p.f = _]                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Array.Cow.T(u: Tid,x_owner: Cow,x: Array.Cow.T,i: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (3.5): Array Array.Cow.T failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.Array.Cow.T._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Cow, x: Array.Cow.T, i: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.T._state[x], u);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : int;                                                                              
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 assume w == Array.Cow.T._elems[x][i];                                                              
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByU := ReadEval.Array.Cow.T(u: Tid,x_owner: Cow,x: Array.Cow.T,i: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1; // H                                                             
 _writeByT := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (3.5): Array Array.Cow.T failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.Array.Cow.T._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Cow, x: Array.Cow.T, i: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.T._state[x], u);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1;  // H                                                            
 _writeByU := WriteEval.Array.Cow.T(u: Tid,x_owner: Cow,x: Array.Cow.T,i: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (3.5): Array Array.Cow.T failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.Array.Cow.T._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Cow, x: Array.Cow.T, i: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.T._state[x], u);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
 assume w == Array.Cow.T._elems[x][i];                                                              
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 Array.Cow.T._elems[x][i] := havocValue;                                                            
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1; // H[p.f := _]                                                   
 _writeByU := WriteEval.Array.Cow.T(u: Tid,x_owner: Cow,x: Array.Cow.T,i: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (3.5): Array Array.Cow.T failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.Array.Cow.S._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Cow, x: Array.Cow.S, i: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.S._state[x], u);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var x_post: Array.Cow.S;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Array.Cow.S._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Array.Cow.S(u: Tid,x_owner: Cow,x: Array.Cow.S,i: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (4.5): Array Array.Cow.S failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.Array.Cow.S._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Cow, x: Array.Cow.S, i: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.S._state[x], u);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var x_post: Array.Cow.S;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Array.Cow.S._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.Array.Cow.S(u: Tid,x_owner: Cow,x: Array.Cow.S,i: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (4.5): Array Array.Cow.S failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.Array.Cow.S._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Cow, x: Array.Cow.S, i: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.S._state[x], u);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var x_post: Array.Cow.S;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 assume w == Array.Cow.S._elems[x][i];                                                              
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;  // H                                                             
 _writeByT := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 Array.Cow.S._elems[x][i] := havocValue;                                                            
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1;   // H[p.f = _]                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Array.Cow.S(u: Tid,x_owner: Cow,x: Array.Cow.S,i: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (4.5): Array Array.Cow.S failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.Array.Cow.S._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Cow, x: Array.Cow.S, i: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.S._state[x], u);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : int;                                                                              
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var x_post: Array.Cow.S;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 assume w == Array.Cow.S._elems[x][i];                                                              
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByU := ReadEval.Array.Cow.S(u: Tid,x_owner: Cow,x: Array.Cow.S,i: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1; // H                                                             
 _writeByT := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (4.5): Array Array.Cow.S failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.Array.Cow.S._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Cow, x: Array.Cow.S, i: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.S._state[x], u);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var x_post: Array.Cow.S;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1;  // H                                                            
 _writeByU := WriteEval.Array.Cow.S(u: Tid,x_owner: Cow,x: Array.Cow.S,i: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (4.5): Array Array.Cow.S failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.Array.Cow.S._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Cow, x: Array.Cow.S, i: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.S._state[x], u);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var x_post: Array.Cow.S;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
 assume w == Array.Cow.S._elems[x][i];                                                              
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 Array.Cow.S._elems[x][i] := havocValue;                                                            
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1; // H[p.f := _]                                                   
 _writeByU := WriteEval.Array.Cow.S(u: Tid,x_owner: Cow,x: Array.Cow.S,i: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (4.5): Array Array.Cow.S failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Cow.a.Cow.a(t: Tid, u: Tid, v: Array.Cow.T, w: Array.Cow.T, w0: Array.Cow.T, x: Cow, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Cow.a;                                                                                    
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var w0_pre: Array.Cow.T;                                                                           
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var u_pre: Tid;                                                                                    
 var v_pre: Array.Cow.T;                                                                            
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var w0_post: Array.Cow.T;                                                                          
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var w_post: Array.Cow.T;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow.a[x] := v;                                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (5.5): Cow.a is not Write-Write Stable with respect to Cow.a (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (5.5): Cow.a is not Write-Write Stable with respect to Cow.a (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (5.5): Cow.a is not Write-Write Stable with respect to Cow.a (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Cow.a.Cow.a(t: Tid, u: Tid, v: Array.Cow.T, w: Array.Cow.T, w0: Array.Cow.T, x: Cow, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Cow.a;                                                                                    
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Cow.T;                                                                            
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var w0_pre: Array.Cow.T;                                                                           
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var u_pre: Tid;                                                                                    
 var v_pre: Array.Cow.T;                                                                            
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var y_mid: Cow;                                                                                    
 var w_mid: Array.Cow.T;                                                                            
 var $recorded.state_mid: int;                                                                      
 var x_mid: Cow;                                                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var v_mid: Array.Cow.T;                                                                            
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var w0_mid: Array.Cow.T;                                                                           
 var Cow._state_mid: [Cow]State;                                                                    
 var Cow.b_mid: [Cow]Array.Cow.S;                                                                   
 var $pc_mid: Phase;                                                                                
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var w0_post: Array.Cow.T;                                                                          
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var w_post: Array.Cow.T;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Cow.a[x];                                                                                  
 Cow.a[x] := v;                                                                                     
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow.b_mid == Cow.b && Cow._lock_mid == Cow._lock && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Cow.a[x] := tmpV;                                                                                  
 Cow.a[y] := w;                                                                                     
 _writeByTPost := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Cow.a is not Write-Write Stable with respect to Cow.a (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Cow.a.Cow.a(t: Tid, u: Tid, v: Array.Cow.T, w: Array.Cow.T, w0: Array.Cow.T, x: Cow, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Cow.a;                                                                                    
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Cow.T;                                                                            
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var w0_pre: Array.Cow.T;                                                                           
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var u_pre: Tid;                                                                                    
 var v_pre: Array.Cow.T;                                                                            
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var y_mid: Cow;                                                                                    
 var w_mid: Array.Cow.T;                                                                            
 var $recorded.state_mid: int;                                                                      
 var x_mid: Cow;                                                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var v_mid: Array.Cow.T;                                                                            
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var w0_mid: Array.Cow.T;                                                                           
 var Cow._state_mid: [Cow]State;                                                                    
 var Cow.b_mid: [Cow]Array.Cow.S;                                                                   
 var $pc_mid: Phase;                                                                                
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var w0_post: Array.Cow.T;                                                                          
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var w_post: Array.Cow.T;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Cow.a[x];                                                                                  
 Cow.a[x] := v;                                                                                     
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow.b_mid == Cow.b && Cow._lock_mid == Cow._lock && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Cow.a[x] := tmpV;                                                                                  
 Cow.a[y] := w;                                                                                     
 _writeByTPost := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Cow.a is not Write-Write Stable with respect to Cow.a (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Cow.a is not Write-Write Stable with respect to Cow.a (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Cow.a.Cow.a(t: Tid, u: Tid, v: Array.Cow.T, w: Array.Cow.T, w0: Array.Cow.T, x: Cow, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Cow.a;                                                                                    
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var w0_pre: Array.Cow.T;                                                                           
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var u_pre: Tid;                                                                                    
 var v_pre: Array.Cow.T;                                                                            
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var w0_post: Array.Cow.T;                                                                          
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var w_post: Array.Cow.T;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Cow.a(t: Tid,x: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow.a[y] := w;                                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Cow.a(t: Tid,x: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Cow.a is not Read-Write Stable with respect to Cow.a (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Cow.a is not Read-Write Stable with respect to Cow.a (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Cow.a is not Read-Write Stable with respect to Cow.a (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Cow.a.Cow.a(t: Tid, u: Tid, v: Array.Cow.T, w: Array.Cow.T, w0: Array.Cow.T, x: Cow, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Cow.a;                                                                                    
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var w0_pre: Array.Cow.T;                                                                           
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var u_pre: Tid;                                                                                    
 var v_pre: Array.Cow.T;                                                                            
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var w0_post: Array.Cow.T;                                                                          
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var w_post: Array.Cow.T;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Cow.a(u: Tid,y: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow.a[x] := v;                                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Cow.a(u: Tid,y: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (5.5): Cow.a is not Write-Read Stable with respect to Cow.a (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (5.5): Cow.a is not Write-Read Stable with respect to Cow.a (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (5.5): Cow.a is not Write-Read Stable with respect to Cow.a (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Cow.a.Cow.b(t: Tid, u: Tid, v: Array.Cow.T, w: Array.Cow.S, w0: Array.Cow.S, x: Cow, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Cow.a;                                                                                    
 modifies Cow.b;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var w_pre: Array.Cow.S;                                                                            
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var u_pre: Tid;                                                                                    
 var v_pre: Array.Cow.T;                                                                            
 var w0_pre: Array.Cow.S;                                                                           
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w_post: Array.Cow.S;                                                                           
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var w0_post: Array.Cow.S;                                                                          
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow.b(u: Tid,y: Cow,w: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow.a[x] := v;                                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Cow.b(u: Tid,y: Cow,w: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (6.5): Cow.b is not Write-Write Stable with respect to Cow.a (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (6.5): Cow.b is not Write-Write Stable with respect to Cow.a (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (6.5): Cow.b is not Write-Write Stable with respect to Cow.a (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Cow.a.Cow.b(t: Tid, u: Tid, v: Array.Cow.T, w: Array.Cow.S, w0: Array.Cow.S, x: Cow, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Cow.a;                                                                                    
 modifies Cow.b;                                                                                    
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Cow.T;                                                                            
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var w_pre: Array.Cow.S;                                                                            
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var u_pre: Tid;                                                                                    
 var v_pre: Array.Cow.T;                                                                            
 var w0_pre: Array.Cow.S;                                                                           
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var w0_mid: Array.Cow.S;                                                                           
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var y_mid: Cow;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var x_mid: Cow;                                                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var v_mid: Array.Cow.T;                                                                            
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var w_mid: Array.Cow.S;                                                                            
 var Cow._state_mid: [Cow]State;                                                                    
 var Cow.b_mid: [Cow]Array.Cow.S;                                                                   
 var $pc_mid: Phase;                                                                                
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w_post: Array.Cow.S;                                                                           
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var w0_post: Array.Cow.S;                                                                          
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Cow.a[x];                                                                                  
 Cow.a[x] := v;                                                                                     
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow.b_mid == Cow.b && Cow._lock_mid == Cow._lock && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Cow.b(u: Tid,y: Cow,w: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Cow.a[x] := tmpV;                                                                                  
 Cow.b[y] := w;                                                                                     
 _writeByTPost := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Cow.a is not Write-Write Stable with respect to Cow.b (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Cow.a.Cow.b(t: Tid, u: Tid, v: Array.Cow.T, w: Array.Cow.S, w0: Array.Cow.S, x: Cow, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Cow.a;                                                                                    
 modifies Cow.b;                                                                                    
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Cow.T;                                                                            
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var w_pre: Array.Cow.S;                                                                            
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var u_pre: Tid;                                                                                    
 var v_pre: Array.Cow.T;                                                                            
 var w0_pre: Array.Cow.S;                                                                           
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var w0_mid: Array.Cow.S;                                                                           
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var y_mid: Cow;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var x_mid: Cow;                                                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var v_mid: Array.Cow.T;                                                                            
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var w_mid: Array.Cow.S;                                                                            
 var Cow._state_mid: [Cow]State;                                                                    
 var Cow.b_mid: [Cow]Array.Cow.S;                                                                   
 var $pc_mid: Phase;                                                                                
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w_post: Array.Cow.S;                                                                           
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var w0_post: Array.Cow.S;                                                                          
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow.b(u: Tid,y: Cow,w: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Cow.a[x];                                                                                  
 Cow.a[x] := v;                                                                                     
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow.b_mid == Cow.b && Cow._lock_mid == Cow._lock && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Cow.b(u: Tid,y: Cow,w: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Cow.a[x] := tmpV;                                                                                  
 Cow.b[y] := w;                                                                                     
 _writeByTPost := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Cow.a is not Write-Write Stable with respect to Cow.b (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Cow.a is not Write-Write Stable with respect to Cow.b (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Cow.a.Cow.b(t: Tid, u: Tid, v: Array.Cow.T, w: Array.Cow.S, w0: Array.Cow.S, x: Cow, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Cow.a;                                                                                    
 modifies Cow.b;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var w_pre: Array.Cow.S;                                                                            
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var u_pre: Tid;                                                                                    
 var v_pre: Array.Cow.T;                                                                            
 var w0_pre: Array.Cow.S;                                                                           
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w_post: Array.Cow.S;                                                                           
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var w0_post: Array.Cow.S;                                                                          
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Cow.a(t: Tid,x: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Cow.b(u: Tid,y: Cow,w: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow.b[y] := w;                                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Cow.a(t: Tid,x: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Cow.a is not Read-Write Stable with respect to Cow.b (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Cow.a is not Read-Write Stable with respect to Cow.b (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Cow.a is not Read-Write Stable with respect to Cow.b (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Cow.a.Cow.b(t: Tid, u: Tid, v: Array.Cow.T, w: Array.Cow.S, w0: Array.Cow.S, x: Cow, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Cow.a;                                                                                    
 modifies Cow.b;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var w_pre: Array.Cow.S;                                                                            
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var u_pre: Tid;                                                                                    
 var v_pre: Array.Cow.T;                                                                            
 var w0_pre: Array.Cow.S;                                                                           
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w_post: Array.Cow.S;                                                                           
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var w0_post: Array.Cow.S;                                                                          
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Cow.b(u: Tid,y: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow.a[x] := v;                                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Cow.b(u: Tid,y: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Cow.b is not Write-Read Stable with respect to Cow.a (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Cow.b is not Write-Read Stable with respect to Cow.a (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (6.5): Cow.b is not Write-Read Stable with respect to Cow.a (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Cow.a.Array.Cow.T._elems(t: Tid, u: Tid, v: Array.Cow.T, w: int, w0: int, x: Cow, y_owner: Cow, y: Array.Cow.T, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Array.Cow.T._state[y], u);                                                   
 requires Array.Cow.T._this[y] == y_owner;                                                          
 modifies Cow.a;                                                                                    
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var v_pre: Array.Cow.T;                                                                            
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
 var y_pre: Array.Cow.T;                                                                            
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var y_post: Array.Cow.T;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Cow.a[x] := v;                                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Cow.a (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Cow.a (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Cow.a (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Cow.a.Array.Cow.T._elems(t: Tid, u: Tid, v: Array.Cow.T, w: int, w0: int, x: Cow, y_owner: Cow, y: Array.Cow.T, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Array.Cow.T._state[y], u);                                                   
 requires Array.Cow.T._this[y] == y_owner;                                                          
 modifies Cow.a;                                                                                    
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Cow.T;                                                                            
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var v_pre: Array.Cow.T;                                                                            
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
 var y_pre: Array.Cow.T;                                                                            
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var $recorded.state_mid: int;                                                                      
 var x_mid: Cow;                                                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var v_mid: Array.Cow.T;                                                                            
 var w_mid: int;                                                                                    
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var y_mid: Array.Cow.T;                                                                            
 var y_owner_mid: Cow;                                                                              
 var Cow._state_mid: [Cow]State;                                                                    
 var j_mid: int;                                                                                    
 var Cow.b_mid: [Cow]Array.Cow.S;                                                                   
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var y_post: Array.Cow.T;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Cow.a[x];                                                                                  
 Cow.a[x] := v;                                                                                     
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow.b_mid == Cow.b && Cow._lock_mid == Cow._lock && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Cow.a[x] := tmpV;                                                                                  
 Array.Cow.T._elems[y][j] := w;                                                                     
 _writeByTPost := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.T (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Cow.a.Array.Cow.T._elems(t: Tid, u: Tid, v: Array.Cow.T, w: int, w0: int, x: Cow, y_owner: Cow, y: Array.Cow.T, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Array.Cow.T._state[y], u);                                                   
 requires Array.Cow.T._this[y] == y_owner;                                                          
 modifies Cow.a;                                                                                    
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Cow.T;                                                                            
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var v_pre: Array.Cow.T;                                                                            
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
 var y_pre: Array.Cow.T;                                                                            
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var $recorded.state_mid: int;                                                                      
 var x_mid: Cow;                                                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var v_mid: Array.Cow.T;                                                                            
 var w_mid: int;                                                                                    
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var y_mid: Array.Cow.T;                                                                            
 var y_owner_mid: Cow;                                                                              
 var Cow._state_mid: [Cow]State;                                                                    
 var j_mid: int;                                                                                    
 var Cow.b_mid: [Cow]Array.Cow.S;                                                                   
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var y_post: Array.Cow.T;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Cow.a[x];                                                                                  
 Cow.a[x] := v;                                                                                     
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow.b_mid == Cow.b && Cow._lock_mid == Cow._lock && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Cow.a[x] := tmpV;                                                                                  
 Array.Cow.T._elems[y][j] := w;                                                                     
 _writeByTPost := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.T (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.T (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Cow.a.Array.Cow.T._elems(t: Tid, u: Tid, v: Array.Cow.T, w: int, w0: int, x: Cow, y_owner: Cow, y: Array.Cow.T, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Array.Cow.T._state[y], u);                                                   
 requires Array.Cow.T._this[y] == y_owner;                                                          
 modifies Cow.a;                                                                                    
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var v_pre: Array.Cow.T;                                                                            
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
 var y_pre: Array.Cow.T;                                                                            
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var y_post: Array.Cow.T;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Cow.a(t: Tid,x: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.T._elems[y][j] := w;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Cow.a(t: Tid,x: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Cow.a is not Read-Write Stable with respect to Array Array.Cow.T (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Cow.a is not Read-Write Stable with respect to Array Array.Cow.T (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Cow.a is not Read-Write Stable with respect to Array Array.Cow.T (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Cow.a.Array.Cow.T._elems(t: Tid, u: Tid, v: Array.Cow.T, w: int, w0: int, x: Cow, y_owner: Cow, y: Array.Cow.T, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Array.Cow.T._state[y], u);                                                   
 requires Array.Cow.T._this[y] == y_owner;                                                          
 modifies Cow.a;                                                                                    
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var v_pre: Array.Cow.T;                                                                            
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
 var y_pre: Array.Cow.T;                                                                            
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var y_post: Array.Cow.T;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Cow.a[x] := v;                                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (3.5): Array Array.Cow.T is not Write-Read Stable with respect to Cow.a (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (3.5): Array Array.Cow.T is not Write-Read Stable with respect to Cow.a (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (3.5): Array Array.Cow.T is not Write-Read Stable with respect to Cow.a (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Cow.a.Array.Cow.S._elems(t: Tid, u: Tid, v: Array.Cow.T, w: int, w0: int, x: Cow, y_owner: Cow, y: Array.Cow.S, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Array.Cow.S._state[y], u);                                                   
 requires Array.Cow.S._this[y] == y_owner;                                                          
 modifies Cow.a;                                                                                    
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var y_pre: Array.Cow.S;                                                                            
 var j_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var v_pre: Array.Cow.T;                                                                            
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var y_post: Array.Cow.S;                                                                           
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Cow.a[x] := v;                                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Cow.a (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Cow.a (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Cow.a (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Cow.a.Array.Cow.S._elems(t: Tid, u: Tid, v: Array.Cow.T, w: int, w0: int, x: Cow, y_owner: Cow, y: Array.Cow.S, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Array.Cow.S._state[y], u);                                                   
 requires Array.Cow.S._this[y] == y_owner;                                                          
 modifies Cow.a;                                                                                    
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Cow.T;                                                                            
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var y_pre: Array.Cow.S;                                                                            
 var j_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var v_pre: Array.Cow.T;                                                                            
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var $recorded.state_mid: int;                                                                      
 var x_mid: Cow;                                                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var v_mid: Array.Cow.T;                                                                            
 var w_mid: int;                                                                                    
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var y_mid: Array.Cow.S;                                                                            
 var y_owner_mid: Cow;                                                                              
 var Cow._state_mid: [Cow]State;                                                                    
 var j_mid: int;                                                                                    
 var Cow.b_mid: [Cow]Array.Cow.S;                                                                   
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var y_post: Array.Cow.S;                                                                           
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Cow.a[x];                                                                                  
 Cow.a[x] := v;                                                                                     
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow.b_mid == Cow.b && Cow._lock_mid == Cow._lock && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Cow.a[x] := tmpV;                                                                                  
 Array.Cow.S._elems[y][j] := w;                                                                     
 _writeByTPost := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.S (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Cow.a.Array.Cow.S._elems(t: Tid, u: Tid, v: Array.Cow.T, w: int, w0: int, x: Cow, y_owner: Cow, y: Array.Cow.S, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Array.Cow.S._state[y], u);                                                   
 requires Array.Cow.S._this[y] == y_owner;                                                          
 modifies Cow.a;                                                                                    
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Cow.T;                                                                            
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var y_pre: Array.Cow.S;                                                                            
 var j_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var v_pre: Array.Cow.T;                                                                            
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var $recorded.state_mid: int;                                                                      
 var x_mid: Cow;                                                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var v_mid: Array.Cow.T;                                                                            
 var w_mid: int;                                                                                    
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var y_mid: Array.Cow.S;                                                                            
 var y_owner_mid: Cow;                                                                              
 var Cow._state_mid: [Cow]State;                                                                    
 var j_mid: int;                                                                                    
 var Cow.b_mid: [Cow]Array.Cow.S;                                                                   
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var y_post: Array.Cow.S;                                                                           
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Cow.a[x];                                                                                  
 Cow.a[x] := v;                                                                                     
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow.b_mid == Cow.b && Cow._lock_mid == Cow._lock && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Cow.a[x] := tmpV;                                                                                  
 Array.Cow.S._elems[y][j] := w;                                                                     
 _writeByTPost := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.S (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.S (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Cow.a.Array.Cow.S._elems(t: Tid, u: Tid, v: Array.Cow.T, w: int, w0: int, x: Cow, y_owner: Cow, y: Array.Cow.S, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Array.Cow.S._state[y], u);                                                   
 requires Array.Cow.S._this[y] == y_owner;                                                          
 modifies Cow.a;                                                                                    
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var y_pre: Array.Cow.S;                                                                            
 var j_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var v_pre: Array.Cow.T;                                                                            
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var y_post: Array.Cow.S;                                                                           
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Cow.a(t: Tid,x: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.S._elems[y][j] := w;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Cow.a(t: Tid,x: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Cow.a is not Read-Write Stable with respect to Array Array.Cow.S (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Cow.a is not Read-Write Stable with respect to Array Array.Cow.S (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Cow.a is not Read-Write Stable with respect to Array Array.Cow.S (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Cow.a.Array.Cow.S._elems(t: Tid, u: Tid, v: Array.Cow.T, w: int, w0: int, x: Cow, y_owner: Cow, y: Array.Cow.S, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Array.Cow.S._state[y], u);                                                   
 requires Array.Cow.S._this[y] == y_owner;                                                          
 modifies Cow.a;                                                                                    
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var y_pre: Array.Cow.S;                                                                            
 var j_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var v_pre: Array.Cow.T;                                                                            
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var y_post: Array.Cow.S;                                                                           
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var v_post: Array.Cow.T;                                                                           
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Cow.a(t: Tid,x: Cow,v: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Cow.a[x] := v;                                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Cow.a (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Cow.a (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Cow.a (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Cow.b.Cow.a(t: Tid, u: Tid, v: Array.Cow.S, w: Array.Cow.T, w0: Array.Cow.T, x: Cow, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Cow.b;                                                                                    
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var w0_pre: Array.Cow.T;                                                                           
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var u_pre: Tid;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var v_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var w0_post: Array.Cow.T;                                                                          
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var v_post: Array.Cow.S;                                                                           
 var Cow._state_post: [Cow]State;                                                                   
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var w_post: Array.Cow.T;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow.b(t: Tid,x: Cow,v: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow.b[x] := v;                                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (5.5): Cow.a is not Write-Write Stable with respect to Cow.b (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (5.5): Cow.a is not Write-Write Stable with respect to Cow.b (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (5.5): Cow.a is not Write-Write Stable with respect to Cow.b (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Cow.b.Cow.a(t: Tid, u: Tid, v: Array.Cow.S, w: Array.Cow.T, w0: Array.Cow.T, x: Cow, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Cow.b;                                                                                    
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Cow.S;                                                                            
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var w0_pre: Array.Cow.T;                                                                           
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var u_pre: Tid;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var v_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var y_mid: Cow;                                                                                    
 var w_mid: Array.Cow.T;                                                                            
 var $recorded.state_mid: int;                                                                      
 var x_mid: Cow;                                                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var w0_mid: Array.Cow.T;                                                                           
 var Cow._state_mid: [Cow]State;                                                                    
 var Cow.b_mid: [Cow]Array.Cow.S;                                                                   
 var v_mid: Array.Cow.S;                                                                            
 var $pc_mid: Phase;                                                                                
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var w0_post: Array.Cow.T;                                                                          
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var v_post: Array.Cow.S;                                                                           
 var Cow._state_post: [Cow]State;                                                                   
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var w_post: Array.Cow.T;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Cow.b(t: Tid,x: Cow,v: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Cow.b[x];                                                                                  
 Cow.b[x] := v;                                                                                     
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow.b_mid == Cow.b && Cow._lock_mid == Cow._lock && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Cow.b[x] := tmpV;                                                                                  
 Cow.a[y] := w;                                                                                     
 _writeByTPost := WriteEval.Cow.b(t: Tid,x: Cow,v: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Cow.b is not Write-Write Stable with respect to Cow.a (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Cow.b.Cow.a(t: Tid, u: Tid, v: Array.Cow.S, w: Array.Cow.T, w0: Array.Cow.T, x: Cow, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Cow.b;                                                                                    
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Cow.S;                                                                            
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var w0_pre: Array.Cow.T;                                                                           
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var u_pre: Tid;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var v_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var y_mid: Cow;                                                                                    
 var w_mid: Array.Cow.T;                                                                            
 var $recorded.state_mid: int;                                                                      
 var x_mid: Cow;                                                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var w0_mid: Array.Cow.T;                                                                           
 var Cow._state_mid: [Cow]State;                                                                    
 var Cow.b_mid: [Cow]Array.Cow.S;                                                                   
 var v_mid: Array.Cow.S;                                                                            
 var $pc_mid: Phase;                                                                                
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var w0_post: Array.Cow.T;                                                                          
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var v_post: Array.Cow.S;                                                                           
 var Cow._state_post: [Cow]State;                                                                   
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var w_post: Array.Cow.T;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow.b(t: Tid,x: Cow,v: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Cow.b[x];                                                                                  
 Cow.b[x] := v;                                                                                     
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow.b_mid == Cow.b && Cow._lock_mid == Cow._lock && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Cow.b[x] := tmpV;                                                                                  
 Cow.a[y] := w;                                                                                     
 _writeByTPost := WriteEval.Cow.b(t: Tid,x: Cow,v: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Cow.b is not Write-Write Stable with respect to Cow.a (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Cow.b is not Write-Write Stable with respect to Cow.a (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Cow.b.Cow.a(t: Tid, u: Tid, v: Array.Cow.S, w: Array.Cow.T, w0: Array.Cow.T, x: Cow, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Cow.b;                                                                                    
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var w0_pre: Array.Cow.T;                                                                           
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var u_pre: Tid;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var v_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var w0_post: Array.Cow.T;                                                                          
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var v_post: Array.Cow.S;                                                                           
 var Cow._state_post: [Cow]State;                                                                   
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var w_post: Array.Cow.T;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Cow.b(t: Tid,x: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow.a[y] := w;                                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Cow.b(t: Tid,x: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Cow.b is not Read-Write Stable with respect to Cow.a (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Cow.b is not Read-Write Stable with respect to Cow.a (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Cow.b is not Read-Write Stable with respect to Cow.a (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Cow.b.Cow.a(t: Tid, u: Tid, v: Array.Cow.S, w: Array.Cow.T, w0: Array.Cow.T, x: Cow, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Cow.b;                                                                                    
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var w0_pre: Array.Cow.T;                                                                           
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var u_pre: Tid;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var v_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var w0_post: Array.Cow.T;                                                                          
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var v_post: Array.Cow.S;                                                                           
 var Cow._state_post: [Cow]State;                                                                   
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var w_post: Array.Cow.T;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Cow.a(u: Tid,y: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Cow.b(t: Tid,x: Cow,v: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow.b[x] := v;                                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Cow.a(u: Tid,y: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (5.5): Cow.a is not Write-Read Stable with respect to Cow.b (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (5.5): Cow.a is not Write-Read Stable with respect to Cow.b (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (5.5): Cow.a is not Write-Read Stable with respect to Cow.b (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Cow.b.Cow.b(t: Tid, u: Tid, v: Array.Cow.S, w: Array.Cow.S, w0: Array.Cow.S, x: Cow, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Cow.b;                                                                                    
 modifies Cow.b;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var w_pre: Array.Cow.S;                                                                            
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var u_pre: Tid;                                                                                    
 var w0_pre: Array.Cow.S;                                                                           
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var v_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w_post: Array.Cow.S;                                                                           
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var v_post: Array.Cow.S;                                                                           
 var Cow._state_post: [Cow]State;                                                                   
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var w0_post: Array.Cow.S;                                                                          
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow.b(u: Tid,y: Cow,w: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow.b(t: Tid,x: Cow,v: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow.b[x] := v;                                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Cow.b(u: Tid,y: Cow,w: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (6.5): Cow.b is not Write-Write Stable with respect to Cow.b (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (6.5): Cow.b is not Write-Write Stable with respect to Cow.b (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (6.5): Cow.b is not Write-Write Stable with respect to Cow.b (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Cow.b.Cow.b(t: Tid, u: Tid, v: Array.Cow.S, w: Array.Cow.S, w0: Array.Cow.S, x: Cow, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Cow.b;                                                                                    
 modifies Cow.b;                                                                                    
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Cow.S;                                                                            
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var w_pre: Array.Cow.S;                                                                            
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var u_pre: Tid;                                                                                    
 var w0_pre: Array.Cow.S;                                                                           
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var v_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var w0_mid: Array.Cow.S;                                                                           
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var y_mid: Cow;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var x_mid: Cow;                                                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var w_mid: Array.Cow.S;                                                                            
 var Cow._state_mid: [Cow]State;                                                                    
 var Cow.b_mid: [Cow]Array.Cow.S;                                                                   
 var v_mid: Array.Cow.S;                                                                            
 var $pc_mid: Phase;                                                                                
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w_post: Array.Cow.S;                                                                           
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var v_post: Array.Cow.S;                                                                           
 var Cow._state_post: [Cow]State;                                                                   
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var w0_post: Array.Cow.S;                                                                          
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Cow.b(t: Tid,x: Cow,v: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Cow.b[x];                                                                                  
 Cow.b[x] := v;                                                                                     
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow.b_mid == Cow.b && Cow._lock_mid == Cow._lock && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Cow.b(u: Tid,y: Cow,w: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Cow.b[x] := tmpV;                                                                                  
 Cow.b[y] := w;                                                                                     
 _writeByTPost := WriteEval.Cow.b(t: Tid,x: Cow,v: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Cow.b is not Write-Write Stable with respect to Cow.b (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Cow.b.Cow.b(t: Tid, u: Tid, v: Array.Cow.S, w: Array.Cow.S, w0: Array.Cow.S, x: Cow, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Cow.b;                                                                                    
 modifies Cow.b;                                                                                    
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Cow.S;                                                                            
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var w_pre: Array.Cow.S;                                                                            
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var u_pre: Tid;                                                                                    
 var w0_pre: Array.Cow.S;                                                                           
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var v_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var w0_mid: Array.Cow.S;                                                                           
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var y_mid: Cow;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var x_mid: Cow;                                                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var w_mid: Array.Cow.S;                                                                            
 var Cow._state_mid: [Cow]State;                                                                    
 var Cow.b_mid: [Cow]Array.Cow.S;                                                                   
 var v_mid: Array.Cow.S;                                                                            
 var $pc_mid: Phase;                                                                                
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w_post: Array.Cow.S;                                                                           
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var v_post: Array.Cow.S;                                                                           
 var Cow._state_post: [Cow]State;                                                                   
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var w0_post: Array.Cow.S;                                                                          
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow.b(u: Tid,y: Cow,w: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow.b(t: Tid,x: Cow,v: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Cow.b[x];                                                                                  
 Cow.b[x] := v;                                                                                     
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow.b_mid == Cow.b && Cow._lock_mid == Cow._lock && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Cow.b(u: Tid,y: Cow,w: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Cow.b[x] := tmpV;                                                                                  
 Cow.b[y] := w;                                                                                     
 _writeByTPost := WriteEval.Cow.b(t: Tid,x: Cow,v: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Cow.b is not Write-Write Stable with respect to Cow.b (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Cow.b is not Write-Write Stable with respect to Cow.b (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Cow.b.Cow.b(t: Tid, u: Tid, v: Array.Cow.S, w: Array.Cow.S, w0: Array.Cow.S, x: Cow, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Cow.b;                                                                                    
 modifies Cow.b;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var w_pre: Array.Cow.S;                                                                            
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var u_pre: Tid;                                                                                    
 var w0_pre: Array.Cow.S;                                                                           
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var v_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w_post: Array.Cow.S;                                                                           
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var v_post: Array.Cow.S;                                                                           
 var Cow._state_post: [Cow]State;                                                                   
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var w0_post: Array.Cow.S;                                                                          
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Cow.b(t: Tid,x: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Cow.b(u: Tid,y: Cow,w: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow.b[y] := w;                                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Cow.b(t: Tid,x: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Cow.b is not Read-Write Stable with respect to Cow.b (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Cow.b is not Read-Write Stable with respect to Cow.b (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Cow.b is not Read-Write Stable with respect to Cow.b (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Cow.b.Cow.b(t: Tid, u: Tid, v: Array.Cow.S, w: Array.Cow.S, w0: Array.Cow.S, x: Cow, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Cow.b;                                                                                    
 modifies Cow.b;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var w_pre: Array.Cow.S;                                                                            
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var u_pre: Tid;                                                                                    
 var w0_pre: Array.Cow.S;                                                                           
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var v_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w_post: Array.Cow.S;                                                                           
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var v_post: Array.Cow.S;                                                                           
 var Cow._state_post: [Cow]State;                                                                   
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var w0_post: Array.Cow.S;                                                                          
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Cow.b(u: Tid,y: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Cow.b(t: Tid,x: Cow,v: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow.b[x] := v;                                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Cow.b(u: Tid,y: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Cow.b is not Write-Read Stable with respect to Cow.b (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Cow.b is not Write-Read Stable with respect to Cow.b (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (6.5): Cow.b is not Write-Read Stable with respect to Cow.b (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Cow.b.Array.Cow.T._elems(t: Tid, u: Tid, v: Array.Cow.S, w: int, w0: int, x: Cow, y_owner: Cow, y: Array.Cow.T, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Array.Cow.T._state[y], u);                                                   
 requires Array.Cow.T._this[y] == y_owner;                                                          
 modifies Cow.b;                                                                                    
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var v_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
 var y_pre: Array.Cow.T;                                                                            
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var j_post: int;                                                                                   
 var v_post: Array.Cow.S;                                                                           
 var Cow._state_post: [Cow]State;                                                                   
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var y_post: Array.Cow.T;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow.b(t: Tid,x: Cow,v: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Cow.b[x] := v;                                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Cow.b (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Cow.b (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Cow.b (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Cow.b.Array.Cow.T._elems(t: Tid, u: Tid, v: Array.Cow.S, w: int, w0: int, x: Cow, y_owner: Cow, y: Array.Cow.T, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Array.Cow.T._state[y], u);                                                   
 requires Array.Cow.T._this[y] == y_owner;                                                          
 modifies Cow.b;                                                                                    
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Cow.S;                                                                            
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var v_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
 var y_pre: Array.Cow.T;                                                                            
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var $recorded.state_mid: int;                                                                      
 var x_mid: Cow;                                                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var w_mid: int;                                                                                    
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var y_mid: Array.Cow.T;                                                                            
 var y_owner_mid: Cow;                                                                              
 var Cow._state_mid: [Cow]State;                                                                    
 var j_mid: int;                                                                                    
 var Cow.b_mid: [Cow]Array.Cow.S;                                                                   
 var v_mid: Array.Cow.S;                                                                            
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var j_post: int;                                                                                   
 var v_post: Array.Cow.S;                                                                           
 var Cow._state_post: [Cow]State;                                                                   
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var y_post: Array.Cow.T;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Cow.b(t: Tid,x: Cow,v: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Cow.b[x];                                                                                  
 Cow.b[x] := v;                                                                                     
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow.b_mid == Cow.b && Cow._lock_mid == Cow._lock && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Cow.b[x] := tmpV;                                                                                  
 Array.Cow.T._elems[y][j] := w;                                                                     
 _writeByTPost := WriteEval.Cow.b(t: Tid,x: Cow,v: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Cow.b is not Write-Write Stable with respect to Array Array.Cow.T (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Cow.b.Array.Cow.T._elems(t: Tid, u: Tid, v: Array.Cow.S, w: int, w0: int, x: Cow, y_owner: Cow, y: Array.Cow.T, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Array.Cow.T._state[y], u);                                                   
 requires Array.Cow.T._this[y] == y_owner;                                                          
 modifies Cow.b;                                                                                    
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Cow.S;                                                                            
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var v_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
 var y_pre: Array.Cow.T;                                                                            
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var $recorded.state_mid: int;                                                                      
 var x_mid: Cow;                                                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var w_mid: int;                                                                                    
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var y_mid: Array.Cow.T;                                                                            
 var y_owner_mid: Cow;                                                                              
 var Cow._state_mid: [Cow]State;                                                                    
 var j_mid: int;                                                                                    
 var Cow.b_mid: [Cow]Array.Cow.S;                                                                   
 var v_mid: Array.Cow.S;                                                                            
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var j_post: int;                                                                                   
 var v_post: Array.Cow.S;                                                                           
 var Cow._state_post: [Cow]State;                                                                   
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var y_post: Array.Cow.T;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow.b(t: Tid,x: Cow,v: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Cow.b[x];                                                                                  
 Cow.b[x] := v;                                                                                     
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow.b_mid == Cow.b && Cow._lock_mid == Cow._lock && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Cow.b[x] := tmpV;                                                                                  
 Array.Cow.T._elems[y][j] := w;                                                                     
 _writeByTPost := WriteEval.Cow.b(t: Tid,x: Cow,v: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Cow.b is not Write-Write Stable with respect to Array Array.Cow.T (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Cow.b is not Write-Write Stable with respect to Array Array.Cow.T (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Cow.b.Array.Cow.T._elems(t: Tid, u: Tid, v: Array.Cow.S, w: int, w0: int, x: Cow, y_owner: Cow, y: Array.Cow.T, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Array.Cow.T._state[y], u);                                                   
 requires Array.Cow.T._this[y] == y_owner;                                                          
 modifies Cow.b;                                                                                    
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var v_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
 var y_pre: Array.Cow.T;                                                                            
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var j_post: int;                                                                                   
 var v_post: Array.Cow.S;                                                                           
 var Cow._state_post: [Cow]State;                                                                   
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var y_post: Array.Cow.T;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Cow.b(t: Tid,x: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.T._elems[y][j] := w;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Cow.b(t: Tid,x: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Cow.b is not Read-Write Stable with respect to Array Array.Cow.T (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Cow.b is not Read-Write Stable with respect to Array Array.Cow.T (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Cow.b is not Read-Write Stable with respect to Array Array.Cow.T (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Cow.b.Array.Cow.T._elems(t: Tid, u: Tid, v: Array.Cow.S, w: int, w0: int, x: Cow, y_owner: Cow, y: Array.Cow.T, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Array.Cow.T._state[y], u);                                                   
 requires Array.Cow.T._this[y] == y_owner;                                                          
 modifies Cow.b;                                                                                    
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var v_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
 var y_pre: Array.Cow.T;                                                                            
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var j_post: int;                                                                                   
 var v_post: Array.Cow.S;                                                                           
 var Cow._state_post: [Cow]State;                                                                   
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var y_post: Array.Cow.T;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Cow.b(t: Tid,x: Cow,v: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Cow.b[x] := v;                                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (3.5): Array Array.Cow.T is not Write-Read Stable with respect to Cow.b (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (3.5): Array Array.Cow.T is not Write-Read Stable with respect to Cow.b (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (3.5): Array Array.Cow.T is not Write-Read Stable with respect to Cow.b (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Cow.b.Array.Cow.S._elems(t: Tid, u: Tid, v: Array.Cow.S, w: int, w0: int, x: Cow, y_owner: Cow, y: Array.Cow.S, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Array.Cow.S._state[y], u);                                                   
 requires Array.Cow.S._this[y] == y_owner;                                                          
 modifies Cow.b;                                                                                    
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var y_pre: Array.Cow.S;                                                                            
 var j_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var v_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var j_post: int;                                                                                   
 var v_post: Array.Cow.S;                                                                           
 var Cow._state_post: [Cow]State;                                                                   
 var y_post: Array.Cow.S;                                                                           
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow.b(t: Tid,x: Cow,v: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Cow.b[x] := v;                                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Cow.b (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Cow.b (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Cow.b (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Cow.b.Array.Cow.S._elems(t: Tid, u: Tid, v: Array.Cow.S, w: int, w0: int, x: Cow, y_owner: Cow, y: Array.Cow.S, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Array.Cow.S._state[y], u);                                                   
 requires Array.Cow.S._this[y] == y_owner;                                                          
 modifies Cow.b;                                                                                    
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Cow.S;                                                                            
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var y_pre: Array.Cow.S;                                                                            
 var j_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var v_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var $recorded.state_mid: int;                                                                      
 var x_mid: Cow;                                                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var w_mid: int;                                                                                    
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var y_mid: Array.Cow.S;                                                                            
 var y_owner_mid: Cow;                                                                              
 var Cow._state_mid: [Cow]State;                                                                    
 var j_mid: int;                                                                                    
 var Cow.b_mid: [Cow]Array.Cow.S;                                                                   
 var v_mid: Array.Cow.S;                                                                            
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var j_post: int;                                                                                   
 var v_post: Array.Cow.S;                                                                           
 var Cow._state_post: [Cow]State;                                                                   
 var y_post: Array.Cow.S;                                                                           
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Cow.b(t: Tid,x: Cow,v: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Cow.b[x];                                                                                  
 Cow.b[x] := v;                                                                                     
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow.b_mid == Cow.b && Cow._lock_mid == Cow._lock && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Cow.b[x] := tmpV;                                                                                  
 Array.Cow.S._elems[y][j] := w;                                                                     
 _writeByTPost := WriteEval.Cow.b(t: Tid,x: Cow,v: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Cow.b is not Write-Write Stable with respect to Array Array.Cow.S (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Cow.b.Array.Cow.S._elems(t: Tid, u: Tid, v: Array.Cow.S, w: int, w0: int, x: Cow, y_owner: Cow, y: Array.Cow.S, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Array.Cow.S._state[y], u);                                                   
 requires Array.Cow.S._this[y] == y_owner;                                                          
 modifies Cow.b;                                                                                    
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Cow.S;                                                                            
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var y_pre: Array.Cow.S;                                                                            
 var j_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var v_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var $recorded.state_mid: int;                                                                      
 var x_mid: Cow;                                                                                    
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var w_mid: int;                                                                                    
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var y_mid: Array.Cow.S;                                                                            
 var y_owner_mid: Cow;                                                                              
 var Cow._state_mid: [Cow]State;                                                                    
 var j_mid: int;                                                                                    
 var Cow.b_mid: [Cow]Array.Cow.S;                                                                   
 var v_mid: Array.Cow.S;                                                                            
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var j_post: int;                                                                                   
 var v_post: Array.Cow.S;                                                                           
 var Cow._state_post: [Cow]State;                                                                   
 var y_post: Array.Cow.S;                                                                           
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Cow.b(t: Tid,x: Cow,v: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Cow.b[x];                                                                                  
 Cow.b[x] := v;                                                                                     
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow.b_mid == Cow.b && Cow._lock_mid == Cow._lock && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Cow.b[x] := tmpV;                                                                                  
 Array.Cow.S._elems[y][j] := w;                                                                     
 _writeByTPost := WriteEval.Cow.b(t: Tid,x: Cow,v: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Cow.b is not Write-Write Stable with respect to Array Array.Cow.S (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Cow.b is not Write-Write Stable with respect to Array Array.Cow.S (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Cow.b.Array.Cow.S._elems(t: Tid, u: Tid, v: Array.Cow.S, w: int, w0: int, x: Cow, y_owner: Cow, y: Array.Cow.S, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Array.Cow.S._state[y], u);                                                   
 requires Array.Cow.S._this[y] == y_owner;                                                          
 modifies Cow.b;                                                                                    
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var y_pre: Array.Cow.S;                                                                            
 var j_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var v_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var j_post: int;                                                                                   
 var v_post: Array.Cow.S;                                                                           
 var Cow._state_post: [Cow]State;                                                                   
 var y_post: Array.Cow.S;                                                                           
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Cow.b(t: Tid,x: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.S._elems[y][j] := w;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Cow.b(t: Tid,x: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Cow.b is not Read-Write Stable with respect to Array Array.Cow.S (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Cow.b is not Read-Write Stable with respect to Array Array.Cow.S (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Cow.b is not Read-Write Stable with respect to Array Array.Cow.S (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Cow.b.Array.Cow.S._elems(t: Tid, u: Tid, v: Array.Cow.S, w: int, w0: int, x: Cow, y_owner: Cow, y: Array.Cow.S, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Cow._state[x], t);                                                           
 requires isAccessible(Array.Cow.S._state[y], u);                                                   
 requires Array.Cow.S._this[y] == y_owner;                                                          
 modifies Cow.b;                                                                                    
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var y_pre: Array.Cow.S;                                                                            
 var j_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var w_pre: int;                                                                                    
 var x_pre: Cow;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var v_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var x_post: Cow;                                                                                   
 var j_post: int;                                                                                   
 var v_post: Array.Cow.S;                                                                           
 var Cow._state_post: [Cow]State;                                                                   
 var y_post: Array.Cow.S;                                                                           
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Cow.b(t: Tid,x: Cow,v: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Cow.b[x] := v;                                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Cow.b (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Cow.b (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Cow.b (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Cow.T._elems.Cow.a(t: Tid, u: Tid, v: int, w: Array.Cow.T, w0: Array.Cow.T, x_owner: Cow, x: Array.Cow.T, i: int, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Array.Cow.T._elems;                                                                       
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var w0_pre: Array.Cow.T;                                                                           
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var i_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var w0_post: Array.Cow.T;                                                                          
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var w_post: Array.Cow.T;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.T._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (5.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.T (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (5.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.T (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (5.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.T (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Cow.T._elems.Cow.a(t: Tid, u: Tid, v: int, w: Array.Cow.T, w0: Array.Cow.T, x_owner: Cow, x: Array.Cow.T, i: int, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Array.Cow.T._elems;                                                                       
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var w0_pre: Array.Cow.T;                                                                           
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var i_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var y_mid: Cow;                                                                                    
 var i_mid: int;                                                                                    
 var w_mid: Array.Cow.T;                                                                            
 var $recorded.state_mid: int;                                                                      
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var x_mid: Array.Cow.T;                                                                            
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var w0_mid: Array.Cow.T;                                                                           
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_owner_mid: Cow;                                                                              
 var Cow.b_mid: [Cow]Array.Cow.S;                                                                   
 var $pc_mid: Phase;                                                                                
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var w0_post: Array.Cow.T;                                                                          
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var w_post: Array.Cow.T;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Cow.T._elems[x][i];                                                                  
 Array.Cow.T._elems[x][i] := v;                                                                     
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow.b_mid == Cow.b && Cow._lock_mid == Cow._lock && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Cow.T._elems[x][i] := tmpV;                                                                  
 Cow.a[y] := w;                                                                                     
 _writeByTPost := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Cow.a (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Cow.T._elems.Cow.a(t: Tid, u: Tid, v: int, w: Array.Cow.T, w0: Array.Cow.T, x_owner: Cow, x: Array.Cow.T, i: int, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Array.Cow.T._elems;                                                                       
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var w0_pre: Array.Cow.T;                                                                           
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var i_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var y_mid: Cow;                                                                                    
 var i_mid: int;                                                                                    
 var w_mid: Array.Cow.T;                                                                            
 var $recorded.state_mid: int;                                                                      
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var x_mid: Array.Cow.T;                                                                            
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var w0_mid: Array.Cow.T;                                                                           
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_owner_mid: Cow;                                                                              
 var Cow.b_mid: [Cow]Array.Cow.S;                                                                   
 var $pc_mid: Phase;                                                                                
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var w0_post: Array.Cow.T;                                                                          
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var w_post: Array.Cow.T;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Cow.T._elems[x][i];                                                                  
 Array.Cow.T._elems[x][i] := v;                                                                     
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow.b_mid == Cow.b && Cow._lock_mid == Cow._lock && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Cow.T._elems[x][i] := tmpV;                                                                  
 Cow.a[y] := w;                                                                                     
 _writeByTPost := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Cow.a (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Cow.a (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Cow.T._elems.Cow.a(t: Tid, u: Tid, v: int, w: Array.Cow.T, w0: Array.Cow.T, x_owner: Cow, x: Array.Cow.T, i: int, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Array.Cow.T._elems;                                                                       
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var w0_pre: Array.Cow.T;                                                                           
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var i_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var w0_post: Array.Cow.T;                                                                          
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var w_post: Array.Cow.T;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow.a[y] := w;                                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.5): Array Array.Cow.T is not Read-Write Stable with respect to Cow.a (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.5): Array Array.Cow.T is not Read-Write Stable with respect to Cow.a (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.5): Array Array.Cow.T is not Read-Write Stable with respect to Cow.a (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Cow.T._elems.Cow.a(t: Tid, u: Tid, v: int, w: Array.Cow.T, w0: Array.Cow.T, x_owner: Cow, x: Array.Cow.T, i: int, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Array.Cow.T._elems;                                                                       
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var w0_pre: Array.Cow.T;                                                                           
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var i_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var w0_post: Array.Cow.T;                                                                          
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var w_post: Array.Cow.T;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Cow.a(u: Tid,y: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.T._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Cow.a(u: Tid,y: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (5.5): Cow.a is not Write-Read Stable with respect to Array Array.Cow.T (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (5.5): Cow.a is not Write-Read Stable with respect to Array Array.Cow.T (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (5.5): Cow.a is not Write-Read Stable with respect to Array Array.Cow.T (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Cow.T._elems.Cow.b(t: Tid, u: Tid, v: int, w: Array.Cow.S, w0: Array.Cow.S, x_owner: Cow, x: Array.Cow.T, i: int, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Array.Cow.T._elems;                                                                       
 modifies Cow.b;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var w_pre: Array.Cow.S;                                                                            
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var w0_pre: Array.Cow.S;                                                                           
 var i_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w_post: Array.Cow.S;                                                                           
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var w0_post: Array.Cow.S;                                                                          
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow.b(u: Tid,y: Cow,w: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.T._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Cow.b(u: Tid,y: Cow,w: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (6.5): Cow.b is not Write-Write Stable with respect to Array Array.Cow.T (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (6.5): Cow.b is not Write-Write Stable with respect to Array Array.Cow.T (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (6.5): Cow.b is not Write-Write Stable with respect to Array Array.Cow.T (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Cow.T._elems.Cow.b(t: Tid, u: Tid, v: int, w: Array.Cow.S, w0: Array.Cow.S, x_owner: Cow, x: Array.Cow.T, i: int, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Array.Cow.T._elems;                                                                       
 modifies Cow.b;                                                                                    
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var w_pre: Array.Cow.S;                                                                            
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var w0_pre: Array.Cow.S;                                                                           
 var i_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var w0_mid: Array.Cow.S;                                                                           
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var y_mid: Cow;                                                                                    
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var x_mid: Array.Cow.T;                                                                            
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var w_mid: Array.Cow.S;                                                                            
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_owner_mid: Cow;                                                                              
 var Cow.b_mid: [Cow]Array.Cow.S;                                                                   
 var $pc_mid: Phase;                                                                                
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w_post: Array.Cow.S;                                                                           
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var w0_post: Array.Cow.S;                                                                          
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Cow.T._elems[x][i];                                                                  
 Array.Cow.T._elems[x][i] := v;                                                                     
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow.b_mid == Cow.b && Cow._lock_mid == Cow._lock && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Cow.b(u: Tid,y: Cow,w: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Cow.T._elems[x][i] := tmpV;                                                                  
 Cow.b[y] := w;                                                                                     
 _writeByTPost := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Cow.b (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Cow.T._elems.Cow.b(t: Tid, u: Tid, v: int, w: Array.Cow.S, w0: Array.Cow.S, x_owner: Cow, x: Array.Cow.T, i: int, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Array.Cow.T._elems;                                                                       
 modifies Cow.b;                                                                                    
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var w_pre: Array.Cow.S;                                                                            
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var w0_pre: Array.Cow.S;                                                                           
 var i_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var w0_mid: Array.Cow.S;                                                                           
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var y_mid: Cow;                                                                                    
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var x_mid: Array.Cow.T;                                                                            
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var w_mid: Array.Cow.S;                                                                            
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_owner_mid: Cow;                                                                              
 var Cow.b_mid: [Cow]Array.Cow.S;                                                                   
 var $pc_mid: Phase;                                                                                
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w_post: Array.Cow.S;                                                                           
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var w0_post: Array.Cow.S;                                                                          
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow.b(u: Tid,y: Cow,w: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Cow.T._elems[x][i];                                                                  
 Array.Cow.T._elems[x][i] := v;                                                                     
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow.b_mid == Cow.b && Cow._lock_mid == Cow._lock && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Cow.b(u: Tid,y: Cow,w: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Cow.T._elems[x][i] := tmpV;                                                                  
 Cow.b[y] := w;                                                                                     
 _writeByTPost := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Cow.b (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Cow.b (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Cow.T._elems.Cow.b(t: Tid, u: Tid, v: int, w: Array.Cow.S, w0: Array.Cow.S, x_owner: Cow, x: Array.Cow.T, i: int, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Array.Cow.T._elems;                                                                       
 modifies Cow.b;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var w_pre: Array.Cow.S;                                                                            
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var w0_pre: Array.Cow.S;                                                                           
 var i_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w_post: Array.Cow.S;                                                                           
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var w0_post: Array.Cow.S;                                                                          
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Cow.b(u: Tid,y: Cow,w: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow.b[y] := w;                                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.5): Array Array.Cow.T is not Read-Write Stable with respect to Cow.b (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.5): Array Array.Cow.T is not Read-Write Stable with respect to Cow.b (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.5): Array Array.Cow.T is not Read-Write Stable with respect to Cow.b (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Cow.T._elems.Cow.b(t: Tid, u: Tid, v: int, w: Array.Cow.S, w0: Array.Cow.S, x_owner: Cow, x: Array.Cow.T, i: int, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Array.Cow.T._elems;                                                                       
 modifies Cow.b;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var w_pre: Array.Cow.S;                                                                            
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var w0_pre: Array.Cow.S;                                                                           
 var i_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w_post: Array.Cow.S;                                                                           
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var w0_post: Array.Cow.S;                                                                          
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Cow.b(u: Tid,y: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.T._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Cow.b(u: Tid,y: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Cow.b is not Write-Read Stable with respect to Array Array.Cow.T (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Cow.b is not Write-Read Stable with respect to Array Array.Cow.T (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (6.5): Cow.b is not Write-Read Stable with respect to Array Array.Cow.T (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Cow.T._elems.Array.Cow.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.T, i: int, y_owner: Cow, y: Array.Cow.T, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.T._state[y], u);                                                   
 requires Array.Cow.T._this[y] == y_owner;                                                          
 modifies Array.Cow.T._elems;                                                                       
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
 var y_pre: Array.Cow.T;                                                                            
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var y_post: Array.Cow.T;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.T._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.T (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.T (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.T (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Cow.T._elems.Array.Cow.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.T, i: int, y_owner: Cow, y: Array.Cow.T, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.T._state[y], u);                                                   
 requires Array.Cow.T._this[y] == y_owner;                                                          
 modifies Array.Cow.T._elems;                                                                       
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
 var y_pre: Array.Cow.T;                                                                            
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var w_mid: int;                                                                                    
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var x_mid: Array.Cow.T;                                                                            
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var y_mid: Array.Cow.T;                                                                            
 var y_owner_mid: Cow;                                                                              
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_owner_mid: Cow;                                                                              
 var j_mid: int;                                                                                    
 var Cow.b_mid: [Cow]Array.Cow.S;                                                                   
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var y_post: Array.Cow.T;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Cow.T._elems[x][i];                                                                  
 Array.Cow.T._elems[x][i] := v;                                                                     
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow.b_mid == Cow.b && Cow._lock_mid == Cow._lock && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Cow.T._elems[x][i] := tmpV;                                                                  
 Array.Cow.T._elems[y][j] := w;                                                                     
 _writeByTPost := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.T (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Cow.T._elems.Array.Cow.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.T, i: int, y_owner: Cow, y: Array.Cow.T, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.T._state[y], u);                                                   
 requires Array.Cow.T._this[y] == y_owner;                                                          
 modifies Array.Cow.T._elems;                                                                       
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
 var y_pre: Array.Cow.T;                                                                            
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var w_mid: int;                                                                                    
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var x_mid: Array.Cow.T;                                                                            
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var y_mid: Array.Cow.T;                                                                            
 var y_owner_mid: Cow;                                                                              
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_owner_mid: Cow;                                                                              
 var j_mid: int;                                                                                    
 var Cow.b_mid: [Cow]Array.Cow.S;                                                                   
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var y_post: Array.Cow.T;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Cow.T._elems[x][i];                                                                  
 Array.Cow.T._elems[x][i] := v;                                                                     
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow.b_mid == Cow.b && Cow._lock_mid == Cow._lock && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Cow.T._elems[x][i] := tmpV;                                                                  
 Array.Cow.T._elems[y][j] := w;                                                                     
 _writeByTPost := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.T (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.T (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Cow.T._elems.Array.Cow.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.T, i: int, y_owner: Cow, y: Array.Cow.T, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.T._state[y], u);                                                   
 requires Array.Cow.T._this[y] == y_owner;                                                          
 modifies Array.Cow.T._elems;                                                                       
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
 var y_pre: Array.Cow.T;                                                                            
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var y_post: Array.Cow.T;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.T._elems[y][j] := w;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.5): Array Array.Cow.T is not Read-Write Stable with respect to Array Array.Cow.T (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.5): Array Array.Cow.T is not Read-Write Stable with respect to Array Array.Cow.T (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.5): Array Array.Cow.T is not Read-Write Stable with respect to Array Array.Cow.T (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Cow.T._elems.Array.Cow.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.T, i: int, y_owner: Cow, y: Array.Cow.T, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.T._state[y], u);                                                   
 requires Array.Cow.T._this[y] == y_owner;                                                          
 modifies Array.Cow.T._elems;                                                                       
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
 var y_pre: Array.Cow.T;                                                                            
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var y_post: Array.Cow.T;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.T._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (3.5): Array Array.Cow.T is not Write-Read Stable with respect to Array Array.Cow.T (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (3.5): Array Array.Cow.T is not Write-Read Stable with respect to Array Array.Cow.T (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (3.5): Array Array.Cow.T is not Write-Read Stable with respect to Array Array.Cow.T (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Cow.T._elems.Array.Cow.S._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.T, i: int, y_owner: Cow, y: Array.Cow.S, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.S._state[y], u);                                                   
 requires Array.Cow.S._this[y] == y_owner;                                                          
 modifies Array.Cow.T._elems;                                                                       
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var y_pre: Array.Cow.S;                                                                            
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var y_post: Array.Cow.S;                                                                           
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.T._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.T (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.T (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.T (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Cow.T._elems.Array.Cow.S._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.T, i: int, y_owner: Cow, y: Array.Cow.S, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.S._state[y], u);                                                   
 requires Array.Cow.S._this[y] == y_owner;                                                          
 modifies Array.Cow.T._elems;                                                                       
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var y_pre: Array.Cow.S;                                                                            
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var w_mid: int;                                                                                    
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var x_mid: Array.Cow.T;                                                                            
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var y_mid: Array.Cow.S;                                                                            
 var y_owner_mid: Cow;                                                                              
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_owner_mid: Cow;                                                                              
 var j_mid: int;                                                                                    
 var Cow.b_mid: [Cow]Array.Cow.S;                                                                   
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var y_post: Array.Cow.S;                                                                           
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Cow.T._elems[x][i];                                                                  
 Array.Cow.T._elems[x][i] := v;                                                                     
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow.b_mid == Cow.b && Cow._lock_mid == Cow._lock && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Cow.T._elems[x][i] := tmpV;                                                                  
 Array.Cow.S._elems[y][j] := w;                                                                     
 _writeByTPost := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.S (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Cow.T._elems.Array.Cow.S._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.T, i: int, y_owner: Cow, y: Array.Cow.S, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.S._state[y], u);                                                   
 requires Array.Cow.S._this[y] == y_owner;                                                          
 modifies Array.Cow.T._elems;                                                                       
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var y_pre: Array.Cow.S;                                                                            
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var w_mid: int;                                                                                    
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var x_mid: Array.Cow.T;                                                                            
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var y_mid: Array.Cow.S;                                                                            
 var y_owner_mid: Cow;                                                                              
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_owner_mid: Cow;                                                                              
 var j_mid: int;                                                                                    
 var Cow.b_mid: [Cow]Array.Cow.S;                                                                   
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var y_post: Array.Cow.S;                                                                           
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Cow.T._elems[x][i];                                                                  
 Array.Cow.T._elems[x][i] := v;                                                                     
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow.b_mid == Cow.b && Cow._lock_mid == Cow._lock && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Cow.T._elems[x][i] := tmpV;                                                                  
 Array.Cow.S._elems[y][j] := w;                                                                     
 _writeByTPost := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.S (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.S (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Cow.T._elems.Array.Cow.S._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.T, i: int, y_owner: Cow, y: Array.Cow.S, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.S._state[y], u);                                                   
 requires Array.Cow.S._this[y] == y_owner;                                                          
 modifies Array.Cow.T._elems;                                                                       
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var y_pre: Array.Cow.S;                                                                            
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var y_post: Array.Cow.S;                                                                           
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.S._elems[y][j] := w;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.5): Array Array.Cow.T is not Read-Write Stable with respect to Array Array.Cow.S (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.5): Array Array.Cow.T is not Read-Write Stable with respect to Array Array.Cow.S (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (3.5): Array Array.Cow.T is not Read-Write Stable with respect to Array Array.Cow.S (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Cow.T._elems.Array.Cow.S._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.T, i: int, y_owner: Cow, y: Array.Cow.S, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.T._state[x], t);                                                   
 requires Array.Cow.T._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.S._state[y], u);                                                   
 requires Array.Cow.S._this[y] == y_owner;                                                          
 modifies Array.Cow.T._elems;                                                                       
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var y_pre: Array.Cow.S;                                                                            
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.T;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var y_post: Array.Cow.S;                                                                           
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
 var x_post: Array.Cow.T;                                                                           
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Cow.T(t: Tid,x_owner: Cow,x: Array.Cow.T,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.T._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Array Array.Cow.T (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Array Array.Cow.T (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Array Array.Cow.T (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Cow.S._elems.Cow.a(t: Tid, u: Tid, v: int, w: Array.Cow.T, w0: Array.Cow.T, x_owner: Cow, x: Array.Cow.S, i: int, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Array.Cow.S._elems;                                                                       
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var w0_pre: Array.Cow.T;                                                                           
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var i_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var w0_post: Array.Cow.T;                                                                          
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var w_post: Array.Cow.T;                                                                           
 var x_post: Array.Cow.S;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.S._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (5.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.S (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (5.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.S (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (5.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.S (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Cow.S._elems.Cow.a(t: Tid, u: Tid, v: int, w: Array.Cow.T, w0: Array.Cow.T, x_owner: Cow, x: Array.Cow.S, i: int, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Array.Cow.S._elems;                                                                       
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var w0_pre: Array.Cow.T;                                                                           
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var i_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var x_mid: Array.Cow.S;                                                                            
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var y_mid: Cow;                                                                                    
 var i_mid: int;                                                                                    
 var w_mid: Array.Cow.T;                                                                            
 var $recorded.state_mid: int;                                                                      
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var w0_mid: Array.Cow.T;                                                                           
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_owner_mid: Cow;                                                                              
 var Cow.b_mid: [Cow]Array.Cow.S;                                                                   
 var $pc_mid: Phase;                                                                                
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var w0_post: Array.Cow.T;                                                                          
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var w_post: Array.Cow.T;                                                                           
 var x_post: Array.Cow.S;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Cow.S._elems[x][i];                                                                  
 Array.Cow.S._elems[x][i] := v;                                                                     
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow.b_mid == Cow.b && Cow._lock_mid == Cow._lock && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Cow.S._elems[x][i] := tmpV;                                                                  
 Cow.a[y] := w;                                                                                     
 _writeByTPost := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Cow.a (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Cow.S._elems.Cow.a(t: Tid, u: Tid, v: int, w: Array.Cow.T, w0: Array.Cow.T, x_owner: Cow, x: Array.Cow.S, i: int, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Array.Cow.S._elems;                                                                       
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var w0_pre: Array.Cow.T;                                                                           
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var i_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var x_mid: Array.Cow.S;                                                                            
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var y_mid: Cow;                                                                                    
 var i_mid: int;                                                                                    
 var w_mid: Array.Cow.T;                                                                            
 var $recorded.state_mid: int;                                                                      
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var w0_mid: Array.Cow.T;                                                                           
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_owner_mid: Cow;                                                                              
 var Cow.b_mid: [Cow]Array.Cow.S;                                                                   
 var $pc_mid: Phase;                                                                                
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var w0_post: Array.Cow.T;                                                                          
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var w_post: Array.Cow.T;                                                                           
 var x_post: Array.Cow.S;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Cow.S._elems[x][i];                                                                  
 Array.Cow.S._elems[x][i] := v;                                                                     
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow.b_mid == Cow.b && Cow._lock_mid == Cow._lock && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Cow.S._elems[x][i] := tmpV;                                                                  
 Cow.a[y] := w;                                                                                     
 _writeByTPost := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Cow.a (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Cow.a (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Cow.S._elems.Cow.a(t: Tid, u: Tid, v: int, w: Array.Cow.T, w0: Array.Cow.T, x_owner: Cow, x: Array.Cow.S, i: int, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Array.Cow.S._elems;                                                                       
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var w0_pre: Array.Cow.T;                                                                           
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var i_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var w0_post: Array.Cow.T;                                                                          
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var w_post: Array.Cow.T;                                                                           
 var x_post: Array.Cow.S;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Cow.a(u: Tid,y: Cow,w: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow.a[y] := w;                                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Cow.a (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Cow.a (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Cow.a (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Cow.S._elems.Cow.a(t: Tid, u: Tid, v: int, w: Array.Cow.T, w0: Array.Cow.T, x_owner: Cow, x: Array.Cow.S, i: int, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Array.Cow.S._elems;                                                                       
 modifies Cow.a;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var w0_pre: Array.Cow.T;                                                                           
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var w_pre: Array.Cow.T;                                                                            
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var i_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var w0_post: Array.Cow.T;                                                                          
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var w_post: Array.Cow.T;                                                                           
 var x_post: Array.Cow.S;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Cow.a(u: Tid,y: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.S._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Cow.a(u: Tid,y: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (5.5): Cow.a is not Write-Read Stable with respect to Array Array.Cow.S (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (5.5): Cow.a is not Write-Read Stable with respect to Array Array.Cow.S (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (5.5): Cow.a is not Write-Read Stable with respect to Array Array.Cow.S (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Cow.S._elems.Cow.b(t: Tid, u: Tid, v: int, w: Array.Cow.S, w0: Array.Cow.S, x_owner: Cow, x: Array.Cow.S, i: int, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Array.Cow.S._elems;                                                                       
 modifies Cow.b;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var w_pre: Array.Cow.S;                                                                            
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var w0_pre: Array.Cow.S;                                                                           
 var i_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w_post: Array.Cow.S;                                                                           
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var w0_post: Array.Cow.S;                                                                          
 var x_post: Array.Cow.S;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow.b(u: Tid,y: Cow,w: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.S._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Cow.b(u: Tid,y: Cow,w: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (6.5): Cow.b is not Write-Write Stable with respect to Array Array.Cow.S (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (6.5): Cow.b is not Write-Write Stable with respect to Array Array.Cow.S (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (6.5): Cow.b is not Write-Write Stable with respect to Array Array.Cow.S (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Cow.S._elems.Cow.b(t: Tid, u: Tid, v: int, w: Array.Cow.S, w0: Array.Cow.S, x_owner: Cow, x: Array.Cow.S, i: int, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Array.Cow.S._elems;                                                                       
 modifies Cow.b;                                                                                    
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var w_pre: Array.Cow.S;                                                                            
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var w0_pre: Array.Cow.S;                                                                           
 var i_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var x_mid: Array.Cow.S;                                                                            
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var w0_mid: Array.Cow.S;                                                                           
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var y_mid: Cow;                                                                                    
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var w_mid: Array.Cow.S;                                                                            
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_owner_mid: Cow;                                                                              
 var Cow.b_mid: [Cow]Array.Cow.S;                                                                   
 var $pc_mid: Phase;                                                                                
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w_post: Array.Cow.S;                                                                           
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var w0_post: Array.Cow.S;                                                                          
 var x_post: Array.Cow.S;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Cow.S._elems[x][i];                                                                  
 Array.Cow.S._elems[x][i] := v;                                                                     
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow.b_mid == Cow.b && Cow._lock_mid == Cow._lock && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Cow.b(u: Tid,y: Cow,w: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Cow.S._elems[x][i] := tmpV;                                                                  
 Cow.b[y] := w;                                                                                     
 _writeByTPost := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Cow.b (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Cow.S._elems.Cow.b(t: Tid, u: Tid, v: int, w: Array.Cow.S, w0: Array.Cow.S, x_owner: Cow, x: Array.Cow.S, i: int, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Array.Cow.S._elems;                                                                       
 modifies Cow.b;                                                                                    
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var w_pre: Array.Cow.S;                                                                            
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var w0_pre: Array.Cow.S;                                                                           
 var i_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var x_mid: Array.Cow.S;                                                                            
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var w0_mid: Array.Cow.S;                                                                           
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var y_mid: Cow;                                                                                    
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var w_mid: Array.Cow.S;                                                                            
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_owner_mid: Cow;                                                                              
 var Cow.b_mid: [Cow]Array.Cow.S;                                                                   
 var $pc_mid: Phase;                                                                                
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w_post: Array.Cow.S;                                                                           
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var w0_post: Array.Cow.S;                                                                          
 var x_post: Array.Cow.S;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Cow.b(u: Tid,y: Cow,w: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Cow.S._elems[x][i];                                                                  
 Array.Cow.S._elems[x][i] := v;                                                                     
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow.b_mid == Cow.b && Cow._lock_mid == Cow._lock && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Cow.b(u: Tid,y: Cow,w: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Cow.S._elems[x][i] := tmpV;                                                                  
 Cow.b[y] := w;                                                                                     
 _writeByTPost := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Cow.b (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Cow.b (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Cow.S._elems.Cow.b(t: Tid, u: Tid, v: int, w: Array.Cow.S, w0: Array.Cow.S, x_owner: Cow, x: Array.Cow.S, i: int, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Array.Cow.S._elems;                                                                       
 modifies Cow.b;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var w_pre: Array.Cow.S;                                                                            
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var w0_pre: Array.Cow.S;                                                                           
 var i_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w_post: Array.Cow.S;                                                                           
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var w0_post: Array.Cow.S;                                                                          
 var x_post: Array.Cow.S;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Cow.b(u: Tid,y: Cow,w: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Cow.b[y] := w;                                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Cow.b (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Cow.b (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Cow.b (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Cow.S._elems.Cow.b(t: Tid, u: Tid, v: int, w: Array.Cow.S, w0: Array.Cow.S, x_owner: Cow, x: Array.Cow.S, i: int, y: Cow)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Cow._state[y], u);                                                           
 modifies Array.Cow.S._elems;                                                                       
 modifies Cow.b;                                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var w_pre: Array.Cow.S;                                                                            
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var w0_pre: Array.Cow.S;                                                                           
 var i_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var y_pre: Cow;                                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var y_post: Cow;                                                                                   
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w_post: Array.Cow.S;                                                                           
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var Cow._state_post: [Cow]State;                                                                   
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var w0_post: Array.Cow.S;                                                                          
 var x_post: Array.Cow.S;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Cow.b(u: Tid,y: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.S._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Cow.b(u: Tid,y: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Cow.b is not Write-Read Stable with respect to Array Array.Cow.S (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Cow.b is not Write-Read Stable with respect to Array Array.Cow.S (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (6.5): Cow.b is not Write-Read Stable with respect to Array Array.Cow.S (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Cow.S._elems.Array.Cow.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.S, i: int, y_owner: Cow, y: Array.Cow.T, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.T._state[y], u);                                                   
 requires Array.Cow.T._this[y] == y_owner;                                                          
 modifies Array.Cow.S._elems;                                                                       
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
 var y_pre: Array.Cow.T;                                                                            
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var y_post: Array.Cow.T;                                                                           
 var x_post: Array.Cow.S;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.S._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.S (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.S (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.S (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Cow.S._elems.Array.Cow.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.S, i: int, y_owner: Cow, y: Array.Cow.T, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.T._state[y], u);                                                   
 requires Array.Cow.T._this[y] == y_owner;                                                          
 modifies Array.Cow.S._elems;                                                                       
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
 var y_pre: Array.Cow.T;                                                                            
                                                                                                    
 var x_mid: Array.Cow.S;                                                                            
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var w_mid: int;                                                                                    
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var y_mid: Array.Cow.T;                                                                            
 var y_owner_mid: Cow;                                                                              
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_owner_mid: Cow;                                                                              
 var j_mid: int;                                                                                    
 var Cow.b_mid: [Cow]Array.Cow.S;                                                                   
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var y_post: Array.Cow.T;                                                                           
 var x_post: Array.Cow.S;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Cow.S._elems[x][i];                                                                  
 Array.Cow.S._elems[x][i] := v;                                                                     
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow.b_mid == Cow.b && Cow._lock_mid == Cow._lock && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Cow.S._elems[x][i] := tmpV;                                                                  
 Array.Cow.T._elems[y][j] := w;                                                                     
 _writeByTPost := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.T (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Cow.S._elems.Array.Cow.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.S, i: int, y_owner: Cow, y: Array.Cow.T, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.T._state[y], u);                                                   
 requires Array.Cow.T._this[y] == y_owner;                                                          
 modifies Array.Cow.S._elems;                                                                       
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
 var y_pre: Array.Cow.T;                                                                            
                                                                                                    
 var x_mid: Array.Cow.S;                                                                            
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var w_mid: int;                                                                                    
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var y_mid: Array.Cow.T;                                                                            
 var y_owner_mid: Cow;                                                                              
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_owner_mid: Cow;                                                                              
 var j_mid: int;                                                                                    
 var Cow.b_mid: [Cow]Array.Cow.S;                                                                   
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var y_post: Array.Cow.T;                                                                           
 var x_post: Array.Cow.S;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Cow.S._elems[x][i];                                                                  
 Array.Cow.S._elems[x][i] := v;                                                                     
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow.b_mid == Cow.b && Cow._lock_mid == Cow._lock && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Cow.S._elems[x][i] := tmpV;                                                                  
 Array.Cow.T._elems[y][j] := w;                                                                     
 _writeByTPost := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.T (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.T (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Cow.S._elems.Array.Cow.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.S, i: int, y_owner: Cow, y: Array.Cow.T, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.T._state[y], u);                                                   
 requires Array.Cow.T._this[y] == y_owner;                                                          
 modifies Array.Cow.S._elems;                                                                       
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
 var y_pre: Array.Cow.T;                                                                            
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var y_post: Array.Cow.T;                                                                           
 var x_post: Array.Cow.S;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.T._elems[y][j] := w;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Array Array.Cow.T (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Array Array.Cow.T (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Array Array.Cow.T (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Cow.S._elems.Array.Cow.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.S, i: int, y_owner: Cow, y: Array.Cow.T, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.T._state[y], u);                                                   
 requires Array.Cow.T._this[y] == y_owner;                                                          
 modifies Array.Cow.S._elems;                                                                       
 modifies Array.Cow.T._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
 var y_pre: Array.Cow.T;                                                                            
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var y_post: Array.Cow.T;                                                                           
 var x_post: Array.Cow.S;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.S._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Cow.T(u: Tid,y_owner: Cow,y: Array.Cow.T,j: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (3.5): Array Array.Cow.T is not Write-Read Stable with respect to Array Array.Cow.S (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (3.5): Array Array.Cow.T is not Write-Read Stable with respect to Array Array.Cow.S (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (3.5): Array Array.Cow.T is not Write-Read Stable with respect to Array Array.Cow.S (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Cow.S._elems.Array.Cow.S._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.S, i: int, y_owner: Cow, y: Array.Cow.S, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.S._state[y], u);                                                   
 requires Array.Cow.S._this[y] == y_owner;                                                          
 modifies Array.Cow.S._elems;                                                                       
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var y_pre: Array.Cow.S;                                                                            
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var y_post: Array.Cow.S;                                                                           
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var x_post: Array.Cow.S;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.S._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.S (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.S (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.S (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Cow.S._elems.Array.Cow.S._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.S, i: int, y_owner: Cow, y: Array.Cow.S, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.S._state[y], u);                                                   
 requires Array.Cow.S._this[y] == y_owner;                                                          
 modifies Array.Cow.S._elems;                                                                       
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var y_pre: Array.Cow.S;                                                                            
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var x_mid: Array.Cow.S;                                                                            
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var w_mid: int;                                                                                    
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var y_mid: Array.Cow.S;                                                                            
 var y_owner_mid: Cow;                                                                              
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_owner_mid: Cow;                                                                              
 var j_mid: int;                                                                                    
 var Cow.b_mid: [Cow]Array.Cow.S;                                                                   
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var y_post: Array.Cow.S;                                                                           
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var x_post: Array.Cow.S;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Cow.S._elems[x][i];                                                                  
 Array.Cow.S._elems[x][i] := v;                                                                     
                                                                                                    
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow.b_mid == Cow.b && Cow._lock_mid == Cow._lock && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Cow.S._elems[x][i] := tmpV;                                                                  
 Array.Cow.S._elems[y][j] := w;                                                                     
 _writeByTPost := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.S (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Cow.S._elems.Array.Cow.S._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.S, i: int, y_owner: Cow, y: Array.Cow.S, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.S._state[y], u);                                                   
 requires Array.Cow.S._this[y] == y_owner;                                                          
 modifies Array.Cow.S._elems;                                                                       
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var y_pre: Array.Cow.S;                                                                            
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var x_mid: Array.Cow.S;                                                                            
 var Array.Cow.S._length_mid: [Array.Cow.S]int;                                                     
 var Array.Cow.T._state_mid: [Array.Cow.T]State;                                                    
 var t_mid: Tid;                                                                                    
 var Array.Cow.S._state_mid: [Array.Cow.S]State;                                                    
 var u_mid: Tid;                                                                                    
 var Array.Cow.T._elems_mid: [Array.Cow.T]([int]int);                                               
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Cow.a_mid: [Cow]Array.Cow.T;                                                                   
 var w_mid: int;                                                                                    
 var Array.Cow.T._length_mid: [Array.Cow.T]int;                                                     
 var Array.Cow.S._elems_mid: [Array.Cow.S]([int]int);                                               
 var Cow._lock_mid: [Cow]Tid;                                                                       
 var y_mid: Array.Cow.S;                                                                            
 var y_owner_mid: Cow;                                                                              
 var Cow._state_mid: [Cow]State;                                                                    
 var v_mid: int;                                                                                    
 var x_owner_mid: Cow;                                                                              
 var j_mid: int;                                                                                    
 var Cow.b_mid: [Cow]Array.Cow.S;                                                                   
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var y_post: Array.Cow.S;                                                                           
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var x_post: Array.Cow.S;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Cow.S._elems[x][i];                                                                  
 Array.Cow.S._elems[x][i] := v;                                                                     
 assume Cow._state_mid == Cow._state && Cow.a_mid == Cow.a && Cow.b_mid == Cow.b && Cow._lock_mid == Cow._lock && Array.Cow.T._state_mid == Array.Cow.T._state && Array.Cow.T._elems_mid == Array.Cow.T._elems && Array.Cow.T._length_mid == Array.Cow.T._length && Array.Cow.S._state_mid == Array.Cow.S._state && Array.Cow.S._elems_mid == Array.Cow.S._elems && Array.Cow.S._length_mid == Array.Cow.S._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Cow.S._elems[x][i] := tmpV;                                                                  
 Array.Cow.S._elems[y][j] := w;                                                                     
 _writeByTPost := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.S (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.S (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Cow.S._elems.Array.Cow.S._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.S, i: int, y_owner: Cow, y: Array.Cow.S, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.S._state[y], u);                                                   
 requires Array.Cow.S._this[y] == y_owner;                                                          
 modifies Array.Cow.S._elems;                                                                       
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var y_pre: Array.Cow.S;                                                                            
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var y_post: Array.Cow.S;                                                                           
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var x_post: Array.Cow.S;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,w: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.S._elems[y][j] := w;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Array Array.Cow.S (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Array Array.Cow.S (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Array Array.Cow.S (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Cow.S._elems.Array.Cow.S._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Cow, x: Array.Cow.S, i: int, y_owner: Cow, y: Array.Cow.S, j: int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Cow.S._state[x], t);                                                   
 requires Array.Cow.S._this[x] == x_owner;                                                          
 requires isAccessible(Array.Cow.S._state[y], u);                                                   
 requires Array.Cow.S._this[y] == y_owner;                                                          
 modifies Array.Cow.S._elems;                                                                       
 modifies Array.Cow.S._elems;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                               
 var y_pre: Array.Cow.S;                                                                            
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                     
 var Cow._lock_pre: [Cow]Tid;                                                                       
 var Cow.b_pre: [Cow]Array.Cow.S;                                                                   
 var y_owner_pre: Cow;                                                                              
 var $recorded.state_pre: int;                                                                      
 var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                               
 var x_owner_pre: Cow;                                                                              
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Cow._state_pre: [Cow]State;                                                                    
 var x_pre: Array.Cow.S;                                                                            
 var Cow.a_pre: [Cow]Array.Cow.T;                                                                   
 var $pc_pre: Phase;                                                                                
 var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                     
 var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                    
 var t_pre: Tid;                                                                                    
 var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                    
                                                                                                    
 var Array.Cow.T._state_post: [Array.Cow.T]State;                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Cow.b_post: [Cow]Array.Cow.S;                                                                  
 var Cow.a_post: [Cow]Array.Cow.T;                                                                  
 var y_owner_post: Cow;                                                                             
 var Array.Cow.T._length_post: [Array.Cow.T]int;                                                    
 var Array.Cow.S._state_post: [Array.Cow.S]State;                                                   
 var $pc_post: Phase;                                                                               
 var j_post: int;                                                                                   
 var Cow._state_post: [Cow]State;                                                                   
 var y_post: Array.Cow.S;                                                                           
 var x_owner_post: Cow;                                                                             
 var Cow._lock_post: [Cow]Tid;                                                                      
 var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                              
 var w_post: int;                                                                                   
 var Array.Cow.S._length_post: [Array.Cow.S]int;                                                    
 var v_post: int;                                                                                   
 var x_post: Array.Cow.S;                                                                           
 var u_post: Tid;                                                                                   
 var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                              
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Cow.S(t: Tid,x_owner: Cow,x: Array.Cow.S,i: int,v: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Cow.S._elems[x][i] := v;                                                                     
 assume Cow._state_post == Cow._state && Cow.a_post == Cow.a && Cow.b_post == Cow.b && Cow._lock_post == Cow._lock && Array.Cow.T._state_post == Array.Cow.T._state && Array.Cow.T._elems_post == Array.Cow.T._elems && Array.Cow.T._length_post == Array.Cow.T._length && Array.Cow.S._state_post == Array.Cow.S._state && Array.Cow.S._elems_post == Array.Cow.S._elems && Array.Cow.S._length_post == Array.Cow.S._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Cow.S(u: Tid,y_owner: Cow,y: Array.Cow.S,j: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Array Array.Cow.S (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Array Array.Cow.S (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Array Array.Cow.S (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
procedure Yield(tid: Tid);                                                                          
requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
requires ValidTid(tid);                                                                             
modifies Cow._state;                                                                                
modifies Cow.a;                                                                                     
modifies Cow.b;                                                                                     
modifies Cow._lock;                                                                                 
modifies Array.Cow.T._state;                                                                        
modifies Array.Cow.T._elems;                                                                        
modifies Array.Cow.S._state;                                                                        
modifies Array.Cow.S._elems;                                                                        
ensures StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
ensures Y(tid , old(Cow._state), old(Cow.a), old(Cow.b), old(Cow._lock), old(Array.Cow.T._state), old(Array.Cow.T._elems), old(Array.Cow.T._length), old(Array.Cow.S._state), old(Array.Cow.S._elems), old(Array.Cow.S._length) , Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
                                                                                                    
// Cow.a:                                                                                           
                                                                                                    
function {:inline} Y_Cow.a(tid : Tid, this: Cow, newValue: Array.Cow.T , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow.b: [Cow]Array.Cow.S, Cow._lock: [Cow]Tid, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int): bool
{                                                                                                   
 ((isAccessible(Cow._state[this], tid) && leq(m#moverPath(ReadEval.Cow.a(tid: Tid,this: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length)), _R)) ==> (Cow.a[this] == newValue))
                                                                                                    
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_Cow.a(tid : Tid, this: Cow, newValue: Array.Cow.T , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow.b: [Cow]Array.Cow.S, Cow._lock: [Cow]Tid, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int): bool
{                                                                                                   
 true                                                                                               
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_Cow.a.Subsumes.W(tid : Tid, u : Tid, this: Cow, newValue: Array.Cow.T , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow.b: [Cow]Array.Cow.S, Cow._lock: [Cow]Tid, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Array.Cow.S._state_yield: [Array.Cow.S]State;                                                   
var Cow.a_yield: [Cow]Array.Cow.T;                                                                  
var Cow.b_yield: [Cow]Array.Cow.S;                                                                  
var Cow._lock_yield: [Cow]Tid;                                                                      
var tid_yield: Tid;                                                                                 
var this_yield: Cow;                                                                                
var $pc_yield: Phase;                                                                               
var u_yield: Tid;                                                                                   
var Cow._state_yield: [Cow]State;                                                                   
var Array.Cow.T._elems_yield: [Array.Cow.T]([int]int);                                              
var Array.Cow.T._length_yield: [Array.Cow.T]int;                                                    
var Array.Cow.T._state_yield: [Array.Cow.T]State;                                                   
var Array.Cow.S._elems_yield: [Array.Cow.S]([int]int);                                              
var newValue_yield: Array.Cow.T;                                                                    
var $recorded.state_yield: int;                                                                     
var Array.Cow.S._length_yield: [Array.Cow.S]int;                                                    
                                                                                                    
 assume isAccessible(Cow._state[this], tid);                                                        
 assume isAccessible(Cow._state[this], u);                                                          
 assume !isError(m#moverPath(WriteEval.Cow.a(u: Tid,this: Cow,newValue: Array.Cow.T,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length)));
                                                                                                    
assume Cow._state_yield == Cow._state && Cow.a_yield == Cow.a && Cow.b_yield == Cow.b && Cow._lock_yield == Cow._lock && Array.Cow.T._state_yield == Array.Cow.T._state && Array.Cow.T._elems_yield == Array.Cow.T._elems && Array.Cow.T._length_yield == Array.Cow.T._length && Array.Cow.S._state_yield == Array.Cow.S._state && Array.Cow.S._elems_yield == Array.Cow.S._elems && Array.Cow.S._length_yield == Array.Cow.S._length && u_yield == u && newValue_yield == newValue && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Cow.a(tid, this, newValue , Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
}                                                                                                   
                                                                                                    
procedure Y_Cow.a.Reflexive(tid : Tid, this: Cow , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow.b: [Cow]Array.Cow.S, Cow._lock: [Cow]Tid, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Array.Cow.S._state_yield: [Array.Cow.S]State;                                                   
var Cow.a_yield: [Cow]Array.Cow.T;                                                                  
var Cow.b_yield: [Cow]Array.Cow.S;                                                                  
var Cow._lock_yield: [Cow]Tid;                                                                      
var tid_yield: Tid;                                                                                 
var this_yield: Cow;                                                                                
var $pc_yield: Phase;                                                                               
var Cow._state_yield: [Cow]State;                                                                   
var Array.Cow.T._elems_yield: [Array.Cow.T]([int]int);                                              
var Array.Cow.T._length_yield: [Array.Cow.T]int;                                                    
var Array.Cow.T._state_yield: [Array.Cow.T]State;                                                   
var Array.Cow.S._elems_yield: [Array.Cow.S]([int]int);                                              
var $recorded.state_yield: int;                                                                     
var Array.Cow.S._length_yield: [Array.Cow.S]int;                                                    
                                                                                                    
 assume isAccessible(Cow._state[this], tid);                                                        
assume Cow._state_yield == Cow._state && Cow.a_yield == Cow.a && Cow.b_yield == Cow.b && Cow._lock_yield == Cow._lock && Array.Cow.T._state_yield == Array.Cow.T._state && Array.Cow.T._elems_yield == Array.Cow.T._elems && Array.Cow.T._length_yield == Array.Cow.T._length && Array.Cow.S._state_yield == Array.Cow.S._state && Array.Cow.S._elems_yield == Array.Cow.S._elems && Array.Cow.S._length_yield == Array.Cow.S._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Cow.a(tid, this, Cow.a[this] , Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
}                                                                                                   
                                                                                                    
procedure Y_Cow.a.Transitive(tid : Tid, this: Cow, newValue : Array.Cow.T , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow.b: [Cow]Array.Cow.S, Cow._lock: [Cow]Tid, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int , Cow._state_p: [Cow]State, Cow.a_p: [Cow]Array.Cow.T, Cow.b_p: [Cow]Array.Cow.S, Cow._lock_p: [Cow]Tid, Array.Cow.T._state_p: [Array.Cow.T]State, Array.Cow.T._elems_p: [Array.Cow.T]([int]int), Array.Cow.T._length_p: [Array.Cow.T]int, Array.Cow.S._state_p: [Array.Cow.S]State, Array.Cow.S._elems_p: [Array.Cow.S]([int]int), Array.Cow.S._length_p: [Array.Cow.S]int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires StateInvariant(Cow._state_p, Cow.a_p, Cow.b_p, Cow._lock_p, Array.Cow.T._state_p, Array.Cow.T._elems_p, Array.Cow.T._length_p, Array.Cow.S._state_p, Array.Cow.S._elems_p, Array.Cow.S._length_p);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                                
var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                      
var Cow._lock_pre: [Cow]Tid;                                                                        
var Cow.b_pre: [Cow]Array.Cow.S;                                                                    
var $recorded.state_pre: int;                                                                       
var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                                
var Cow._state_pre: [Cow]State;                                                                     
var tid_pre: Tid;                                                                                   
var Cow.a_pre: [Cow]Array.Cow.T;                                                                    
var $pc_pre: Phase;                                                                                 
var this_pre: Cow;                                                                                  
var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                      
var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                     
var newValue_pre: Array.Cow.T;                                                                      
var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                     
                                                                                                    
var Array.Cow.T._state_post: [Array.Cow.T]State;                                                    
var $recorded.state_post: int;                                                                      
var Cow.b_post: [Cow]Array.Cow.S;                                                                   
var Cow.a_post: [Cow]Array.Cow.T;                                                                   
var Array.Cow.T._length_post: [Array.Cow.T]int;                                                     
var Array.Cow.S._state_post: [Array.Cow.S]State;                                                    
var $pc_post: Phase;                                                                                
var Cow._state_post: [Cow]State;                                                                    
var tid_post: Tid;                                                                                  
var Cow._lock_post: [Cow]Tid;                                                                       
var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                               
var Array.Cow.S._length_post: [Array.Cow.S]int;                                                     
var this_post: Cow;                                                                                 
var newValue_post: Array.Cow.T;                                                                     
var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                               
                                                                                                    
assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(Cow._state[this], tid);                                                        
 assume Y(tid , Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length , Cow._state_p, Cow.a_p, Cow.b_p, Cow._lock_p, Array.Cow.T._state_p, Array.Cow.T._elems_p, Array.Cow.T._length_p, Array.Cow.S._state_p, Array.Cow.S._elems_p, Array.Cow.S._length_p);
 assume Y_Cow.a(tid, this, newValue , Cow._state_p, Cow.a_p, Cow.b_p, Cow._lock_p, Array.Cow.T._state_p, Array.Cow.T._elems_p, Array.Cow.T._length_p, Array.Cow.S._state_p, Array.Cow.S._elems_p, Array.Cow.S._length_p);
assume Cow._state_post == Cow._state_p && Cow.a_post == Cow.a_p && Cow.b_post == Cow.b_p && Cow._lock_post == Cow._lock_p && Array.Cow.T._state_post == Array.Cow.T._state_p && Array.Cow.T._elems_post == Array.Cow.T._elems_p && Array.Cow.T._length_post == Array.Cow.T._length_p && Array.Cow.S._state_post == Array.Cow.S._state_p && Array.Cow.S._elems_post == Array.Cow.S._elems_p && Array.Cow.S._length_post == Array.Cow.S._length_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_Cow.a(tid, this, newValue , Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
}                                                                                                   
// Cow.b:                                                                                           
                                                                                                    
function {:inline} Y_Cow.b(tid : Tid, this: Cow, newValue: Array.Cow.S , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow.b: [Cow]Array.Cow.S, Cow._lock: [Cow]Tid, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int): bool
{                                                                                                   
 ((isAccessible(Cow._state[this], tid) && leq(m#moverPath(ReadEval.Cow.b(tid: Tid,this: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length)), _R)) ==> (Cow.b[this] == newValue))
                                                                                                    
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_Cow.b(tid : Tid, this: Cow, newValue: Array.Cow.S , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow.b: [Cow]Array.Cow.S, Cow._lock: [Cow]Tid, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int): bool
{                                                                                                   
 true                                                                                               
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_Cow.b.Subsumes.W(tid : Tid, u : Tid, this: Cow, newValue: Array.Cow.S , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow.b: [Cow]Array.Cow.S, Cow._lock: [Cow]Tid, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Array.Cow.S._state_yield: [Array.Cow.S]State;                                                   
var Cow.a_yield: [Cow]Array.Cow.T;                                                                  
var Cow.b_yield: [Cow]Array.Cow.S;                                                                  
var Cow._lock_yield: [Cow]Tid;                                                                      
var tid_yield: Tid;                                                                                 
var this_yield: Cow;                                                                                
var $pc_yield: Phase;                                                                               
var u_yield: Tid;                                                                                   
var Cow._state_yield: [Cow]State;                                                                   
var Array.Cow.T._elems_yield: [Array.Cow.T]([int]int);                                              
var Array.Cow.T._length_yield: [Array.Cow.T]int;                                                    
var Array.Cow.T._state_yield: [Array.Cow.T]State;                                                   
var newValue_yield: Array.Cow.S;                                                                    
var Array.Cow.S._elems_yield: [Array.Cow.S]([int]int);                                              
var $recorded.state_yield: int;                                                                     
var Array.Cow.S._length_yield: [Array.Cow.S]int;                                                    
                                                                                                    
 assume isAccessible(Cow._state[this], tid);                                                        
 assume isAccessible(Cow._state[this], u);                                                          
 assume !isError(m#moverPath(WriteEval.Cow.b(u: Tid,this: Cow,newValue: Array.Cow.S,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length)));
                                                                                                    
assume Cow._state_yield == Cow._state && Cow.a_yield == Cow.a && Cow.b_yield == Cow.b && Cow._lock_yield == Cow._lock && Array.Cow.T._state_yield == Array.Cow.T._state && Array.Cow.T._elems_yield == Array.Cow.T._elems && Array.Cow.T._length_yield == Array.Cow.T._length && Array.Cow.S._state_yield == Array.Cow.S._state && Array.Cow.S._elems_yield == Array.Cow.S._elems && Array.Cow.S._length_yield == Array.Cow.S._length && u_yield == u && newValue_yield == newValue && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Cow.b(tid, this, newValue , Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
}                                                                                                   
                                                                                                    
procedure Y_Cow.b.Reflexive(tid : Tid, this: Cow , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow.b: [Cow]Array.Cow.S, Cow._lock: [Cow]Tid, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Array.Cow.S._state_yield: [Array.Cow.S]State;                                                   
var Cow.a_yield: [Cow]Array.Cow.T;                                                                  
var Cow.b_yield: [Cow]Array.Cow.S;                                                                  
var Cow._lock_yield: [Cow]Tid;                                                                      
var tid_yield: Tid;                                                                                 
var this_yield: Cow;                                                                                
var $pc_yield: Phase;                                                                               
var Cow._state_yield: [Cow]State;                                                                   
var Array.Cow.T._elems_yield: [Array.Cow.T]([int]int);                                              
var Array.Cow.T._length_yield: [Array.Cow.T]int;                                                    
var Array.Cow.T._state_yield: [Array.Cow.T]State;                                                   
var Array.Cow.S._elems_yield: [Array.Cow.S]([int]int);                                              
var $recorded.state_yield: int;                                                                     
var Array.Cow.S._length_yield: [Array.Cow.S]int;                                                    
                                                                                                    
 assume isAccessible(Cow._state[this], tid);                                                        
assume Cow._state_yield == Cow._state && Cow.a_yield == Cow.a && Cow.b_yield == Cow.b && Cow._lock_yield == Cow._lock && Array.Cow.T._state_yield == Array.Cow.T._state && Array.Cow.T._elems_yield == Array.Cow.T._elems && Array.Cow.T._length_yield == Array.Cow.T._length && Array.Cow.S._state_yield == Array.Cow.S._state && Array.Cow.S._elems_yield == Array.Cow.S._elems && Array.Cow.S._length_yield == Array.Cow.S._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Cow.b(tid, this, Cow.b[this] , Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
}                                                                                                   
                                                                                                    
procedure Y_Cow.b.Transitive(tid : Tid, this: Cow, newValue : Array.Cow.S , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow.b: [Cow]Array.Cow.S, Cow._lock: [Cow]Tid, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int , Cow._state_p: [Cow]State, Cow.a_p: [Cow]Array.Cow.T, Cow.b_p: [Cow]Array.Cow.S, Cow._lock_p: [Cow]Tid, Array.Cow.T._state_p: [Array.Cow.T]State, Array.Cow.T._elems_p: [Array.Cow.T]([int]int), Array.Cow.T._length_p: [Array.Cow.T]int, Array.Cow.S._state_p: [Array.Cow.S]State, Array.Cow.S._elems_p: [Array.Cow.S]([int]int), Array.Cow.S._length_p: [Array.Cow.S]int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires StateInvariant(Cow._state_p, Cow.a_p, Cow.b_p, Cow._lock_p, Array.Cow.T._state_p, Array.Cow.T._elems_p, Array.Cow.T._length_p, Array.Cow.S._state_p, Array.Cow.S._elems_p, Array.Cow.S._length_p);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                                
var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                      
var Cow._lock_pre: [Cow]Tid;                                                                        
var Cow.b_pre: [Cow]Array.Cow.S;                                                                    
var $recorded.state_pre: int;                                                                       
var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                                
var Cow._state_pre: [Cow]State;                                                                     
var tid_pre: Tid;                                                                                   
var newValue_pre: Array.Cow.S;                                                                      
var Cow.a_pre: [Cow]Array.Cow.T;                                                                    
var $pc_pre: Phase;                                                                                 
var this_pre: Cow;                                                                                  
var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                      
var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                     
var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                     
                                                                                                    
var newValue_post: Array.Cow.S;                                                                     
var Array.Cow.T._state_post: [Array.Cow.T]State;                                                    
var $recorded.state_post: int;                                                                      
var Cow.b_post: [Cow]Array.Cow.S;                                                                   
var Cow.a_post: [Cow]Array.Cow.T;                                                                   
var Array.Cow.T._length_post: [Array.Cow.T]int;                                                     
var Array.Cow.S._state_post: [Array.Cow.S]State;                                                    
var $pc_post: Phase;                                                                                
var Cow._state_post: [Cow]State;                                                                    
var tid_post: Tid;                                                                                  
var Cow._lock_post: [Cow]Tid;                                                                       
var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                               
var Array.Cow.S._length_post: [Array.Cow.S]int;                                                     
var this_post: Cow;                                                                                 
var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                               
                                                                                                    
assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(Cow._state[this], tid);                                                        
 assume Y(tid , Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length , Cow._state_p, Cow.a_p, Cow.b_p, Cow._lock_p, Array.Cow.T._state_p, Array.Cow.T._elems_p, Array.Cow.T._length_p, Array.Cow.S._state_p, Array.Cow.S._elems_p, Array.Cow.S._length_p);
 assume Y_Cow.b(tid, this, newValue , Cow._state_p, Cow.a_p, Cow.b_p, Cow._lock_p, Array.Cow.T._state_p, Array.Cow.T._elems_p, Array.Cow.T._length_p, Array.Cow.S._state_p, Array.Cow.S._elems_p, Array.Cow.S._length_p);
assume Cow._state_post == Cow._state_p && Cow.a_post == Cow.a_p && Cow.b_post == Cow.b_p && Cow._lock_post == Cow._lock_p && Array.Cow.T._state_post == Array.Cow.T._state_p && Array.Cow.T._elems_post == Array.Cow.T._elems_p && Array.Cow.T._length_post == Array.Cow.T._length_p && Array.Cow.S._state_post == Array.Cow.S._state_p && Array.Cow.S._elems_post == Array.Cow.S._elems_p && Array.Cow.S._length_post == Array.Cow.S._length_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_Cow.b(tid, this, newValue , Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
}                                                                                                   
// Cow._lock:                                                                                       
                                                                                                    
function {:inline} Y_Cow._lock(tid : Tid, this: Cow, newValue: Tid , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow.b: [Cow]Array.Cow.S, Cow._lock: [Cow]Tid, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int): bool
{                                                                                                   
 ((isAccessible(Cow._state[this], tid) && leq(m#moverPath(ReadEval.Cow._lock(tid: Tid,this: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length)), _R)) ==> (Cow._lock[this] == newValue))
 &&(((Cow._lock[this]==tid)==(newValue==tid)))                                                      
                                                                                                    
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_Cow._lock(tid : Tid, this: Cow, newValue: Tid , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow.b: [Cow]Array.Cow.S, Cow._lock: [Cow]Tid, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int): bool
{                                                                                                   
 true                                                                                               
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_Cow._lock.Subsumes.W(tid : Tid, u : Tid, this: Cow, newValue: Tid , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow.b: [Cow]Array.Cow.S, Cow._lock: [Cow]Tid, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Array.Cow.S._state_yield: [Array.Cow.S]State;                                                   
var newValue_yield: Tid;                                                                            
var Cow.a_yield: [Cow]Array.Cow.T;                                                                  
var Cow.b_yield: [Cow]Array.Cow.S;                                                                  
var Cow._lock_yield: [Cow]Tid;                                                                      
var tid_yield: Tid;                                                                                 
var this_yield: Cow;                                                                                
var $pc_yield: Phase;                                                                               
var u_yield: Tid;                                                                                   
var Cow._state_yield: [Cow]State;                                                                   
var Array.Cow.T._elems_yield: [Array.Cow.T]([int]int);                                              
var Array.Cow.T._length_yield: [Array.Cow.T]int;                                                    
var Array.Cow.T._state_yield: [Array.Cow.T]State;                                                   
var Array.Cow.S._elems_yield: [Array.Cow.S]([int]int);                                              
var $recorded.state_yield: int;                                                                     
var Array.Cow.S._length_yield: [Array.Cow.S]int;                                                    
                                                                                                    
 assume isAccessible(Cow._state[this], tid);                                                        
 assume isAccessible(Cow._state[this], u);                                                          
 assume !isError(m#moverPath(WriteEval.Cow._lock(u: Tid,this: Cow,newValue: Tid,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length)));
 assume leq(m#moverPath(ReadEval.Cow._lock(tid: Tid,this: Cow,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length)), _N);
assume Cow._state_yield == Cow._state && Cow.a_yield == Cow.a && Cow.b_yield == Cow.b && Cow._lock_yield == Cow._lock && Array.Cow.T._state_yield == Array.Cow.T._state && Array.Cow.T._elems_yield == Array.Cow.T._elems && Array.Cow.T._length_yield == Array.Cow.T._length && Array.Cow.S._state_yield == Array.Cow.S._state && Array.Cow.S._elems_yield == Array.Cow.S._elems && Array.Cow.S._length_yield == Array.Cow.S._length && u_yield == u && newValue_yield == newValue && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Cow._lock(tid, this, newValue , Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
}                                                                                                   
                                                                                                    
procedure Y_Cow._lock.Reflexive(tid : Tid, this: Cow , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow.b: [Cow]Array.Cow.S, Cow._lock: [Cow]Tid, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Array.Cow.S._state_yield: [Array.Cow.S]State;                                                   
var Cow.a_yield: [Cow]Array.Cow.T;                                                                  
var Cow.b_yield: [Cow]Array.Cow.S;                                                                  
var Cow._lock_yield: [Cow]Tid;                                                                      
var tid_yield: Tid;                                                                                 
var this_yield: Cow;                                                                                
var $pc_yield: Phase;                                                                               
var Cow._state_yield: [Cow]State;                                                                   
var Array.Cow.T._elems_yield: [Array.Cow.T]([int]int);                                              
var Array.Cow.T._length_yield: [Array.Cow.T]int;                                                    
var Array.Cow.T._state_yield: [Array.Cow.T]State;                                                   
var Array.Cow.S._elems_yield: [Array.Cow.S]([int]int);                                              
var $recorded.state_yield: int;                                                                     
var Array.Cow.S._length_yield: [Array.Cow.S]int;                                                    
                                                                                                    
 assume isAccessible(Cow._state[this], tid);                                                        
assume Cow._state_yield == Cow._state && Cow.a_yield == Cow.a && Cow.b_yield == Cow.b && Cow._lock_yield == Cow._lock && Array.Cow.T._state_yield == Array.Cow.T._state && Array.Cow.T._elems_yield == Array.Cow.T._elems && Array.Cow.T._length_yield == Array.Cow.T._length && Array.Cow.S._state_yield == Array.Cow.S._state && Array.Cow.S._elems_yield == Array.Cow.S._elems && Array.Cow.S._length_yield == Array.Cow.S._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Cow._lock(tid, this, Cow._lock[this] , Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
}                                                                                                   
                                                                                                    
procedure Y_Cow._lock.Transitive(tid : Tid, this: Cow, newValue : Tid , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow.b: [Cow]Array.Cow.S, Cow._lock: [Cow]Tid, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int , Cow._state_p: [Cow]State, Cow.a_p: [Cow]Array.Cow.T, Cow.b_p: [Cow]Array.Cow.S, Cow._lock_p: [Cow]Tid, Array.Cow.T._state_p: [Array.Cow.T]State, Array.Cow.T._elems_p: [Array.Cow.T]([int]int), Array.Cow.T._length_p: [Array.Cow.T]int, Array.Cow.S._state_p: [Array.Cow.S]State, Array.Cow.S._elems_p: [Array.Cow.S]([int]int), Array.Cow.S._length_p: [Array.Cow.S]int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires StateInvariant(Cow._state_p, Cow.a_p, Cow.b_p, Cow._lock_p, Array.Cow.T._state_p, Array.Cow.T._elems_p, Array.Cow.T._length_p, Array.Cow.S._state_p, Array.Cow.S._elems_p, Array.Cow.S._length_p);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                                
var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                      
var Cow._lock_pre: [Cow]Tid;                                                                        
var Cow.b_pre: [Cow]Array.Cow.S;                                                                    
var $recorded.state_pre: int;                                                                       
var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                                
var Cow._state_pre: [Cow]State;                                                                     
var tid_pre: Tid;                                                                                   
var Cow.a_pre: [Cow]Array.Cow.T;                                                                    
var $pc_pre: Phase;                                                                                 
var this_pre: Cow;                                                                                  
var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                      
var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                     
var newValue_pre: Tid;                                                                              
var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                     
                                                                                                    
var Array.Cow.T._state_post: [Array.Cow.T]State;                                                    
var $recorded.state_post: int;                                                                      
var Cow.b_post: [Cow]Array.Cow.S;                                                                   
var Cow.a_post: [Cow]Array.Cow.T;                                                                   
var Array.Cow.T._length_post: [Array.Cow.T]int;                                                     
var Array.Cow.S._state_post: [Array.Cow.S]State;                                                    
var $pc_post: Phase;                                                                                
var Cow._state_post: [Cow]State;                                                                    
var tid_post: Tid;                                                                                  
var Cow._lock_post: [Cow]Tid;                                                                       
var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                               
var Array.Cow.S._length_post: [Array.Cow.S]int;                                                     
var this_post: Cow;                                                                                 
var newValue_post: Tid;                                                                             
var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                               
                                                                                                    
assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(Cow._state[this], tid);                                                        
 assume Y(tid , Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length , Cow._state_p, Cow.a_p, Cow.b_p, Cow._lock_p, Array.Cow.T._state_p, Array.Cow.T._elems_p, Array.Cow.T._length_p, Array.Cow.S._state_p, Array.Cow.S._elems_p, Array.Cow.S._length_p);
 assume Y_Cow._lock(tid, this, newValue , Cow._state_p, Cow.a_p, Cow.b_p, Cow._lock_p, Array.Cow.T._state_p, Array.Cow.T._elems_p, Array.Cow.T._length_p, Array.Cow.S._state_p, Array.Cow.S._elems_p, Array.Cow.S._length_p);
assume Cow._state_post == Cow._state_p && Cow.a_post == Cow.a_p && Cow.b_post == Cow.b_p && Cow._lock_post == Cow._lock_p && Array.Cow.T._state_post == Array.Cow.T._state_p && Array.Cow.T._elems_post == Array.Cow.T._elems_p && Array.Cow.T._length_post == Array.Cow.T._length_p && Array.Cow.S._state_post == Array.Cow.S._state_p && Array.Cow.S._elems_post == Array.Cow.S._elems_p && Array.Cow.S._length_post == Array.Cow.S._length_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_Cow._lock(tid, this, newValue , Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
}                                                                                                   
// Array.Cow.T:                                                                                     
                                                                                                    
function {:inline} Y_Array.Cow.T(tid : Tid, athis: Array.Cow.T, index: int, newValue: int , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow.b: [Cow]Array.Cow.S, Cow._lock: [Cow]Tid, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int): bool
{                                                                                                   
(var this := Array.Cow.T._this[athis];                                                              
 ((isAccessible(Array.Cow.T._state[athis], tid) && leq(m#moverPath(ReadEval.Array.Cow.T(tid: Tid,Array.Cow.T._this[athis]: Cow,athis: Array.Cow.T,index: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length)), _R)) ==> (Array.Cow.T._elems[athis][index] == newValue))
                                                                                                    
)                                                                                                   
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_Array.Cow.T(tid : Tid, athis: Array.Cow.T, index: int, newValue: int , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow.b: [Cow]Array.Cow.S, Cow._lock: [Cow]Tid, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int): bool
{                                                                                                   
(var this := Array.Cow.T._this[athis];                                                              
true                                                                                                
                                                                                                    
)                                                                                                   
}                                                                                                   
                                                                                                    
procedure Y_Array.Cow.T.Subsumes.W(tid : Tid, u : Tid, this: Cow, athis: Array.Cow.T, index: int, newValue: int , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow.b: [Cow]Array.Cow.S, Cow._lock: [Cow]Tid, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
 requires this == Array.Cow.T._this[athis];                                                         
{                                                                                                   
var Array.Cow.S._state_yield: [Array.Cow.S]State;                                                   
var Cow.a_yield: [Cow]Array.Cow.T;                                                                  
var Cow.b_yield: [Cow]Array.Cow.S;                                                                  
var Cow._lock_yield: [Cow]Tid;                                                                      
var tid_yield: Tid;                                                                                 
var this_yield: Cow;                                                                                
var $pc_yield: Phase;                                                                               
var Cow._state_yield: [Cow]State;                                                                   
var Array.Cow.T._elems_yield: [Array.Cow.T]([int]int);                                              
var Array.Cow.T._length_yield: [Array.Cow.T]int;                                                    
var Array.Cow.T._state_yield: [Array.Cow.T]State;                                                   
var index_yield: int;                                                                               
var Array.Cow.S._elems_yield: [Array.Cow.S]([int]int);                                              
var athis_yield: Array.Cow.T;                                                                       
var $recorded.state_yield: int;                                                                     
var Array.Cow.S._length_yield: [Array.Cow.S]int;                                                    
                                                                                                    
 assume isAccessible(Array.Cow.T._state[athis], u);                                                 
 assume !isError(m#moverPath(WriteEval.Array.Cow.T(u: Tid,Array.Cow.T._this[athis]: Cow,athis: Array.Cow.T,index: int,newValue: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length)));
                                                                                                    
assume Cow._state_yield == Cow._state && Cow.a_yield == Cow.a && Cow.b_yield == Cow.b && Cow._lock_yield == Cow._lock && Array.Cow.T._state_yield == Array.Cow.T._state && Array.Cow.T._elems_yield == Array.Cow.T._elems && Array.Cow.T._length_yield == Array.Cow.T._length && Array.Cow.S._state_yield == Array.Cow.S._state && Array.Cow.S._elems_yield == Array.Cow.S._elems && Array.Cow.S._length_yield == Array.Cow.S._length && athis_yield == athis && index_yield == index && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Array.Cow.T(tid, athis, index, newValue , Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
}                                                                                                   
                                                                                                    
procedure Y_Array.Cow.T.Reflexive(tid : Tid, this: Cow, athis: Array.Cow.T, index: int , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow.b: [Cow]Array.Cow.S, Cow._lock: [Cow]Tid, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(tid);                                                                            
 requires this == Array.Cow.T._this[athis];                                                         
{                                                                                                   
var Array.Cow.S._state_yield: [Array.Cow.S]State;                                                   
var Cow.a_yield: [Cow]Array.Cow.T;                                                                  
var Cow.b_yield: [Cow]Array.Cow.S;                                                                  
var Cow._lock_yield: [Cow]Tid;                                                                      
var tid_yield: Tid;                                                                                 
var this_yield: Cow;                                                                                
var $pc_yield: Phase;                                                                               
var Cow._state_yield: [Cow]State;                                                                   
var Array.Cow.T._elems_yield: [Array.Cow.T]([int]int);                                              
var Array.Cow.T._length_yield: [Array.Cow.T]int;                                                    
var Array.Cow.T._state_yield: [Array.Cow.T]State;                                                   
var index_yield: int;                                                                               
var Array.Cow.S._elems_yield: [Array.Cow.S]([int]int);                                              
var athis_yield: Array.Cow.T;                                                                       
var $recorded.state_yield: int;                                                                     
var Array.Cow.S._length_yield: [Array.Cow.S]int;                                                    
                                                                                                    
 assume isAccessible(Array.Cow.T._state[athis], tid);                                               
assume Cow._state_yield == Cow._state && Cow.a_yield == Cow.a && Cow.b_yield == Cow.b && Cow._lock_yield == Cow._lock && Array.Cow.T._state_yield == Array.Cow.T._state && Array.Cow.T._elems_yield == Array.Cow.T._elems && Array.Cow.T._length_yield == Array.Cow.T._length && Array.Cow.S._state_yield == Array.Cow.S._state && Array.Cow.S._elems_yield == Array.Cow.S._elems && Array.Cow.S._length_yield == Array.Cow.S._length && athis_yield == athis && index_yield == index && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Array.Cow.T(tid, athis, index, Array.Cow.T._elems[athis][index] , Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
}                                                                                                   
                                                                                                    
procedure Y_Array.Cow.T.Transitive(tid : Tid, this: Cow, athis: Array.Cow.T, index: int, newValue : int , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow.b: [Cow]Array.Cow.S, Cow._lock: [Cow]Tid, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int , Cow._state_p: [Cow]State, Cow.a_p: [Cow]Array.Cow.T, Cow.b_p: [Cow]Array.Cow.S, Cow._lock_p: [Cow]Tid, Array.Cow.T._state_p: [Array.Cow.T]State, Array.Cow.T._elems_p: [Array.Cow.T]([int]int), Array.Cow.T._length_p: [Array.Cow.T]int, Array.Cow.S._state_p: [Array.Cow.S]State, Array.Cow.S._elems_p: [Array.Cow.S]([int]int), Array.Cow.S._length_p: [Array.Cow.S]int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires StateInvariant(Cow._state_p, Cow.a_p, Cow.b_p, Cow._lock_p, Array.Cow.T._state_p, Array.Cow.T._elems_p, Array.Cow.T._length_p, Array.Cow.S._state_p, Array.Cow.S._elems_p, Array.Cow.S._length_p);
                                                                                                    
 requires this == Array.Cow.T._this[athis];                                                         
 requires ValidTid(tid);                                                                            
{                                                                                                   
var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                                
var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                      
var athis_pre: Array.Cow.T;                                                                         
var Cow._lock_pre: [Cow]Tid;                                                                        
var Cow.b_pre: [Cow]Array.Cow.S;                                                                    
var $recorded.state_pre: int;                                                                       
var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                                
var index_pre: int;                                                                                 
var Cow._state_pre: [Cow]State;                                                                     
var tid_pre: Tid;                                                                                   
var Cow.a_pre: [Cow]Array.Cow.T;                                                                    
var $pc_pre: Phase;                                                                                 
var this_pre: Cow;                                                                                  
var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                      
var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                     
var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                     
                                                                                                    
var Array.Cow.T._state_post: [Array.Cow.T]State;                                                    
var $recorded.state_post: int;                                                                      
var Cow.b_post: [Cow]Array.Cow.S;                                                                   
var Cow.a_post: [Cow]Array.Cow.T;                                                                   
var Array.Cow.T._length_post: [Array.Cow.T]int;                                                     
var Array.Cow.S._state_post: [Array.Cow.S]State;                                                    
var $pc_post: Phase;                                                                                
var Cow._state_post: [Cow]State;                                                                    
var athis_post: Array.Cow.T;                                                                        
var tid_post: Tid;                                                                                  
var Cow._lock_post: [Cow]Tid;                                                                       
var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                               
var Array.Cow.S._length_post: [Array.Cow.S]int;                                                     
var index_post: int;                                                                                
var this_post: Cow;                                                                                 
var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                               
                                                                                                    
assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && athis_pre == athis && index_pre == index && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
assume Cow._state_post == Cow._state_p && Cow.a_post == Cow.a_p && Cow.b_post == Cow.b_p && Cow._lock_post == Cow._lock_p && Array.Cow.T._state_post == Array.Cow.T._state_p && Array.Cow.T._elems_post == Array.Cow.T._elems_p && Array.Cow.T._length_post == Array.Cow.T._length_p && Array.Cow.S._state_post == Array.Cow.S._state_p && Array.Cow.S._elems_post == Array.Cow.S._elems_p && Array.Cow.S._length_post == Array.Cow.S._length_p && athis_post == athis && index_post == index && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assume isAccessible(Array.Cow.T._state[athis], tid);                                               
 assume Y(tid , Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length , Cow._state_p, Cow.a_p, Cow.b_p, Cow._lock_p, Array.Cow.T._state_p, Array.Cow.T._elems_p, Array.Cow.T._length_p, Array.Cow.S._state_p, Array.Cow.S._elems_p, Array.Cow.S._length_p);
 assume Y_Array.Cow.T(tid, athis, index, newValue , Cow._state_p, Cow.a_p, Cow.b_p, Cow._lock_p, Array.Cow.T._state_p, Array.Cow.T._elems_p, Array.Cow.T._length_p, Array.Cow.S._state_p, Array.Cow.S._elems_p, Array.Cow.S._length_p);
 assert Y_Array.Cow.T(tid, athis, index, newValue , Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
}                                                                                                   
// Array.Cow.S:                                                                                     
                                                                                                    
function {:inline} Y_Array.Cow.S(tid : Tid, athis: Array.Cow.S, index: int, newValue: int , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow.b: [Cow]Array.Cow.S, Cow._lock: [Cow]Tid, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int): bool
{                                                                                                   
(var this := Array.Cow.S._this[athis];                                                              
 ((isAccessible(Array.Cow.S._state[athis], tid) && leq(m#moverPath(ReadEval.Array.Cow.S(tid: Tid,Array.Cow.S._this[athis]: Cow,athis: Array.Cow.S,index: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length)), _R)) ==> (Array.Cow.S._elems[athis][index] == newValue))
                                                                                                    
)                                                                                                   
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_Array.Cow.S(tid : Tid, athis: Array.Cow.S, index: int, newValue: int , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow.b: [Cow]Array.Cow.S, Cow._lock: [Cow]Tid, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int): bool
{                                                                                                   
(var this := Array.Cow.S._this[athis];                                                              
true                                                                                                
                                                                                                    
)                                                                                                   
}                                                                                                   
                                                                                                    
procedure Y_Array.Cow.S.Subsumes.W(tid : Tid, u : Tid, this: Cow, athis: Array.Cow.S, index: int, newValue: int , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow.b: [Cow]Array.Cow.S, Cow._lock: [Cow]Tid, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
 requires this == Array.Cow.S._this[athis];                                                         
{                                                                                                   
var Array.Cow.S._state_yield: [Array.Cow.S]State;                                                   
var Cow.a_yield: [Cow]Array.Cow.T;                                                                  
var Cow.b_yield: [Cow]Array.Cow.S;                                                                  
var Cow._lock_yield: [Cow]Tid;                                                                      
var tid_yield: Tid;                                                                                 
var this_yield: Cow;                                                                                
var $pc_yield: Phase;                                                                               
var athis_yield: Array.Cow.S;                                                                       
var Cow._state_yield: [Cow]State;                                                                   
var Array.Cow.T._elems_yield: [Array.Cow.T]([int]int);                                              
var Array.Cow.T._length_yield: [Array.Cow.T]int;                                                    
var Array.Cow.T._state_yield: [Array.Cow.T]State;                                                   
var index_yield: int;                                                                               
var Array.Cow.S._elems_yield: [Array.Cow.S]([int]int);                                              
var $recorded.state_yield: int;                                                                     
var Array.Cow.S._length_yield: [Array.Cow.S]int;                                                    
                                                                                                    
 assume isAccessible(Array.Cow.S._state[athis], u);                                                 
 assume !isError(m#moverPath(WriteEval.Array.Cow.S(u: Tid,Array.Cow.S._this[athis]: Cow,athis: Array.Cow.S,index: int,newValue: int,Cow._state,Cow.a,Cow.b,Cow._lock,Array.Cow.T._state,Array.Cow.T._elems,Array.Cow.T._length,Array.Cow.S._state,Array.Cow.S._elems,Array.Cow.S._length)));
                                                                                                    
assume Cow._state_yield == Cow._state && Cow.a_yield == Cow.a && Cow.b_yield == Cow.b && Cow._lock_yield == Cow._lock && Array.Cow.T._state_yield == Array.Cow.T._state && Array.Cow.T._elems_yield == Array.Cow.T._elems && Array.Cow.T._length_yield == Array.Cow.T._length && Array.Cow.S._state_yield == Array.Cow.S._state && Array.Cow.S._elems_yield == Array.Cow.S._elems && Array.Cow.S._length_yield == Array.Cow.S._length && athis_yield == athis && index_yield == index && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Array.Cow.S(tid, athis, index, newValue , Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
}                                                                                                   
                                                                                                    
procedure Y_Array.Cow.S.Reflexive(tid : Tid, this: Cow, athis: Array.Cow.S, index: int , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow.b: [Cow]Array.Cow.S, Cow._lock: [Cow]Tid, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires ValidTid(tid);                                                                            
 requires this == Array.Cow.S._this[athis];                                                         
{                                                                                                   
var Array.Cow.S._state_yield: [Array.Cow.S]State;                                                   
var Cow.a_yield: [Cow]Array.Cow.T;                                                                  
var Cow.b_yield: [Cow]Array.Cow.S;                                                                  
var Cow._lock_yield: [Cow]Tid;                                                                      
var tid_yield: Tid;                                                                                 
var this_yield: Cow;                                                                                
var $pc_yield: Phase;                                                                               
var athis_yield: Array.Cow.S;                                                                       
var Cow._state_yield: [Cow]State;                                                                   
var Array.Cow.T._elems_yield: [Array.Cow.T]([int]int);                                              
var Array.Cow.T._length_yield: [Array.Cow.T]int;                                                    
var Array.Cow.T._state_yield: [Array.Cow.T]State;                                                   
var index_yield: int;                                                                               
var Array.Cow.S._elems_yield: [Array.Cow.S]([int]int);                                              
var $recorded.state_yield: int;                                                                     
var Array.Cow.S._length_yield: [Array.Cow.S]int;                                                    
                                                                                                    
 assume isAccessible(Array.Cow.S._state[athis], tid);                                               
assume Cow._state_yield == Cow._state && Cow.a_yield == Cow.a && Cow.b_yield == Cow.b && Cow._lock_yield == Cow._lock && Array.Cow.T._state_yield == Array.Cow.T._state && Array.Cow.T._elems_yield == Array.Cow.T._elems && Array.Cow.T._length_yield == Array.Cow.T._length && Array.Cow.S._state_yield == Array.Cow.S._state && Array.Cow.S._elems_yield == Array.Cow.S._elems && Array.Cow.S._length_yield == Array.Cow.S._length && athis_yield == athis && index_yield == index && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Array.Cow.S(tid, athis, index, Array.Cow.S._elems[athis][index] , Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
}                                                                                                   
                                                                                                    
procedure Y_Array.Cow.S.Transitive(tid : Tid, this: Cow, athis: Array.Cow.S, index: int, newValue : int , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow.b: [Cow]Array.Cow.S, Cow._lock: [Cow]Tid, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int , Cow._state_p: [Cow]State, Cow.a_p: [Cow]Array.Cow.T, Cow.b_p: [Cow]Array.Cow.S, Cow._lock_p: [Cow]Tid, Array.Cow.T._state_p: [Array.Cow.T]State, Array.Cow.T._elems_p: [Array.Cow.T]([int]int), Array.Cow.T._length_p: [Array.Cow.T]int, Array.Cow.S._state_p: [Array.Cow.S]State, Array.Cow.S._elems_p: [Array.Cow.S]([int]int), Array.Cow.S._length_p: [Array.Cow.S]int)
 requires StateInvariant(Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
 requires StateInvariant(Cow._state_p, Cow.a_p, Cow.b_p, Cow._lock_p, Array.Cow.T._state_p, Array.Cow.T._elems_p, Array.Cow.T._length_p, Array.Cow.S._state_p, Array.Cow.S._elems_p, Array.Cow.S._length_p);
                                                                                                    
 requires this == Array.Cow.S._this[athis];                                                         
 requires ValidTid(tid);                                                                            
{                                                                                                   
var Array.Cow.T._elems_pre: [Array.Cow.T]([int]int);                                                
var Array.Cow.S._length_pre: [Array.Cow.S]int;                                                      
var Cow._lock_pre: [Cow]Tid;                                                                        
var Cow.b_pre: [Cow]Array.Cow.S;                                                                    
var $recorded.state_pre: int;                                                                       
var Array.Cow.S._elems_pre: [Array.Cow.S]([int]int);                                                
var index_pre: int;                                                                                 
var Cow._state_pre: [Cow]State;                                                                     
var athis_pre: Array.Cow.S;                                                                         
var tid_pre: Tid;                                                                                   
var Cow.a_pre: [Cow]Array.Cow.T;                                                                    
var $pc_pre: Phase;                                                                                 
var this_pre: Cow;                                                                                  
var Array.Cow.T._length_pre: [Array.Cow.T]int;                                                      
var Array.Cow.S._state_pre: [Array.Cow.S]State;                                                     
var Array.Cow.T._state_pre: [Array.Cow.T]State;                                                     
                                                                                                    
var Array.Cow.T._state_post: [Array.Cow.T]State;                                                    
var athis_post: Array.Cow.S;                                                                        
var $recorded.state_post: int;                                                                      
var Cow.b_post: [Cow]Array.Cow.S;                                                                   
var Cow.a_post: [Cow]Array.Cow.T;                                                                   
var Array.Cow.T._length_post: [Array.Cow.T]int;                                                     
var Array.Cow.S._state_post: [Array.Cow.S]State;                                                    
var $pc_post: Phase;                                                                                
var Cow._state_post: [Cow]State;                                                                    
var tid_post: Tid;                                                                                  
var Cow._lock_post: [Cow]Tid;                                                                       
var Array.Cow.S._elems_post: [Array.Cow.S]([int]int);                                               
var Array.Cow.S._length_post: [Array.Cow.S]int;                                                     
var index_post: int;                                                                                
var this_post: Cow;                                                                                 
var Array.Cow.T._elems_post: [Array.Cow.T]([int]int);                                               
                                                                                                    
assume Cow._state_pre == Cow._state && Cow.a_pre == Cow.a && Cow.b_pre == Cow.b && Cow._lock_pre == Cow._lock && Array.Cow.T._state_pre == Array.Cow.T._state && Array.Cow.T._elems_pre == Array.Cow.T._elems && Array.Cow.T._length_pre == Array.Cow.T._length && Array.Cow.S._state_pre == Array.Cow.S._state && Array.Cow.S._elems_pre == Array.Cow.S._elems && Array.Cow.S._length_pre == Array.Cow.S._length && athis_pre == athis && index_pre == index && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
assume Cow._state_post == Cow._state_p && Cow.a_post == Cow.a_p && Cow.b_post == Cow.b_p && Cow._lock_post == Cow._lock_p && Array.Cow.T._state_post == Array.Cow.T._state_p && Array.Cow.T._elems_post == Array.Cow.T._elems_p && Array.Cow.T._length_post == Array.Cow.T._length_p && Array.Cow.S._state_post == Array.Cow.S._state_p && Array.Cow.S._elems_post == Array.Cow.S._elems_p && Array.Cow.S._length_post == Array.Cow.S._length_p && athis_post == athis && index_post == index && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assume isAccessible(Array.Cow.S._state[athis], tid);                                               
 assume Y(tid , Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length , Cow._state_p, Cow.a_p, Cow.b_p, Cow._lock_p, Array.Cow.T._state_p, Array.Cow.T._elems_p, Array.Cow.T._length_p, Array.Cow.S._state_p, Array.Cow.S._elems_p, Array.Cow.S._length_p);
 assume Y_Array.Cow.S(tid, athis, index, newValue , Cow._state_p, Cow.a_p, Cow.b_p, Cow._lock_p, Array.Cow.T._state_p, Array.Cow.T._elems_p, Array.Cow.T._length_p, Array.Cow.S._state_p, Array.Cow.S._elems_p, Array.Cow.S._length_p);
 assert Y_Array.Cow.S(tid, athis, index, newValue , Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length);
}                                                                                                   
                                                                                                    
                                                                                                    
function {:inline} Y(tid : Tid , Cow._state: [Cow]State, Cow.a: [Cow]Array.Cow.T, Cow.b: [Cow]Array.Cow.S, Cow._lock: [Cow]Tid, Array.Cow.T._state: [Array.Cow.T]State, Array.Cow.T._elems: [Array.Cow.T]([int]int), Array.Cow.T._length: [Array.Cow.T]int, Array.Cow.S._state: [Array.Cow.S]State, Array.Cow.S._elems: [Array.Cow.S]([int]int), Array.Cow.S._length: [Array.Cow.S]int , Cow._state_p: [Cow]State, Cow.a_p: [Cow]Array.Cow.T, Cow.b_p: [Cow]Array.Cow.S, Cow._lock_p: [Cow]Tid, Array.Cow.T._state_p: [Array.Cow.T]State, Array.Cow.T._elems_p: [Array.Cow.T]([int]int), Array.Cow.T._length_p: [Array.Cow.T]int, Array.Cow.S._state_p: [Array.Cow.S]State, Array.Cow.S._elems_p: [Array.Cow.S]([int]int), Array.Cow.S._length_p: [Array.Cow.S]int): bool
{                                                                                                   
 (forall this: Cow :: Y_Cow.a(tid : Tid, this, Cow.a_p[this] , Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length))
 && (forall this: Cow :: Y_Cow.b(tid : Tid, this, Cow.b_p[this] , Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length))
 && (forall this: Cow :: Y_Cow._lock(tid : Tid, this, Cow._lock_p[this] , Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length))
 && (forall athis: Array.Cow.T, index: int :: Y_Array.Cow.T(tid : Tid, athis, index, Array.Cow.T._elems_p[athis][index] , Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length))
 && (forall athis: Array.Cow.S, index: int :: Y_Array.Cow.S(tid : Tid, athis, index, Array.Cow.S._elems_p[athis][index] , Cow._state, Cow.a, Cow.b, Cow._lock, Array.Cow.T._state, Array.Cow.T._elems, Array.Cow.T._length, Array.Cow.S._state, Array.Cow.S._elems, Array.Cow.S._length))
 && (forall _i : Cow :: isShared(Cow._state[_i]) ==> isShared(Cow._state_p[_i]))                    
 && (forall _i : Cow :: isLocal(Cow._state[_i], tid) <==> isLocal(Cow._state_p[_i], tid))           
 && (forall _i : Array.Cow.T :: isShared(Array.Cow.T._state[_i]) ==> isShared(Array.Cow.T._state_p[_i]))
 && (forall _i : Array.Cow.T :: Array.Cow.T._length[_i] == Array.Cow.T._length_p[_i])               
 && (forall _i : Array.Cow.T :: isLocal(Array.Cow.T._state[_i], tid) <==> isLocal(Array.Cow.T._state_p[_i], tid))
 && (forall _i : Array.Cow.S :: isShared(Array.Cow.S._state[_i]) ==> isShared(Array.Cow.S._state_p[_i]))
 && (forall _i : Array.Cow.S :: Array.Cow.S._length[_i] == Array.Cow.S._length_p[_i])               
 && (forall _i : Array.Cow.S :: isLocal(Array.Cow.S._state[_i], tid) <==> isLocal(Array.Cow.S._state_p[_i], tid))
                                                                                                    
}                                                                                                   
                                                                                                    
                                                                                                    
// 1078.1-1288.2: (Method:23.5)
// 1090.1-1090.24: (23.5): Bad tid
// 1091.1-1091.37: (23.5): this is not global
// 1184.2-1186.2: (class anchor.sink.VarDeclStmt:24.9)
// 1187.2-1204.19: (class anchor.sink.Read:24.9)
// 1199.1-1199.27: (24.9): Cannot have potential null deference in left-mover part.
// 1203.1-1203.27: (24.9): Reduction failure
// 1207.2-1209.2: (class anchor.sink.VarDeclStmt:25.9)
// 1210.2-1212.2: (class anchor.sink.VarDeclStmt:25.9)
// 1213.2-1215.2: (class anchor.sink.VarDeclStmt:25.9)
// 1216.2-1219.17: (class anchor.sink.Assign:25.9)
// 1220.2-1223.17: (class anchor.sink.Assign:25.9)
// 1224.2-1227.19: (class anchor.sink.Assign:25.9)
// 1228.2-1230.2: (class anchor.sink.VarDeclStmt:15.9)
// 1231.2-1248.27: (class anchor.sink.Read:15.9)
// 1243.1-1243.31: (15.9): Cannot have potential null deference in left-mover part.
// 1247.1-1247.27: (15.9): Reduction failure
// 1249.2-1276.52: (class anchor.sink.AWrite:16.9)
// 1261.1-1261.36: (16.9): Cannot have potential null deference in left-mover part.
// 1266.1-1266.25: (16.9): index < 0.
// 1271.1-1271.49: (16.9): index is >= length.
// 1275.1-1275.27: (16.9): Reduction failure
// 1277.2-1280.23: (class anchor.sink.Break:14.36)
// 1282.2-1287.9: (class anchor.sink.Return:23.22)
// 1289.1-1474.2: (Method:28.5)
// 1301.1-1301.24: (28.5): Bad tid
// 1302.1-1302.37: (28.5): this is not global
// 1376.1-1376.27: (29.22): Cannot have potential null deference in left-mover part.
// 1380.1-1380.27: (29.22): Reduction failure
// 1384.2-1386.2: (class anchor.sink.VarDeclStmt:30.13)
// 1387.2-1389.2: (class anchor.sink.VarDeclStmt:30.13)
// 1390.2-1392.2: (class anchor.sink.VarDeclStmt:30.13)
// 1393.2-1396.17: (class anchor.sink.Assign:30.13)
// 1397.2-1400.17: (class anchor.sink.Assign:30.13)
// 1401.2-1404.19: (class anchor.sink.Assign:30.13)
// 1405.2-1407.2: (class anchor.sink.VarDeclStmt:15.9)
// 1408.2-1425.27: (class anchor.sink.Read:15.9)
// 1420.1-1420.31: (15.9): Cannot have potential null deference in left-mover part.
// 1424.1-1424.27: (15.9): Reduction failure
// 1426.2-1453.52: (class anchor.sink.AWrite:16.9)
// 1438.1-1438.36: (16.9): Cannot have potential null deference in left-mover part.
// 1443.1-1443.25: (16.9): index < 0.
// 1448.1-1448.49: (16.9): index is >= length.
// 1452.1-1452.27: (16.9): Reduction failure
// 1454.2-1457.23: (class anchor.sink.Break:14.36)
// 1462.1-1462.27: (31.9): Cannot have potential null deference in left-mover part.
// 1464.1-1464.32: (31.9): lock not held
// 1466.1-1466.27: (31.9): Reduction failure
// 1468.2-1473.9: (class anchor.sink.Return:28.22)
// 1475.1-1697.2: (Method:34.5)
// 1487.1-1487.24: (34.5): Bad tid
// 1488.1-1488.37: (34.5): this is not global
// 1571.1-1571.27: (35.22): Cannot have potential null deference in left-mover part.
// 1575.1-1575.27: (35.22): Reduction failure
// 1579.2-1581.2: (class anchor.sink.VarDeclStmt:36.13)
// 1582.2-1584.2: (class anchor.sink.VarDeclStmt:36.13)
// 1585.2-1587.2: (class anchor.sink.VarDeclStmt:36.13)
// 1588.2-1591.17: (class anchor.sink.Assign:36.13)
// 1592.2-1595.17: (class anchor.sink.Assign:36.13)
// 1596.2-1599.19: (class anchor.sink.Assign:36.13)
// 1602.2-1604.2: (class anchor.sink.VarDeclStmt:20.9)
// 1605.2-1607.2: (class anchor.sink.VarDeclStmt:20.9)
// 1608.2-1610.2: (class anchor.sink.VarDeclStmt:20.9)
// 1611.2-1614.25: (class anchor.sink.Assign:20.9)
// 1615.2-1618.25: (class anchor.sink.Assign:20.9)
// 1619.2-1622.23: (class anchor.sink.Assign:20.9)
// 1623.2-1625.2: (class anchor.sink.VarDeclStmt:15.9)
// 1626.2-1643.27: (class anchor.sink.Read:15.9)
// 1638.1-1638.31: (15.9): Cannot have potential null deference in left-mover part.
// 1642.1-1642.27: (15.9): Reduction failure
// 1644.2-1671.52: (class anchor.sink.AWrite:16.9)
// 1656.1-1656.36: (16.9): Cannot have potential null deference in left-mover part.
// 1661.1-1661.25: (16.9): index < 0.
// 1666.1-1666.49: (16.9): index is >= length.
// 1670.1-1670.27: (16.9): Reduction failure
// 1672.2-1675.23: (class anchor.sink.Break:14.36)
// 1677.2-1680.23: (class anchor.sink.Break:19.36)
// 1685.1-1685.27: (37.9): Cannot have potential null deference in left-mover part.
// 1687.1-1687.32: (37.9): lock not held
// 1689.1-1689.27: (37.9): Reduction failure
// 1691.2-1696.9: (class anchor.sink.Return:34.22)
// 1698.1-2058.2: (Method:40.5)
// 1710.1-1710.24: (40.5): Bad tid
// 1711.1-1711.37: (40.5): this is not global
// 1844.1-1844.27: (41.27): Cannot have potential null deference in left-mover part.
// 1848.1-1848.27: (41.27): Reduction failure
// 1850.2-1852.2: (class anchor.sink.VarDeclStmt:42.18)
// 1855.2-1857.2: (class anchor.sink.VarDeclStmt:42.18)
// 1858.2-1860.2: (class anchor.sink.VarDeclStmt:42.18)
// 1861.2-1864.17: (class anchor.sink.Assign:42.18)
// 1865.2-1868.19: (class anchor.sink.Assign:42.18)
// 1869.2-1871.2: (class anchor.sink.VarDeclStmt:9.9)
// 1872.2-1889.27: (class anchor.sink.Read:9.9)
// 1884.1-1884.31: (9.9): Cannot have potential null deference in left-mover part.
// 1888.1-1888.27: (9.9): Reduction failure
// 1890.2-1892.2: (class anchor.sink.VarDeclStmt:10.9)
// 1893.2-1920.48: (class anchor.sink.ARead:10.9)
// 1905.1-1905.36: (10.9): Cannot have potential null deference in left-mover part.
// 1910.1-1910.25: (10.9): index < 0.
// 1915.1-1915.49: (10.9): index is >= length.
// 1919.1-1919.27: (10.9): Reduction failure
// 1921.2-1924.13: (class anchor.sink.Assign:11.9)
// 1925.2-1928.23: (class anchor.sink.Break:11.9)
// 1929.2-1932.10: (class anchor.sink.Assign:8.24)
// 1933.2-1936.23: (class anchor.sink.Break:8.24)
// 1940.2-1942.2: (class anchor.sink.VarDeclStmt:43.18)
// 1943.2-1945.2: (class anchor.sink.VarDeclStmt:43.18)
// 1946.2-1948.2: (class anchor.sink.VarDeclStmt:43.18)
// 1949.2-1952.17: (class anchor.sink.Assign:43.18)
// 1953.2-1956.17: (class anchor.sink.Assign:43.18)
// 1957.2-1960.19: (class anchor.sink.Assign:43.18)
// 1963.2-1965.2: (class anchor.sink.VarDeclStmt:20.9)
// 1966.2-1968.2: (class anchor.sink.VarDeclStmt:20.9)
// 1969.2-1971.2: (class anchor.sink.VarDeclStmt:20.9)
// 1972.2-1975.25: (class anchor.sink.Assign:20.9)
// 1976.2-1979.25: (class anchor.sink.Assign:20.9)
// 1980.2-1983.23: (class anchor.sink.Assign:20.9)
// 1984.2-1986.2: (class anchor.sink.VarDeclStmt:15.9)
// 1987.2-2004.27: (class anchor.sink.Read:15.9)
// 1999.1-1999.31: (15.9): Cannot have potential null deference in left-mover part.
// 2003.1-2003.27: (15.9): Reduction failure
// 2005.2-2032.52: (class anchor.sink.AWrite:16.9)
// 2017.1-2017.36: (16.9): Cannot have potential null deference in left-mover part.
// 2022.1-2022.25: (16.9): index < 0.
// 2027.1-2027.49: (16.9): index is >= length.
// 2031.1-2031.27: (16.9): Reduction failure
// 2033.2-2036.23: (class anchor.sink.Break:14.36)
// 2038.2-2041.23: (class anchor.sink.Break:19.36)
// 2046.1-2046.27: (44.14): Cannot have potential null deference in left-mover part.
// 2048.1-2048.32: (44.14): lock not held
// 2050.1-2050.27: (44.14): Reduction failure
// 2052.2-2057.9: (class anchor.sink.Return:40.22)
// 2238.1-2238.34: (5.5): Cow.a failed Write-Write Right-Mover Check
// 2309.1-2309.30: (5.5): Cow.a failed Write-Read Right-Mover Check
// 2384.1-2384.34: (5.5): Cow.a failed Write-Write Left-Mover Check
// 2456.1-2456.30: (5.5): Cow.a failed Write-Read Left-Mover Check
// 2525.1-2525.34: (5.5): Cow.a failed Read-Write Right-Mover Check
// 2597.1-2597.34: (5.5): Cow.a failed Read-Write Left-Mover Check
// 2668.1-2668.34: (6.5): Cow.b failed Write-Write Right-Mover Check
// 2739.1-2739.30: (6.5): Cow.b failed Write-Read Right-Mover Check
// 2814.1-2814.34: (6.5): Cow.b failed Write-Write Left-Mover Check
// 2886.1-2886.30: (6.5): Cow.b failed Write-Read Left-Mover Check
// 2955.1-2955.34: (6.5): Cow.b failed Read-Write Right-Mover Check
// 3027.1-3027.34: (6.5): Cow.b failed Read-Write Left-Mover Check
// 3104.1-3104.34: (3.5): Array Array.Cow.T failed Write-Write Right-Mover Check
// 3181.1-3181.30: (3.5): Array Array.Cow.T failed Write-Read Right-Mover Check
// 3262.1-3262.34: (3.5): Array Array.Cow.T failed Write-Write Left-Mover Check
// 3340.1-3340.30: (3.5): Array Array.Cow.T failed Write-Read Left-Mover Check
// 3415.1-3415.34: (3.5): Array Array.Cow.T failed Read-Write Right-Mover Check
// 3493.1-3493.34: (3.5): Array Array.Cow.T failed Read-Write Left-Mover Check
// 3570.1-3570.34: (4.5): Array Array.Cow.S failed Write-Write Right-Mover Check
// 3647.1-3647.30: (4.5): Array Array.Cow.S failed Write-Read Right-Mover Check
// 3728.1-3728.34: (4.5): Array Array.Cow.S failed Write-Write Left-Mover Check
// 3806.1-3806.30: (4.5): Array Array.Cow.S failed Write-Read Left-Mover Check
// 3881.1-3881.34: (4.5): Array Array.Cow.S failed Read-Write Right-Mover Check
// 3959.1-3959.34: (4.5): Array Array.Cow.S failed Read-Write Left-Mover Check
// 4042.1-4042.140: (5.5): Cow.a is not Write-Write Stable with respect to Cow.a (case A.1)
// 4043.1-4043.101: (5.5): Cow.a is not Write-Write Stable with respect to Cow.a (case A.2)
// 4044.1-4044.158: (5.5): Cow.a is not Write-Write Stable with respect to Cow.a (case A.3)
// 4158.1-4158.140: (5.5): Cow.a is not Write-Write Stable with respect to Cow.a (case C)
// 4277.1-4277.144: (5.5): Cow.a is not Write-Write Stable with respect to Cow.a (case D)
// 4278.1-4278.144: (5.5): Cow.a is not Write-Write Stable with respect to Cow.a (case R)
// 4361.1-4361.136: (5.5): Cow.a is not Read-Write Stable with respect to Cow.a (case F)
// 4362.1-4362.136: (5.5): Cow.a is not Read-Write Stable with respect to Cow.a (case H)
// 4363.1-4363.146: (5.5): Cow.a is not Read-Write Stable with respect to Cow.a (case I)
// 4445.1-4445.136: (5.5): Cow.a is not Write-Read Stable with respect to Cow.a (case J)
// 4446.1-4446.136: (5.5): Cow.a is not Write-Read Stable with respect to Cow.a (case K)
// 4447.1-4447.99: (5.5): Cow.a is not Write-Read Stable with respect to Cow.a (case L)
// 4531.1-4531.140: (6.5): Cow.b is not Write-Write Stable with respect to Cow.a (case A.1)
// 4532.1-4532.101: (6.5): Cow.b is not Write-Write Stable with respect to Cow.a (case A.2)
// 4533.1-4533.158: (6.5): Cow.b is not Write-Write Stable with respect to Cow.a (case A.3)
// 4647.1-4647.140: (5.5): Cow.a is not Write-Write Stable with respect to Cow.b (case C)
// 4766.1-4766.144: (5.5): Cow.a is not Write-Write Stable with respect to Cow.b (case D)
// 4767.1-4767.144: (5.5): Cow.a is not Write-Write Stable with respect to Cow.b (case R)
// 4850.1-4850.136: (5.5): Cow.a is not Read-Write Stable with respect to Cow.b (case F)
// 4851.1-4851.136: (5.5): Cow.a is not Read-Write Stable with respect to Cow.b (case H)
// 4852.1-4852.146: (5.5): Cow.a is not Read-Write Stable with respect to Cow.b (case I)
// 4934.1-4934.136: (6.5): Cow.b is not Write-Read Stable with respect to Cow.a (case J)
// 4935.1-4935.136: (6.5): Cow.b is not Write-Read Stable with respect to Cow.a (case K)
// 4936.1-4936.99: (6.5): Cow.b is not Write-Read Stable with respect to Cow.a (case L)
// 5025.1-5025.140: (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Cow.a (case A.1)
// 5026.1-5026.101: (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Cow.a (case A.2)
// 5027.1-5027.156: (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Cow.a (case A.3)
// 5148.1-5148.140: (5.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.T (case C)
// 5274.1-5274.144: (5.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.T (case D)
// 5275.1-5275.144: (5.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.T (case R)
// 5363.1-5363.136: (5.5): Cow.a is not Read-Write Stable with respect to Array Array.Cow.T (case F)
// 5364.1-5364.136: (5.5): Cow.a is not Read-Write Stable with respect to Array Array.Cow.T (case H)
// 5365.1-5365.144: (5.5): Cow.a is not Read-Write Stable with respect to Array Array.Cow.T (case I)
// 5452.1-5452.136: (3.5): Array Array.Cow.T is not Write-Read Stable with respect to Cow.a (case J)
// 5453.1-5453.136: (3.5): Array Array.Cow.T is not Write-Read Stable with respect to Cow.a (case K)
// 5454.1-5454.99: (3.5): Array Array.Cow.T is not Write-Read Stable with respect to Cow.a (case L)
// 5543.1-5543.140: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Cow.a (case A.1)
// 5544.1-5544.101: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Cow.a (case A.2)
// 5545.1-5545.156: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Cow.a (case A.3)
// 5666.1-5666.140: (5.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.S (case C)
// 5792.1-5792.144: (5.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.S (case D)
// 5793.1-5793.144: (5.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.S (case R)
// 5881.1-5881.136: (5.5): Cow.a is not Read-Write Stable with respect to Array Array.Cow.S (case F)
// 5882.1-5882.136: (5.5): Cow.a is not Read-Write Stable with respect to Array Array.Cow.S (case H)
// 5883.1-5883.144: (5.5): Cow.a is not Read-Write Stable with respect to Array Array.Cow.S (case I)
// 5970.1-5970.136: (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Cow.a (case J)
// 5971.1-5971.136: (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Cow.a (case K)
// 5972.1-5972.99: (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Cow.a (case L)
// 6056.1-6056.140: (5.5): Cow.a is not Write-Write Stable with respect to Cow.b (case A.1)
// 6057.1-6057.101: (5.5): Cow.a is not Write-Write Stable with respect to Cow.b (case A.2)
// 6058.1-6058.158: (5.5): Cow.a is not Write-Write Stable with respect to Cow.b (case A.3)
// 6172.1-6172.140: (6.5): Cow.b is not Write-Write Stable with respect to Cow.a (case C)
// 6291.1-6291.144: (6.5): Cow.b is not Write-Write Stable with respect to Cow.a (case D)
// 6292.1-6292.144: (6.5): Cow.b is not Write-Write Stable with respect to Cow.a (case R)
// 6375.1-6375.136: (6.5): Cow.b is not Read-Write Stable with respect to Cow.a (case F)
// 6376.1-6376.136: (6.5): Cow.b is not Read-Write Stable with respect to Cow.a (case H)
// 6377.1-6377.146: (6.5): Cow.b is not Read-Write Stable with respect to Cow.a (case I)
// 6459.1-6459.136: (5.5): Cow.a is not Write-Read Stable with respect to Cow.b (case J)
// 6460.1-6460.136: (5.5): Cow.a is not Write-Read Stable with respect to Cow.b (case K)
// 6461.1-6461.99: (5.5): Cow.a is not Write-Read Stable with respect to Cow.b (case L)
// 6545.1-6545.140: (6.5): Cow.b is not Write-Write Stable with respect to Cow.b (case A.1)
// 6546.1-6546.101: (6.5): Cow.b is not Write-Write Stable with respect to Cow.b (case A.2)
// 6547.1-6547.158: (6.5): Cow.b is not Write-Write Stable with respect to Cow.b (case A.3)
// 6661.1-6661.140: (6.5): Cow.b is not Write-Write Stable with respect to Cow.b (case C)
// 6780.1-6780.144: (6.5): Cow.b is not Write-Write Stable with respect to Cow.b (case D)
// 6781.1-6781.144: (6.5): Cow.b is not Write-Write Stable with respect to Cow.b (case R)
// 6864.1-6864.136: (6.5): Cow.b is not Read-Write Stable with respect to Cow.b (case F)
// 6865.1-6865.136: (6.5): Cow.b is not Read-Write Stable with respect to Cow.b (case H)
// 6866.1-6866.146: (6.5): Cow.b is not Read-Write Stable with respect to Cow.b (case I)
// 6948.1-6948.136: (6.5): Cow.b is not Write-Read Stable with respect to Cow.b (case J)
// 6949.1-6949.136: (6.5): Cow.b is not Write-Read Stable with respect to Cow.b (case K)
// 6950.1-6950.99: (6.5): Cow.b is not Write-Read Stable with respect to Cow.b (case L)
// 7039.1-7039.140: (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Cow.b (case A.1)
// 7040.1-7040.101: (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Cow.b (case A.2)
// 7041.1-7041.156: (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Cow.b (case A.3)
// 7162.1-7162.140: (6.5): Cow.b is not Write-Write Stable with respect to Array Array.Cow.T (case C)
// 7288.1-7288.144: (6.5): Cow.b is not Write-Write Stable with respect to Array Array.Cow.T (case D)
// 7289.1-7289.144: (6.5): Cow.b is not Write-Write Stable with respect to Array Array.Cow.T (case R)
// 7377.1-7377.136: (6.5): Cow.b is not Read-Write Stable with respect to Array Array.Cow.T (case F)
// 7378.1-7378.136: (6.5): Cow.b is not Read-Write Stable with respect to Array Array.Cow.T (case H)
// 7379.1-7379.144: (6.5): Cow.b is not Read-Write Stable with respect to Array Array.Cow.T (case I)
// 7466.1-7466.136: (3.5): Array Array.Cow.T is not Write-Read Stable with respect to Cow.b (case J)
// 7467.1-7467.136: (3.5): Array Array.Cow.T is not Write-Read Stable with respect to Cow.b (case K)
// 7468.1-7468.99: (3.5): Array Array.Cow.T is not Write-Read Stable with respect to Cow.b (case L)
// 7557.1-7557.140: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Cow.b (case A.1)
// 7558.1-7558.101: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Cow.b (case A.2)
// 7559.1-7559.156: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Cow.b (case A.3)
// 7680.1-7680.140: (6.5): Cow.b is not Write-Write Stable with respect to Array Array.Cow.S (case C)
// 7806.1-7806.144: (6.5): Cow.b is not Write-Write Stable with respect to Array Array.Cow.S (case D)
// 7807.1-7807.144: (6.5): Cow.b is not Write-Write Stable with respect to Array Array.Cow.S (case R)
// 7895.1-7895.136: (6.5): Cow.b is not Read-Write Stable with respect to Array Array.Cow.S (case F)
// 7896.1-7896.136: (6.5): Cow.b is not Read-Write Stable with respect to Array Array.Cow.S (case H)
// 7897.1-7897.144: (6.5): Cow.b is not Read-Write Stable with respect to Array Array.Cow.S (case I)
// 7984.1-7984.136: (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Cow.b (case J)
// 7985.1-7985.136: (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Cow.b (case K)
// 7986.1-7986.99: (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Cow.b (case L)
// 8075.1-8075.140: (5.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.T (case A.1)
// 8076.1-8076.101: (5.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.T (case A.2)
// 8077.1-8077.156: (5.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.T (case A.3)
// 8198.1-8198.140: (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Cow.a (case C)
// 8324.1-8324.144: (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Cow.a (case D)
// 8325.1-8325.144: (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Cow.a (case R)
// 8413.1-8413.136: (3.5): Array Array.Cow.T is not Read-Write Stable with respect to Cow.a (case F)
// 8414.1-8414.136: (3.5): Array Array.Cow.T is not Read-Write Stable with respect to Cow.a (case H)
// 8415.1-8415.144: (3.5): Array Array.Cow.T is not Read-Write Stable with respect to Cow.a (case I)
// 8502.1-8502.136: (5.5): Cow.a is not Write-Read Stable with respect to Array Array.Cow.T (case J)
// 8503.1-8503.136: (5.5): Cow.a is not Write-Read Stable with respect to Array Array.Cow.T (case K)
// 8504.1-8504.99: (5.5): Cow.a is not Write-Read Stable with respect to Array Array.Cow.T (case L)
// 8593.1-8593.140: (6.5): Cow.b is not Write-Write Stable with respect to Array Array.Cow.T (case A.1)
// 8594.1-8594.101: (6.5): Cow.b is not Write-Write Stable with respect to Array Array.Cow.T (case A.2)
// 8595.1-8595.156: (6.5): Cow.b is not Write-Write Stable with respect to Array Array.Cow.T (case A.3)
// 8716.1-8716.140: (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Cow.b (case C)
// 8842.1-8842.144: (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Cow.b (case D)
// 8843.1-8843.144: (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Cow.b (case R)
// 8931.1-8931.136: (3.5): Array Array.Cow.T is not Read-Write Stable with respect to Cow.b (case F)
// 8932.1-8932.136: (3.5): Array Array.Cow.T is not Read-Write Stable with respect to Cow.b (case H)
// 8933.1-8933.144: (3.5): Array Array.Cow.T is not Read-Write Stable with respect to Cow.b (case I)
// 9020.1-9020.136: (6.5): Cow.b is not Write-Read Stable with respect to Array Array.Cow.T (case J)
// 9021.1-9021.136: (6.5): Cow.b is not Write-Read Stable with respect to Array Array.Cow.T (case K)
// 9022.1-9022.99: (6.5): Cow.b is not Write-Read Stable with respect to Array Array.Cow.T (case L)
// 9116.1-9116.140: (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.T (case A.1)
// 9117.1-9117.101: (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.T (case A.2)
// 9118.1-9118.156: (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.T (case A.3)
// 9246.1-9246.140: (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.T (case C)
// 9379.1-9379.144: (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.T (case D)
// 9380.1-9380.144: (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.T (case R)
// 9473.1-9473.136: (3.5): Array Array.Cow.T is not Read-Write Stable with respect to Array Array.Cow.T (case F)
// 9474.1-9474.136: (3.5): Array Array.Cow.T is not Read-Write Stable with respect to Array Array.Cow.T (case H)
// 9475.1-9475.144: (3.5): Array Array.Cow.T is not Read-Write Stable with respect to Array Array.Cow.T (case I)
// 9567.1-9567.136: (3.5): Array Array.Cow.T is not Write-Read Stable with respect to Array Array.Cow.T (case J)
// 9568.1-9568.136: (3.5): Array Array.Cow.T is not Write-Read Stable with respect to Array Array.Cow.T (case K)
// 9569.1-9569.99: (3.5): Array Array.Cow.T is not Write-Read Stable with respect to Array Array.Cow.T (case L)
// 9663.1-9663.140: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.T (case A.1)
// 9664.1-9664.101: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.T (case A.2)
// 9665.1-9665.156: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.T (case A.3)
// 9793.1-9793.140: (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.S (case C)
// 9926.1-9926.144: (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.S (case D)
// 9927.1-9927.144: (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.S (case R)
// 10020.1-10020.136: (3.5): Array Array.Cow.T is not Read-Write Stable with respect to Array Array.Cow.S (case F)
// 10021.1-10021.136: (3.5): Array Array.Cow.T is not Read-Write Stable with respect to Array Array.Cow.S (case H)
// 10022.1-10022.144: (3.5): Array Array.Cow.T is not Read-Write Stable with respect to Array Array.Cow.S (case I)
// 10114.1-10114.136: (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Array Array.Cow.T (case J)
// 10115.1-10115.136: (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Array Array.Cow.T (case K)
// 10116.1-10116.99: (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Array Array.Cow.T (case L)
// 10205.1-10205.140: (5.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.S (case A.1)
// 10206.1-10206.101: (5.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.S (case A.2)
// 10207.1-10207.156: (5.5): Cow.a is not Write-Write Stable with respect to Array Array.Cow.S (case A.3)
// 10328.1-10328.140: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Cow.a (case C)
// 10454.1-10454.144: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Cow.a (case D)
// 10455.1-10455.144: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Cow.a (case R)
// 10543.1-10543.136: (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Cow.a (case F)
// 10544.1-10544.136: (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Cow.a (case H)
// 10545.1-10545.144: (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Cow.a (case I)
// 10632.1-10632.136: (5.5): Cow.a is not Write-Read Stable with respect to Array Array.Cow.S (case J)
// 10633.1-10633.136: (5.5): Cow.a is not Write-Read Stable with respect to Array Array.Cow.S (case K)
// 10634.1-10634.99: (5.5): Cow.a is not Write-Read Stable with respect to Array Array.Cow.S (case L)
// 10723.1-10723.140: (6.5): Cow.b is not Write-Write Stable with respect to Array Array.Cow.S (case A.1)
// 10724.1-10724.101: (6.5): Cow.b is not Write-Write Stable with respect to Array Array.Cow.S (case A.2)
// 10725.1-10725.156: (6.5): Cow.b is not Write-Write Stable with respect to Array Array.Cow.S (case A.3)
// 10846.1-10846.140: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Cow.b (case C)
// 10972.1-10972.144: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Cow.b (case D)
// 10973.1-10973.144: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Cow.b (case R)
// 11061.1-11061.136: (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Cow.b (case F)
// 11062.1-11062.136: (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Cow.b (case H)
// 11063.1-11063.144: (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Cow.b (case I)
// 11150.1-11150.136: (6.5): Cow.b is not Write-Read Stable with respect to Array Array.Cow.S (case J)
// 11151.1-11151.136: (6.5): Cow.b is not Write-Read Stable with respect to Array Array.Cow.S (case K)
// 11152.1-11152.99: (6.5): Cow.b is not Write-Read Stable with respect to Array Array.Cow.S (case L)
// 11246.1-11246.140: (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.S (case A.1)
// 11247.1-11247.101: (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.S (case A.2)
// 11248.1-11248.156: (3.5): Array Array.Cow.T is not Write-Write Stable with respect to Array Array.Cow.S (case A.3)
// 11376.1-11376.140: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.T (case C)
// 11509.1-11509.144: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.T (case D)
// 11510.1-11510.144: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.T (case R)
// 11603.1-11603.136: (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Array Array.Cow.T (case F)
// 11604.1-11604.136: (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Array Array.Cow.T (case H)
// 11605.1-11605.144: (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Array Array.Cow.T (case I)
// 11697.1-11697.136: (3.5): Array Array.Cow.T is not Write-Read Stable with respect to Array Array.Cow.S (case J)
// 11698.1-11698.136: (3.5): Array Array.Cow.T is not Write-Read Stable with respect to Array Array.Cow.S (case K)
// 11699.1-11699.99: (3.5): Array Array.Cow.T is not Write-Read Stable with respect to Array Array.Cow.S (case L)
// 11793.1-11793.140: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.S (case A.1)
// 11794.1-11794.101: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.S (case A.2)
// 11795.1-11795.156: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.S (case A.3)
// 11923.1-11923.140: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.S (case C)
// 12056.1-12056.144: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.S (case D)
// 12057.1-12057.144: (4.5): Array Array.Cow.S is not Write-Write Stable with respect to Array Array.Cow.S (case R)
// 12150.1-12150.136: (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Array Array.Cow.S (case F)
// 12151.1-12151.136: (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Array Array.Cow.S (case H)
// 12152.1-12152.144: (4.5): Array Array.Cow.S is not Read-Write Stable with respect to Array Array.Cow.S (case I)
// 12244.1-12244.136: (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Array Array.Cow.S (case J)
// 12245.1-12245.136: (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Array Array.Cow.S (case K)
// 12246.1-12246.99: (4.5): Array Array.Cow.S is not Write-Read Stable with respect to Array Array.Cow.S (case L)
// 12282.1-12308.2: (5.5): yields_as clause for Cow.a is not valid
// 12313.1-12334.2: (5.5): yields_as clause for Cow.a is not reflexive
// 12340.1-12382.2: (5.5): yields_as clause for Cow.a is not transitive
// 12401.1-12427.2: (6.5): yields_as clause for Cow.b is not valid
// 12432.1-12453.2: (6.5): yields_as clause for Cow.b is not reflexive
// 12459.1-12501.2: (6.5): yields_as clause for Cow.b is not transitive
// 12521.1-12547.2: (7.32): yields_as clause for Cow._lock is not valid
// 12552.1-12573.2: (7.32): yields_as clause for Cow._lock is not reflexive
// 12579.1-12621.2: (7.32): yields_as clause for Cow._lock is not transitive
// 12639.1-12669.2: (3.5): yields_as clause for Array.Cow.T is not valid
// 12670.1-12697.2: (3.5): yields_as clause for Array.Cow.T is not reflexive
// 12702.1-12748.2: (3.5): yields_as clause for Array.Cow.T is not transitive
// 12766.1-12796.2: (4.5): yields_as clause for Array.Cow.S is not valid
// 12797.1-12824.2: (4.5): yields_as clause for Array.Cow.S is not reflexive
// 12829.1-12875.2: (4.5): yields_as clause for Array.Cow.S is not transitive
